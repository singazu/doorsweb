//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.87;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.87] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 * 
 * <Under>
 * 
 * - Used for: Animation Name Tags
 * - If this tag is found in an animation's name, the animation will appear
 *   under battlers while in battle.
 * - This effect only applies to battlers in the battle scene.
 * - Under effect is NOT applied to status window portraits.
 * - Under effect is NOT applied to projectile animations.
 * 
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 *   - This is NOT used for filtering out who the player can or cannot select.
 *   - This determines a final result.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *     
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.87: June 12, 2025
 * * Bug Fixes!
 * ** Fixed a bug where <JS Accuracy> and related notetags did not work.
 *    Fix made by Arisu.
 * ** Fixed a bug where dual wielding weapons with HP/MP bonuses would cause
 *    the max cache values to fluctuate per hit. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added fail safes for plugins that would sometimes add null battlers to
 *    animation queues. This update prevents crashes for potential checks.
 * ** Added better compatibility with Message Core's text language change.
 *    Enemy names did not convert prior to placing state icons and would cause
 *    misalignment.
 * 
 * Version 1.86: January 16, 2025
 * * Bug Fixes!
 * ** Fixed a bug where during Active TPB, actors were not showing damage
 *    motions. Fix made by Olivia.
 * ** Fixed a bug regarding the in-battle status requiring that the Main Menu
 *    Core to be installed when other plugins are also present. Fix by Olivia.
 * ** Fixed a bug where <Exclude From Status Listing> notetag was not working
 *    properly due to a documentation typo of <Exclude From Status List>. Both
 *    notetags should now work. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added clarity for Plugin Parameters > Party Command Window Settings >
 *    Help Window
 * ** Added clarity for Plugin Parameters > Actor Command Window Settings >
 *    Help Window
 * *** The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 *     battle layouts.
 * * New Features!
 * ** New notetag added by Irina:
 * *** <Under>
 * **** If this tag is found in an animation's name, the animation will appear
 *      under battlers while in battle.
 * ***** This effect only applies to battlers in the battle scene.
 * ***** Under effect is NOT applied to status window portraits.
 * ***** Under effect is NOT applied to projectile animations.
 * ** Added new Action Sequence Projectile settings:
 * *** Extra Settings > End Animation ID:
 * **** Plays an animation when projectile reaches target.
 * **** Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x29c7b3=_0x16cb;(function(_0x24c68b,_0x4d151d){const _0x1c3a2e=_0x16cb,_0x3914e2=_0x24c68b();while(!![]){try{const _0x4ffd46=-parseInt(_0x1c3a2e(0x854))/0x1*(parseInt(_0x1c3a2e(0x5d6))/0x2)+-parseInt(_0x1c3a2e(0xa57))/0x3*(-parseInt(_0x1c3a2e(0xbc0))/0x4)+-parseInt(_0x1c3a2e(0x558))/0x5*(parseInt(_0x1c3a2e(0x18a))/0x6)+parseInt(_0x1c3a2e(0x18b))/0x7*(parseInt(_0x1c3a2e(0x4a8))/0x8)+-parseInt(_0x1c3a2e(0x82d))/0x9*(parseInt(_0x1c3a2e(0x667))/0xa)+-parseInt(_0x1c3a2e(0x4ca))/0xb+parseInt(_0x1c3a2e(0xb92))/0xc;if(_0x4ffd46===_0x4d151d)break;else _0x3914e2['push'](_0x3914e2['shift']());}catch(_0x37630d){_0x3914e2['push'](_0x3914e2['shift']());}}}(_0x19fb,0x3e0ba));var label=_0x29c7b3(0x2e2),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x29c7b3(0x55e)](function(_0x4af535){const _0x5d96d9=_0x29c7b3;return _0x4af535[_0x5d96d9(0x7b7)]&&_0x4af535[_0x5d96d9(0xaff)][_0x5d96d9(0xba2)]('['+label+']');})[0x0];VisuMZ[label][_0x29c7b3(0xc14)]=VisuMZ[label][_0x29c7b3(0xc14)]||{},VisuMZ[_0x29c7b3(0x4cc)]=function(_0x371399,_0x729fb9){const _0x10a8e9=_0x29c7b3;for(const _0x2d2870 in _0x729fb9){if(_0x2d2870[_0x10a8e9(0x290)](/(.*):(.*)/i)){const _0x3a1e4e=String(RegExp['$1']),_0x37033c=String(RegExp['$2'])[_0x10a8e9(0x36b)]()[_0x10a8e9(0x89a)]();let _0x2f8285,_0x54bd84,_0x525845;switch(_0x37033c){case _0x10a8e9(0x69e):_0x2f8285=_0x729fb9[_0x2d2870]!==''?Number(_0x729fb9[_0x2d2870]):0x0;break;case'ARRAYNUM':_0x54bd84=_0x729fb9[_0x2d2870]!==''?JSON[_0x10a8e9(0xa55)](_0x729fb9[_0x2d2870]):[],_0x2f8285=_0x54bd84[_0x10a8e9(0x8ea)](_0x121129=>Number(_0x121129));break;case'EVAL':_0x2f8285=_0x729fb9[_0x2d2870]!==''?eval(_0x729fb9[_0x2d2870]):null;break;case'ARRAYEVAL':_0x54bd84=_0x729fb9[_0x2d2870]!==''?JSON[_0x10a8e9(0xa55)](_0x729fb9[_0x2d2870]):[],_0x2f8285=_0x54bd84[_0x10a8e9(0x8ea)](_0x310903=>eval(_0x310903));break;case _0x10a8e9(0x8f4):_0x2f8285=_0x729fb9[_0x2d2870]!==''?JSON[_0x10a8e9(0xa55)](_0x729fb9[_0x2d2870]):'';break;case _0x10a8e9(0x754):_0x54bd84=_0x729fb9[_0x2d2870]!==''?JSON[_0x10a8e9(0xa55)](_0x729fb9[_0x2d2870]):[],_0x2f8285=_0x54bd84[_0x10a8e9(0x8ea)](_0x7d69f2=>JSON[_0x10a8e9(0xa55)](_0x7d69f2));break;case'FUNC':_0x2f8285=_0x729fb9[_0x2d2870]!==''?new Function(JSON[_0x10a8e9(0xa55)](_0x729fb9[_0x2d2870])):new Function(_0x10a8e9(0x7df));break;case _0x10a8e9(0x1bb):_0x54bd84=_0x729fb9[_0x2d2870]!==''?JSON[_0x10a8e9(0xa55)](_0x729fb9[_0x2d2870]):[],_0x2f8285=_0x54bd84[_0x10a8e9(0x8ea)](_0x3eac62=>new Function(JSON[_0x10a8e9(0xa55)](_0x3eac62)));break;case'STR':_0x2f8285=_0x729fb9[_0x2d2870]!==''?String(_0x729fb9[_0x2d2870]):'';break;case _0x10a8e9(0x147):_0x54bd84=_0x729fb9[_0x2d2870]!==''?JSON[_0x10a8e9(0xa55)](_0x729fb9[_0x2d2870]):[],_0x2f8285=_0x54bd84['map'](_0x36352e=>String(_0x36352e));break;case _0x10a8e9(0x4a3):_0x525845=_0x729fb9[_0x2d2870]!==''?JSON[_0x10a8e9(0xa55)](_0x729fb9[_0x2d2870]):{},_0x371399[_0x3a1e4e]={},VisuMZ[_0x10a8e9(0x4cc)](_0x371399[_0x3a1e4e],_0x525845);continue;case _0x10a8e9(0x9ea):_0x54bd84=_0x729fb9[_0x2d2870]!==''?JSON[_0x10a8e9(0xa55)](_0x729fb9[_0x2d2870]):[],_0x2f8285=_0x54bd84[_0x10a8e9(0x8ea)](_0x7ab753=>VisuMZ[_0x10a8e9(0x4cc)]({},JSON[_0x10a8e9(0xa55)](_0x7ab753)));break;default:continue;}_0x371399[_0x3a1e4e]=_0x2f8285;}}return _0x371399;},(_0x1f78dc=>{const _0x750ec9=_0x29c7b3,_0x5341e2=_0x1f78dc[_0x750ec9(0x161)];for(const _0x48c7d8 of dependencies){if(!Imported[_0x48c7d8]){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x750ec9(0x77d)](_0x5341e2,_0x48c7d8)),SceneManager[_0x750ec9(0x99d)]();break;}}const _0x39e73f=_0x1f78dc[_0x750ec9(0xaff)];if(_0x39e73f[_0x750ec9(0x290)](/\[Version[ ](.*?)\]/i)){const _0x24d906=Number(RegExp['$1']);_0x24d906!==VisuMZ[label][_0x750ec9(0x65e)]&&(alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x750ec9(0x77d)](_0x5341e2,_0x24d906)),SceneManager['exit']());}if(_0x39e73f['match'](/\[Tier[ ](\d+)\]/i)){const _0x4330a9=Number(RegExp['$1']);_0x4330a9<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x750ec9(0x77d)](_0x5341e2,_0x4330a9,tier)),SceneManager['exit']()):tier=Math[_0x750ec9(0xbaf)](_0x4330a9,tier);}VisuMZ[_0x750ec9(0x4cc)](VisuMZ[label][_0x750ec9(0xc14)],_0x1f78dc['parameters']);})(pluginData),VisuMZ[_0x29c7b3(0x951)]=function(_0x33a1df){const _0x2388ba=_0x29c7b3;let _0x125df0=[];for(const _0x26f7e8 of _0x33a1df){_0x125df0=_0x125df0['concat'](VisuMZ[_0x2388ba(0xa17)](_0x26f7e8));}return _0x125df0[_0x2388ba(0x55e)](_0x64f1a5=>_0x64f1a5);},VisuMZ['ConvertActionSequenceTarget']=function(_0x271286){const _0x1e5227=_0x29c7b3,_0x7d8542=BattleManager[_0x1e5227(0xaf1)]()[_0x1e5227(0x55e)](_0x2eb7e7=>_0x2eb7e7&&_0x2eb7e7[_0x1e5227(0xb5b)]()),_0x1c5159=BattleManager[_0x1e5227(0x215)],_0x2a24d8=BattleManager['_target'],_0x589765=BattleManager[_0x1e5227(0x5e1)]?BattleManager[_0x1e5227(0x5e1)][_0x1e5227(0x14e)](0x0):_0x7d8542;_0x271286=_0x271286[_0x1e5227(0x6fd)]()[_0x1e5227(0x89a)]();if(_0x271286===_0x1e5227(0xb09))return[_0x1c5159];else{if(_0x271286===_0x1e5227(0x90c))return[_0x2a24d8];else{if(_0x271286===_0x1e5227(0x22a)){if(_0x2a24d8){const _0x16b1f6=_0x589765[_0x1e5227(0x617)](_0x2a24d8);return _0x16b1f6>=0x0?[_0x589765[_0x16b1f6-0x1]||_0x2a24d8]:[_0x2a24d8];}}else{if(_0x271286===_0x1e5227(0xaf5)){if(_0x2a24d8){const _0x27b763=_0x589765['indexOf'](_0x2a24d8);return _0x27b763>=0x0?[_0x589765[_0x27b763+0x1]||_0x2a24d8]:[_0x2a24d8];}}else{if(_0x271286===_0x1e5227(0xafc))return _0x589765;else{if(_0x271286===_0x1e5227(0xb24))return[_0x1c5159][_0x1e5227(0xaaf)](_0x589765);else{if(_0x271286==='not\x20focus')return _0x7d8542[_0x1e5227(0x55e)](_0x57525d=>_0x57525d!==_0x1c5159&&!_0x589765[_0x1e5227(0xba2)](_0x57525d)&&_0x57525d[_0x1e5227(0x9e3)]());else{if(_0x271286===_0x1e5227(0x997))return[VisuMZ[_0x1e5227(0x265)]()];else{if(_0x271286[_0x1e5227(0x290)](/SPECIAL (.*)>/i)){const _0x27e0ee=String(RegExp['$1'])[_0x1e5227(0xb3b)](',')['map'](_0x35c9be=>_0x35c9be['trim']());return[VisuMZ[_0x1e5227(0x1a8)](_0x27e0ee)];}}}}}}}}}if(_0x1c5159){if(_0x271286===_0x1e5227(0x95b))return _0x1c5159[_0x1e5227(0x922)]()[_0x1e5227(0x89d)]();else{if(_0x271286===_0x1e5227(0x545))return _0x1c5159[_0x1e5227(0x922)]()[_0x1e5227(0x89d)]()[_0x1e5227(0x55e)](_0x5f1a55=>_0x5f1a55!==_0x1c5159);else{if(_0x271286===_0x1e5227(0x9b7))return _0x1c5159['friendsUnit']()[_0x1e5227(0x89d)]()['filter'](_0x3b93ed=>_0x3b93ed!==_0x2a24d8);else{if(_0x271286===_0x1e5227(0xab7))return _0x1c5159['friendsUnit']()['deadMembers']();else{if(_0x271286['match'](/FRIEND INDEX (\d+)/i)){const _0x17cc7d=Number(RegExp['$1']);return[_0x1c5159[_0x1e5227(0x922)]()[_0x1e5227(0xa35)]()[_0x17cc7d]];}}}}}if(_0x271286==='alive\x20opponents')return _0x1c5159['opponentsUnit']()['aliveMembers']();else{if(_0x271286===_0x1e5227(0x1fc))return _0x1c5159[_0x1e5227(0x773)]()[_0x1e5227(0x89d)]()[_0x1e5227(0x55e)](_0x2556f1=>_0x2556f1!==_0x2a24d8);else{if(_0x271286===_0x1e5227(0x68b))return _0x1c5159[_0x1e5227(0x773)]()[_0x1e5227(0x724)]();else{if(_0x271286[_0x1e5227(0x290)](/OPPONENT INDEX (\d+)/i)){const _0x1cf449=Number(RegExp['$1']);return[_0x1c5159[_0x1e5227(0x773)]()[_0x1e5227(0xa35)]()[_0x1cf449]];}}}}}if(_0x271286===_0x1e5227(0x2ea))return $gameParty[_0x1e5227(0x89d)]();else{if(_0x271286===_0x1e5227(0x4b4))return $gameParty[_0x1e5227(0x89d)]()[_0x1e5227(0x55e)](_0x3b455c=>_0x3b455c!==_0x1c5159);else{if(_0x271286===_0x1e5227(0x986))return $gameParty[_0x1e5227(0x89d)]()[_0x1e5227(0x55e)](_0x5db700=>_0x5db700!==_0x2a24d8);else{if(_0x271286==='dead\x20actors')return $gameParty[_0x1e5227(0x724)]();else{if(_0x271286['match'](/ACTOR INDEX (\d+)/i)){const _0x219e89=Number(RegExp['$1']);return[$gameParty[_0x1e5227(0xa35)]()[_0x219e89]];}else{if(_0x271286[_0x1e5227(0x290)](/ACTOR ID (\d+)/i)){const _0x349727=Number(RegExp['$1']);return[$gameActors[_0x1e5227(0xb4d)](_0x349727)];}}}}}}if(_0x271286===_0x1e5227(0x92a))return $gameTroop[_0x1e5227(0x89d)]();else{if(_0x271286===_0x1e5227(0xb62))return $gameTroop['aliveMembers']()[_0x1e5227(0x55e)](_0xa21fcf=>_0xa21fcf!==_0x1c5159);else{if(_0x271286===_0x1e5227(0x11e))return $gameTroop[_0x1e5227(0x89d)]()[_0x1e5227(0x55e)](_0xbfdc5=>_0xbfdc5!==_0x2a24d8);else{if(_0x271286===_0x1e5227(0xb80))return $gameTroop[_0x1e5227(0x724)]();else{if(_0x271286['match'](/ENEMY INDEX (\d+)/i)){const _0xcf2610=Number(RegExp['$1']);return[$gameTroop[_0x1e5227(0xa35)]()[_0xcf2610]];}else{if(_0x271286[_0x1e5227(0x290)](/ENEMY ID (\d+)/i)){const _0x429144=Number(RegExp['$1']);return $gameTroop['aliveMembers']()['filter'](_0x2e91be=>_0x2e91be[_0x1e5227(0x2fe)]()===_0x429144);}}}}}}if(_0x271286==='alive\x20battlers')return _0x7d8542[_0x1e5227(0x55e)](_0x56072e=>_0x56072e[_0x1e5227(0x475)]());else{if(_0x271286==='alive\x20battlers\x20not\x20user')return _0x7d8542[_0x1e5227(0x55e)](_0x5c2a40=>_0x5c2a40[_0x1e5227(0x475)]()&&_0x5c2a40!==_0x1c5159);else{if(_0x271286==='alive\x20battlers\x20not\x20target')return _0x7d8542['filter'](_0x58a53c=>_0x58a53c[_0x1e5227(0x475)]()&&_0x58a53c!==_0x2a24d8);else{if(_0x271286==='dead\x20battlers')return _0x7d8542[_0x1e5227(0x55e)](_0x5d56b7=>_0x5d56b7['isDead']());}}}return[];},VisuMZ[_0x29c7b3(0x265)]=function(){const _0x4fdefa=_0x29c7b3;return BattleManager[_0x4fdefa(0x424)];},VisuMZ[_0x29c7b3(0x1a8)]=function(_0x52d96e){const _0x4aa999=_0x29c7b3;return BattleManager[_0x4aa999(0x424)];},PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x76a),_0x2aff06=>{const _0x255b2c=_0x29c7b3;if(!SceneManager[_0x255b2c(0x429)]())return;VisuMZ[_0x255b2c(0x4cc)](_0x2aff06,_0x2aff06);const _0x3ad64a=$gameTemp[_0x255b2c(0x180)](),_0xf5a07d=BattleManager[_0x255b2c(0x41e)],_0xfc0c97=BattleManager[_0x255b2c(0x215)],_0x36614f=BattleManager['_allTargets']?BattleManager[_0x255b2c(0x5e1)][_0x255b2c(0x14e)](0x0):[],_0x2c4e6a=BattleManager[_0x255b2c(0x70f)];if(!_0x3ad64a||!_0xf5a07d||!_0xfc0c97)return;if(!_0xf5a07d[_0x255b2c(0x7cc)]())return;if(_0x2aff06[_0x255b2c(0x4bf)])_0x2c4e6a['displayAction'](_0xfc0c97,_0xf5a07d[_0x255b2c(0x7cc)]());_0x2aff06[_0x255b2c(0x2a8)]&&_0x2c4e6a['push']('applyImmortal',_0xfc0c97,_0x36614f,!![]);if(_0x2aff06[_0x255b2c(0xb53)])_0x2c4e6a[_0x255b2c(0x13a)]('performActionStart',_0xfc0c97,_0xf5a07d);if(_0x2aff06[_0x255b2c(0x686)])_0x2c4e6a[_0x255b2c(0x13a)](_0x255b2c(0x2ae));if(_0x2aff06[_0x255b2c(0x844)])_0x2c4e6a[_0x255b2c(0x13a)](_0x255b2c(0x6d6),_0xfc0c97,_0xf5a07d);if(_0x2aff06[_0x255b2c(0x3fc)])_0x2c4e6a['push']('waitForAnimation');_0x3ad64a[_0x255b2c(0x493)](_0x255b2c(0x46d));}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xaac),_0x42b9e6=>{const _0x5353fb=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5353fb(0x4cc)](_0x42b9e6,_0x42b9e6);const _0x99fdd8=$gameTemp['getLastPluginCommandInterpreter'](),_0x2e71fa=BattleManager['_action'],_0x3c7bec=BattleManager[_0x5353fb(0x215)],_0x5bdc1d=BattleManager[_0x5353fb(0x5e1)]?BattleManager[_0x5353fb(0x5e1)][_0x5353fb(0x14e)](0x0):[],_0x2c41eb=BattleManager[_0x5353fb(0x70f)],_0x208103=_0x42b9e6['DualWield']??![];if(!_0x99fdd8||!_0x2e71fa||!_0x3c7bec)return;if(!_0x2e71fa[_0x5353fb(0x7cc)]())return;let _0x357b4e=_0x208103?_0x2c41eb[_0x5353fb(0x9e4)](_0x3c7bec):0x1;for(let _0x37a373=0x0;_0x37a373<_0x357b4e;_0x37a373++){_0x208103&&_0x3c7bec['isActor']()&&_0x2c41eb[_0x5353fb(0x13a)](_0x5353fb(0x306),_0x3c7bec,_0x37a373);if(_0x42b9e6[_0x5353fb(0xbe9)])_0x2c41eb[_0x5353fb(0x13a)](_0x5353fb(0x6bf),_0x3c7bec,_0x2e71fa);if(_0x42b9e6['WaitCount']>0x0)_0x2c41eb[_0x5353fb(0x13a)]('waitCount',_0x42b9e6[_0x5353fb(0x7a6)]);if(_0x42b9e6[_0x5353fb(0x155)])_0x2c41eb[_0x5353fb(0x13a)](_0x5353fb(0x4cb),_0x3c7bec,_0x5bdc1d,_0x2e71fa[_0x5353fb(0x7cc)]()[_0x5353fb(0x2d9)]);if(_0x42b9e6[_0x5353fb(0x3fc)])_0x2c41eb[_0x5353fb(0x13a)](_0x5353fb(0x59f));for(const _0x5b977b of _0x5bdc1d){if(!_0x5b977b)continue;if(_0x42b9e6['ActionEffect'])_0x2c41eb[_0x5353fb(0x13a)]('actionEffect',_0x3c7bec,_0x5b977b);}}_0x208103&&_0x3c7bec[_0x5353fb(0xa27)]()&&_0x2c41eb['push']('clearActiveWeaponSet',_0x3c7bec);if(_0x42b9e6['ApplyImmortal'])_0x2c41eb[_0x5353fb(0x13a)](_0x5353fb(0x901),_0x3c7bec,_0x5bdc1d,![]);_0x99fdd8[_0x5353fb(0x493)](_0x5353fb(0x46d));}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],'ActSeq_Set_TargetActionSet',_0x330c1a=>{const _0x4c3090=_0x29c7b3;if(!SceneManager[_0x4c3090(0x429)]())return;VisuMZ[_0x4c3090(0x4cc)](_0x330c1a,_0x330c1a);const _0x1044eb=$gameTemp[_0x4c3090(0x180)](),_0x2d995a=BattleManager['_action'],_0x5aae57=BattleManager[_0x4c3090(0x215)],_0xbd023d=BattleManager[_0x4c3090(0x5e1)]?BattleManager[_0x4c3090(0x5e1)][_0x4c3090(0x14e)](0x0):[],_0x18399b=BattleManager[_0x4c3090(0x70f)],_0x3d17f1=_0x330c1a[_0x4c3090(0x4a5)]??![];if(!_0x1044eb||!_0x2d995a||!_0x5aae57)return;if(!_0x2d995a['item']())return;let _0x3ca92e=_0x3d17f1?_0x18399b['getDualWieldTimes'](_0x5aae57):0x1;for(let _0x247fa6=0x0;_0x247fa6<_0x3ca92e;_0x247fa6++){for(const _0x20987f of _0xbd023d){if(!_0x20987f)continue;_0x3d17f1&&_0x5aae57['isActor']()&&_0x18399b['push'](_0x4c3090(0x306),_0x5aae57,_0x247fa6);if(_0x330c1a[_0x4c3090(0xbe9)])_0x18399b[_0x4c3090(0x13a)](_0x4c3090(0x6bf),_0x5aae57,_0x2d995a);if(_0x330c1a[_0x4c3090(0x836)]>0x0)_0x18399b[_0x4c3090(0x13a)](_0x4c3090(0x2d7),_0x330c1a[_0x4c3090(0x836)]);if(_0x330c1a['ActionAnimation'])_0x18399b[_0x4c3090(0x13a)](_0x4c3090(0x4cb),_0x5aae57,[_0x20987f],_0x2d995a[_0x4c3090(0x7cc)]()[_0x4c3090(0x2d9)]);if(_0x330c1a['WaitCount2']>0x0)_0x18399b[_0x4c3090(0x13a)](_0x4c3090(0x2d7),_0x330c1a[_0x4c3090(0x9bc)]);if(_0x330c1a[_0x4c3090(0x10c)])_0x18399b[_0x4c3090(0x13a)](_0x4c3090(0x83f),_0x5aae57,_0x20987f);}}_0x3d17f1&&_0x5aae57[_0x4c3090(0xa27)]()&&_0x18399b[_0x4c3090(0x13a)]('clearActiveWeaponSet',_0x5aae57);if(_0x330c1a[_0x4c3090(0x2a8)])_0x18399b[_0x4c3090(0x13a)](_0x4c3090(0x901),_0x5aae57,_0xbd023d,![]);_0x1044eb[_0x4c3090(0x493)](_0x4c3090(0x46d));}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xb27),_0x27344a=>{const _0x413458=_0x29c7b3;if(!SceneManager[_0x413458(0x429)]())return;VisuMZ[_0x413458(0x4cc)](_0x27344a,_0x27344a);const _0x174e66=$gameTemp[_0x413458(0x180)](),_0x3c974e=BattleManager[_0x413458(0x41e)],_0x3b000d=BattleManager[_0x413458(0x215)],_0x2bed55=BattleManager[_0x413458(0x5e1)]?BattleManager[_0x413458(0x5e1)][_0x413458(0x14e)](0x0):[],_0x4273cc=BattleManager[_0x413458(0x70f)];if(!_0x174e66||!_0x3c974e||!_0x3b000d)return;if(!_0x3c974e['item']())return;if(_0x27344a[_0x413458(0x2a8)])_0x4273cc[_0x413458(0x13a)](_0x413458(0x901),_0x3b000d,_0x2bed55,![]);if(_0x27344a[_0x413458(0x87d)])_0x4273cc[_0x413458(0x13a)]('waitForNewLine');if(_0x27344a[_0x413458(0x7f2)])_0x4273cc['push']('waitForEffect');if(_0x27344a[_0x413458(0x6d1)])_0x4273cc['push'](_0x413458(0x917));if(_0x27344a[_0x413458(0x4a4)])_0x4273cc[_0x413458(0x13a)]('performActionEnd',_0x3b000d);if(_0x27344a['WaitForMovement'])_0x4273cc[_0x413458(0x13a)](_0x413458(0x2ae));_0x174e66[_0x413458(0x493)]('battlelog');}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_ChangeAngle',_0x3a4117=>{const _0x33ca99=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x33ca99(0x92c)])return;VisuMZ[_0x33ca99(0x4cc)](_0x3a4117,_0x3a4117);const _0x42887d=$gameTemp[_0x33ca99(0x180)](),_0x929ce7=_0x3a4117[_0x33ca99(0x63f)];if(!_0x42887d)return;$gameScreen[_0x33ca99(0xa53)](_0x3a4117['Angle'],_0x3a4117['Duration'],_0x3a4117[_0x33ca99(0xac1)]);if(_0x929ce7)_0x42887d[_0x33ca99(0x493)](_0x33ca99(0x350));}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x877),_0x50cd47=>{const _0x3d0009=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x3d0009(0x4cc)](_0x50cd47,_0x50cd47);const _0x2bfa8b=$gameTemp['getLastPluginCommandInterpreter'](),_0x359db0=_0x50cd47['WaitForAngle'];if(!_0x2bfa8b)return;$gameScreen[_0x3d0009(0xa53)](0x0,_0x50cd47[_0x3d0009(0x21c)],_0x50cd47[_0x3d0009(0xac1)]);if(_0x359db0)_0x2bfa8b['setWaitMode'](_0x3d0009(0x350));}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x670),_0x31c1b1=>{const _0x59fc3a=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x59fc3a(0x92c)])return;const _0x3fc007=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3fc007)return;_0x3fc007[_0x59fc3a(0x493)](_0x59fc3a(0x350));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Animation_ActionAnimation',_0x164928=>{const _0x374f09=_0x29c7b3;if(!SceneManager[_0x374f09(0x429)]())return;VisuMZ[_0x374f09(0x4cc)](_0x164928,_0x164928);const _0x345505=$gameTemp['getLastPluginCommandInterpreter'](),_0x544ebe=BattleManager[_0x374f09(0x41e)],_0x406eb1=BattleManager[_0x374f09(0x215)],_0x194ca1=VisuMZ[_0x374f09(0x951)](_0x164928[_0x374f09(0x264)]),_0x51240e=_0x164928[_0x374f09(0xad3)],_0x143303=BattleManager[_0x374f09(0x70f)];if(!_0x345505||!_0x544ebe||!_0x406eb1)return;if(!_0x544ebe['item']())return;let _0x5a5f2d=_0x544ebe['item']()[_0x374f09(0x2d9)];if(_0x5a5f2d<0x0)_0x5a5f2d=_0x406eb1['attackAnimationId1']();$gameTemp['requestAnimation'](_0x194ca1,_0x5a5f2d,_0x51240e),_0x164928[_0x374f09(0x3fc)]&&_0x345505[_0x374f09(0x493)](_0x374f09(0x2be));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x423),_0x1b21d=>{const _0x1ac57e=_0x29c7b3;if(!SceneManager[_0x1ac57e(0x429)]())return;VisuMZ[_0x1ac57e(0x4cc)](_0x1b21d,_0x1b21d);const _0x188f24=$gameTemp[_0x1ac57e(0x180)](),_0x922dea=BattleManager[_0x1ac57e(0x215)],_0x4bb001=VisuMZ[_0x1ac57e(0x951)](_0x1b21d['Targets']),_0x33aca9=_0x1b21d[_0x1ac57e(0xad3)],_0x44046b=BattleManager[_0x1ac57e(0x70f)];if(!_0x188f24||!_0x922dea)return;const _0x244d98=_0x922dea[_0x1ac57e(0x916)]();$gameTemp[_0x1ac57e(0x2fa)](_0x4bb001,_0x244d98,_0x33aca9),_0x1b21d[_0x1ac57e(0x3fc)]&&_0x188f24[_0x1ac57e(0x493)](_0x1ac57e(0x2be));}),PluginManager['registerCommand'](pluginData['name'],_0x29c7b3(0x371),_0x5a08b3=>{const _0x3d0c7b=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3d0c7b(0x4cc)](_0x5a08b3,_0x5a08b3);const _0x4e5e96=_0x1d02c3['attackAnimationIdSlot'](_0x5a08b3['Slot']);if(_0x4e5e96<=0x0)return;const _0x4286e7=$gameTemp[_0x3d0c7b(0x180)](),_0x1d02c3=BattleManager[_0x3d0c7b(0x215)],_0x1f7561=VisuMZ[_0x3d0c7b(0x951)](_0x5a08b3['Targets']),_0x3fd296=_0x5a08b3[_0x3d0c7b(0xad3)],_0x4af426=BattleManager['_logWindow'];if(!_0x4286e7||!_0x1d02c3)return;$gameTemp[_0x3d0c7b(0x2fa)](_0x1f7561,_0x4e5e96,_0x3fd296),_0x5a08b3['WaitForAnimation']&&_0x4286e7[_0x3d0c7b(0x493)](_0x3d0c7b(0x2be));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x927),_0x24ac0e=>{const _0x21fd30=_0x29c7b3;if(!SceneManager[_0x21fd30(0x429)]())return;VisuMZ[_0x21fd30(0x4cc)](_0x24ac0e,_0x24ac0e);const _0x3fb988=$gameTemp[_0x21fd30(0x180)](),_0x2cf987=VisuMZ[_0x21fd30(0x951)](_0x24ac0e[_0x21fd30(0x264)]),_0x443a34=_0x24ac0e[_0x21fd30(0x372)];let _0x37e7a8=0x0;switch(_0x443a34['toUpperCase']()[_0x21fd30(0x89a)]()){case'!':case _0x21fd30(0x17a):_0x37e7a8=0x1;break;case'?':case _0x21fd30(0x623):_0x37e7a8=0x2;break;case _0x21fd30(0x509):case'NOTE':case'MUSIC\x20NOTE':case _0x21fd30(0x76b):case _0x21fd30(0x589):_0x37e7a8=0x3;break;case'HEART':case _0x21fd30(0x8d7):_0x37e7a8=0x4;break;case _0x21fd30(0x42c):case _0x21fd30(0x171):_0x37e7a8=0x5;break;case _0x21fd30(0x5c1):_0x37e7a8=0x6;break;case _0x21fd30(0x5c6):case _0x21fd30(0x15e):case'FRUSTRATION':_0x37e7a8=0x7;break;case _0x21fd30(0xad1):case _0x21fd30(0xbcc):_0x37e7a8=0x8;break;case _0x21fd30(0x9c9):case _0x21fd30(0x406):case _0x21fd30(0x22c):case _0x21fd30(0x1ed):case _0x21fd30(0x25d):_0x37e7a8=0x9;break;case'Z':case'ZZ':case _0x21fd30(0x8d8):case _0x21fd30(0x60b):_0x37e7a8=0xa;break;case _0x21fd30(0xa96):_0x37e7a8=0xb;break;case _0x21fd30(0x134):_0x37e7a8=0xc;break;case'USER-DEFINED\x203':_0x37e7a8=0xd;break;case _0x21fd30(0xbed):_0x37e7a8=0xe;break;case _0x21fd30(0x106):_0x37e7a8=0xf;break;}for(const _0x553dba of _0x2cf987){if(!_0x553dba)continue;$gameTemp['requestBattleBalloon'](_0x553dba,_0x37e7a8);}_0x24ac0e['WaitComplete']&&_0x3fb988&&(_0x3fb988['wait'](0x1),_0x3fb988[_0x21fd30(0x493)]('battleBalloon'));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Animation_BalloonIcon',_0x50d8f4=>{const _0x5a19df=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5a19df(0x482)])return;VisuMZ[_0x5a19df(0x4cc)](_0x50d8f4,_0x50d8f4);const _0x5d5554=$gameTemp[_0x5a19df(0x180)](),_0x3a476f=VisuMZ[_0x5a19df(0x951)](_0x50d8f4[_0x5a19df(0x264)]),_0x5afac9=_0x50d8f4[_0x5a19df(0x91a)];for(const _0x3b8362 of _0x3a476f){if(!_0x3b8362)continue;$gameTemp[_0x5a19df(0x834)](_0x3b8362,[_0x5afac9]);}_0x50d8f4[_0x5a19df(0x1b0)]&&_0x5d5554&&(_0x5d5554[_0x5a19df(0x60f)](0x1),_0x5d5554[_0x5a19df(0x493)](_0x5a19df(0x1b7)));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x59d),_0x2b57c6=>{const _0x983ac7=_0x29c7b3;if(!SceneManager[_0x983ac7(0x429)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ['ConvertParams'](_0x2b57c6,_0x2b57c6);const _0x1ab6ba=$gameTemp[_0x983ac7(0x180)](),_0xb0f61e=VisuMZ[_0x983ac7(0x951)](_0x2b57c6[_0x983ac7(0x264)]),_0x5915e0=Math[_0x983ac7(0xbce)](Number(_0x2b57c6[_0x983ac7(0x979)]||0x0),Number(_0x2b57c6['endIcon']||0x0)),_0x3d1a39=Math[_0x983ac7(0xbaf)](Number(_0x2b57c6['startIcon']||0x0),Number(_0x2b57c6[_0x983ac7(0x97e)]||0x0)),_0x1990e6=[];for(let _0xca7383=_0x5915e0;_0xca7383<=_0x3d1a39;_0xca7383++){_0x1990e6['push'](_0xca7383);}for(const _0x228c06 of _0xb0f61e){if(!_0x228c06)continue;$gameTemp['requestBattleBalloon'](_0x228c06,_0x1990e6);}_0x2b57c6[_0x983ac7(0x1b0)]&&_0x1ab6ba&&(_0x1ab6ba[_0x983ac7(0x60f)](0x1),_0x1ab6ba['setWaitMode']('battleBalloon'));}),PluginManager['registerCommand'](pluginData['name'],_0x29c7b3(0xc22),_0x24abbe=>{const _0x4bb31c=_0x29c7b3;if(!SceneManager[_0x4bb31c(0x429)]())return;if(!Imported[_0x4bb31c(0x482)])return;VisuMZ['ConvertParams'](_0x24abbe,_0x24abbe);const _0x268ac1=$gameTemp['getLastPluginCommandInterpreter'](),_0x59c36c=VisuMZ[_0x4bb31c(0x951)](_0x24abbe[_0x4bb31c(0x264)]),_0x4a8cc7=_0x24abbe[_0x4bb31c(0x441)];for(const _0x51629c of _0x59c36c){if(!_0x51629c)continue;$gameTemp[_0x4bb31c(0x834)](_0x51629c,_0x4a8cc7);}_0x24abbe['WaitComplete']&&_0x268ac1&&(_0x268ac1[_0x4bb31c(0x60f)](0x1),_0x268ac1[_0x4bb31c(0x493)](_0x4bb31c(0x1b7)));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x448),_0x3a977c=>{const _0x42f8ba=_0x29c7b3;if(!SceneManager[_0x42f8ba(0x429)]())return;VisuMZ['ConvertParams'](_0x3a977c,_0x3a977c);const _0x367019=$gameTemp[_0x42f8ba(0x180)](),_0x28e8f0=BattleManager[_0x42f8ba(0x41e)],_0x476e51=_0x3a977c[_0x42f8ba(0xad3)],_0x2a3102=VisuMZ[_0x42f8ba(0x951)](_0x3a977c[_0x42f8ba(0x264)]);if(!_0x367019||!_0x28e8f0)return;if(!_0x28e8f0[_0x42f8ba(0x7cc)]())return;for(const _0x5c81d0 of _0x2a3102){if(!_0x5c81d0)continue;_0x5c81d0[_0x42f8ba(0x6d6)](_0x28e8f0,_0x476e51);}if(_0x3a977c['WaitForAnimation'])_0x367019[_0x42f8ba(0x493)]('battleAnimation');}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x3f0),_0x2183cb=>{const _0x4b1170=_0x29c7b3;VisuMZ[_0x4b1170(0x4cc)](_0x2183cb,_0x2183cb);const _0x599884=$gameTemp['getLastPluginCommandInterpreter'](),_0x1949c9=VisuMZ['CreateActionSequenceTargets'](_0x2183cb[_0x4b1170(0x264)]),_0x1b29d1=_0x2183cb[_0x4b1170(0x610)];if(!_0x1b29d1)return;for(const _0x2b4c6c of _0x1949c9){if(!_0x2b4c6c)continue;if(!_0x2b4c6c[_0x4b1170(0xa27)]())continue;_0x2b4c6c['setBattlePortrait'](_0x1b29d1);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Animation_ChangeBattlePortrait_JS',_0x4e27a6=>{const _0x2a12c6=_0x29c7b3;VisuMZ[_0x2a12c6(0x4cc)](_0x4e27a6,_0x4e27a6);const _0x3dd755=_0x4e27a6[_0x2a12c6(0x599)](),_0x4da243=$gameActors[_0x2a12c6(0xb4d)](_0x3dd755)||null;if(!_0x4da243){console['log'](_0x2a12c6(0x11d));return;}const _0x2e7498=_0x4e27a6[_0x2a12c6(0x7da)]();_0x4da243[_0x2a12c6(0x940)](_0x2e7498);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x575),_0x25a2dd=>{const _0xd16fb2=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xd16fb2(0x4cc)](_0x25a2dd,_0x25a2dd);const _0x5644cc=$gameTemp['getLastPluginCommandInterpreter'](),_0x2251e9=BattleManager[_0xd16fb2(0x215)],_0x2eceb2=VisuMZ[_0xd16fb2(0x951)](_0x25a2dd[_0xd16fb2(0x264)]),_0x54d6bf=_0x25a2dd[_0xd16fb2(0xad3)];if(!_0x5644cc||!_0x2251e9)return;const _0x24bce3=$dataSkilles[_0x2251e9['guardSkillId']()],_0x1f5869=_0x24bce3[_0xd16fb2(0x2d9)];$gameTemp[_0xd16fb2(0x2fa)](_0x2eceb2,_0x1f5869,_0x54d6bf),_0x25a2dd[_0xd16fb2(0x3fc)]&&_0x5644cc[_0xd16fb2(0x493)](_0xd16fb2(0x2be));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x6d0),_0x5152d9=>{const _0x5c9828=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5c9828(0x4cc)](_0x5152d9,_0x5152d9);const _0x2e53a2=$gameTemp['getLastPluginCommandInterpreter'](),_0x1b0209=VisuMZ[_0x5c9828(0x951)](_0x5152d9['Targets']),_0x2721b7=Number(_0x5152d9[_0x5c9828(0x164)]||0x1),_0xe79f4e=$dataItems[_0x2721b7],_0xdde1b4=_0x5152d9[_0x5c9828(0xad3)];if(!_0x2e53a2)return;if(!_0xe79f4e)return;let _0x562734=_0xe79f4e[_0x5c9828(0x2d9)];$gameTemp[_0x5c9828(0x2fa)](_0x1b0209,_0x562734,_0xdde1b4),_0x5152d9[_0x5c9828(0x3fc)]&&_0x2e53a2[_0x5c9828(0x493)](_0x5c9828(0x2be));}),PluginManager['registerCommand'](pluginData['name'],_0x29c7b3(0xb87),_0x4a6c40=>{const _0x46a675=_0x29c7b3;if(!SceneManager[_0x46a675(0x364)])return;if(!SceneManager[_0x46a675(0x364)][_0x46a675(0x690)])return;if(!Imported[_0x46a675(0x50c)])return;VisuMZ[_0x46a675(0x4cc)](_0x4a6c40,_0x4a6c40);const _0x4aa68c=$gameTemp[_0x46a675(0x180)](),_0x34f655=Math['round'](_0x4a6c40['pointX']),_0x5b8124=Math['round'](_0x4a6c40['pointY']);$gameTemp['requestPointAnimation'](_0x34f655,_0x5b8124,_0x4a6c40[_0x46a675(0x6ca)],_0x4a6c40[_0x46a675(0xad3)],_0x4a6c40[_0x46a675(0x853)]),_0x4a6c40['WaitComplete']&&_0x4aa68c&&(SceneManager['_scene']['_spriteset'][_0x46a675(0x381)](),_0x4aa68c[_0x46a675(0x493)]('battleAnimation'));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xb48),_0x1816ff=>{const _0x3ed5fb=_0x29c7b3;if(!SceneManager[_0x3ed5fb(0x429)]())return;VisuMZ[_0x3ed5fb(0x4cc)](_0x1816ff,_0x1816ff);const _0x283ac2=$gameTemp[_0x3ed5fb(0x180)](),_0x1cabe2=VisuMZ['CreateActionSequenceTargets'](_0x1816ff[_0x3ed5fb(0x264)]),_0xb47681=_0x1816ff['AnimationID'],_0x57abb0=_0x1816ff[_0x3ed5fb(0xad3)];if(!_0x283ac2)return;$gameTemp[_0x3ed5fb(0x2fa)](_0x1cabe2,_0xb47681,_0x57abb0);if(_0x1816ff[_0x3ed5fb(0x3fc)])_0x283ac2['setWaitMode'](_0x3ed5fb(0x2be));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x8d9),_0x171d15=>{const _0x1027b4=_0x29c7b3;if(!SceneManager[_0x1027b4(0x429)]())return;VisuMZ[_0x1027b4(0x4cc)](_0x171d15,_0x171d15);const _0x3393da=$gameTemp[_0x1027b4(0x180)](),_0x346181=VisuMZ['CreateActionSequenceTargets'](_0x171d15[_0x1027b4(0x264)]),_0x5a478b=Number(_0x171d15['AnimationID'])||0x1,_0x25e601=_0x171d15['Mirror'];if(!_0x3393da)return;$gameTemp['requestAnimation'](_0x346181,_0x5a478b,_0x25e601);if(_0x171d15[_0x1027b4(0x3fc)])_0x3393da[_0x1027b4(0x493)]('battleAnimation');}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x968),_0x566836=>{const _0x5a2131=_0x29c7b3;if(!SceneManager[_0x5a2131(0x429)]())return;VisuMZ[_0x5a2131(0x4cc)](_0x566836,_0x566836);const _0x10ad82=$gameTemp[_0x5a2131(0x180)](),_0x5a1f06=VisuMZ[_0x5a2131(0x951)](_0x566836[_0x5a2131(0x264)]),_0x25255e=Number(_0x566836[_0x5a2131(0x90d)]||0x1),_0x136e5c=$dataSkills[_0x25255e],_0x240b26=_0x566836[_0x5a2131(0xad3)];if(!_0x10ad82)return;if(!_0x136e5c)return;let _0x37ba45=_0x136e5c[_0x5a2131(0x2d9)];$gameTemp['requestAnimation'](_0x5a1f06,_0x37ba45,_0x240b26),_0x566836[_0x5a2131(0x3fc)]&&_0x10ad82[_0x5a2131(0x493)](_0x5a2131(0x2be));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x93b),_0xedf52e=>{const _0x133798=_0x29c7b3;if(!SceneManager[_0x133798(0x429)]())return;const _0x52e4e2=$gameTemp[_0x133798(0x180)]();if(!_0x52e4e2)return;_0x52e4e2[_0x133798(0x493)](_0x133798(0x2be));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x10d),_0x17c235=>{const _0x402b8e=_0x29c7b3;if(!SceneManager[_0x402b8e(0x429)]())return;VisuMZ[_0x402b8e(0x4cc)](_0x17c235,_0x17c235);const _0x2faf46=BattleManager[_0x402b8e(0x70f)],_0x2973eb=_0x17c235['CopyCombatLog']&&Imported[_0x402b8e(0xa5d)];_0x2faf46[_0x402b8e(0x289)](_0x17c235[_0x402b8e(0x185)]),_0x2973eb&&Imported[_0x402b8e(0xa5d)]&&$gameSystem[_0x402b8e(0x5f1)](_0x17c235[_0x402b8e(0x185)]||'',_0x17c235[_0x402b8e(0x302)]||0x0);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],'ActSeq_BattleLog_Clear',_0x41d71b=>{const _0x5466e4=_0x29c7b3;if(!SceneManager[_0x5466e4(0x429)]())return;const _0x1341e7=BattleManager[_0x5466e4(0x70f)];_0x1341e7[_0x5466e4(0x917)]();}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x5ae),_0x555b14=>{const _0x48781b=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;const _0x371e27=$gameTemp[_0x48781b(0x180)](),_0x3be8a7=BattleManager[_0x48781b(0x41e)],_0x1df8c0=BattleManager['_subject'],_0x1739af=BattleManager[_0x48781b(0x70f)];if(!_0x371e27||!_0x3be8a7||!_0x1df8c0)return;if(!_0x3be8a7['item']())return;_0x1739af[_0x48781b(0x1be)](_0x1df8c0,_0x3be8a7['item']()),_0x371e27[_0x48781b(0x493)]('battlelog');}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x276),_0x2cf7dc=>{const _0xe54028=_0x29c7b3;if(!SceneManager[_0xe54028(0x429)]())return;const _0x38d34f=BattleManager[_0xe54028(0x70f)];_0x38d34f[_0xe54028(0x5fd)]();}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x397),_0x232761=>{const _0x423efc=_0x29c7b3;if(!SceneManager[_0x423efc(0x429)]())return;const _0x1d511b=BattleManager['_logWindow'];_0x1d511b[_0x423efc(0x85b)]();}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x768),_0x37aeed=>{const _0x421e40=_0x29c7b3;if(!SceneManager[_0x421e40(0x429)]())return;const _0x24e38e=BattleManager[_0x421e40(0x70f)];_0x24e38e[_0x421e40(0x842)]();}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],'ActSeq_BattleLog_UI',_0x425872=>{const _0x42bfd6=_0x29c7b3;if(!SceneManager[_0x42bfd6(0x429)]())return;VisuMZ['ConvertParams'](_0x425872,_0x425872),SceneManager['_scene'][_0x42bfd6(0x90f)](_0x425872[_0x42bfd6(0x8ad)]);}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x89c),_0x4aa907=>{const _0x4acf5d=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;const _0x4a8816=$gameTemp[_0x4acf5d(0x180)]();_0x4a8816[_0x4acf5d(0x493)]('battlelog');}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_BattleLog_WaitForNewLine',_0x5efc4e=>{const _0x79725e=_0x29c7b3;if(!SceneManager[_0x79725e(0x429)]())return;const _0x3df390=$gameTemp[_0x79725e(0x180)](),_0x4736bc=BattleManager[_0x79725e(0x70f)];_0x4736bc['waitForNewLine'](),_0x3df390[_0x79725e(0x493)](_0x79725e(0x46d));}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x104),_0x58953b=>{const _0x32452e=_0x29c7b3;if(!SceneManager[_0x32452e(0x429)]())return;if(!Imported[_0x32452e(0x92c)])return;VisuMZ[_0x32452e(0x4cc)](_0x58953b,_0x58953b);const _0x33b0db=$gameScreen[_0x32452e(0x2af)]();_0x33b0db[_0x32452e(0x73a)]=_0x58953b[_0x32452e(0x601)];}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0xb67),_0x3494d4=>{const _0x1c688d=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1c688d(0x92c)])return;VisuMZ[_0x1c688d(0x4cc)](_0x3494d4,_0x3494d4);const _0x562d21=$gameTemp[_0x1c688d(0x180)](),_0x50e806=_0x3494d4[_0x1c688d(0x663)];$gameScreen['setBattleCameraPoint'](_0x3494d4[_0x1c688d(0x5ef)],_0x3494d4[_0x1c688d(0x37d)],_0x3494d4['Duration'],_0x3494d4[_0x1c688d(0xac1)]);if(_0x50e806)_0x562d21[_0x1c688d(0x493)](_0x1c688d(0x1d1));}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x362),_0x47372b=>{const _0x4b6529=_0x29c7b3;if(!SceneManager[_0x4b6529(0x429)]())return;if(!Imported[_0x4b6529(0x92c)])return;VisuMZ[_0x4b6529(0x4cc)](_0x47372b,_0x47372b);const _0x499189=$gameTemp[_0x4b6529(0x180)](),_0x4ef271=VisuMZ['CreateActionSequenceTargets'](_0x47372b[_0x4b6529(0x264)]),_0x3bc888=_0x47372b[_0x4b6529(0x663)];$gameScreen['setBattleCameraTargets'](_0x4ef271,_0x47372b[_0x4b6529(0x21c)],_0x47372b[_0x4b6529(0xac1)]);if(_0x3bc888)_0x499189[_0x4b6529(0x493)](_0x4b6529(0x1d1));}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x7e9),_0x496017=>{const _0x5913c4=_0x29c7b3;if(!SceneManager[_0x5913c4(0x429)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x496017,_0x496017);const _0x2bfed3=$gameTemp[_0x5913c4(0x180)](),_0x537bb6=_0x496017[_0x5913c4(0x663)];$gameScreen['setBattleCameraOffset'](_0x496017[_0x5913c4(0x970)],_0x496017[_0x5913c4(0x921)],_0x496017[_0x5913c4(0x21c)],_0x496017[_0x5913c4(0xac1)]);if(_0x537bb6)_0x2bfed3[_0x5913c4(0x493)](_0x5913c4(0x1d1));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Camera_Reset',_0x306bb0=>{const _0x344e63=_0x29c7b3;if(!SceneManager[_0x344e63(0x429)]())return;if(!Imported[_0x344e63(0x92c)])return;VisuMZ[_0x344e63(0x4cc)](_0x306bb0,_0x306bb0);const _0x17b22c=$gameTemp[_0x344e63(0x180)](),_0x40a142=_0x306bb0[_0x344e63(0xa42)],_0x17d045=_0x306bb0['ResetOffset'],_0x5d7181=_0x306bb0[_0x344e63(0x663)];if(_0x40a142){const _0xd3cd19=Math[_0x344e63(0x50f)](Graphics[_0x344e63(0x580)]/0x2),_0x2e58e3=Math[_0x344e63(0x50f)](Graphics[_0x344e63(0x719)]/0x2);$gameScreen[_0x344e63(0x861)](_0xd3cd19,_0x2e58e3,_0x306bb0[_0x344e63(0x21c)],_0x306bb0[_0x344e63(0xac1)]);}_0x17d045&&$gameScreen[_0x344e63(0x9a3)](0x0,0x0,_0x306bb0[_0x344e63(0x21c)],_0x306bb0[_0x344e63(0xac1)]);if(_0x5d7181)_0x17b22c[_0x344e63(0x493)](_0x344e63(0x1d1));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x5a5),_0x1db744=>{const _0x48c671=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x571f85=$gameTemp[_0x48c671(0x180)]();if(!_0x571f85)return;_0x571f85[_0x48c671(0x493)]('battleCamera');}),VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x5eb)]=function(_0x5601f1){const _0x5de4b1=_0x29c7b3;_0x5601f1[_0x5de4b1(0x687)]='';const _0x33ec67=VisuMZ[_0x5de4b1(0x9ca)][_0x5de4b1(0x5eb)](_0x5601f1),_0x44688a=VisuMZ[_0x5de4b1(0x951)](_0x5601f1[_0x5de4b1(0x264)])[0x0]||null;return _0x44688a&&(_0x33ec67[_0x5de4b1(0x687)]=_0x44688a[_0x5de4b1(0x89b)](),_0x33ec67['portraitIndex']=_0x44688a['visualCutinPortraitIndex'](),_0x33ec67['portraitHue']=_0x44688a['visualCutinPortraitHue'](),_0x33ec67[_0x5de4b1(0x130)]=_0x44688a['visualCutinPortraitType'](),_0x44688a[_0x5de4b1(0xb3d)]()&&(_0x44688a[_0x5de4b1(0x833)]()&&(_0x33ec67[_0x5de4b1(0x920)]=!_0x33ec67['portraitFlipHorz']),_0x44688a[_0x5de4b1(0x367)]()&&(_0x33ec67[_0x5de4b1(0xada)]=!_0x33ec67['portraitFlipVert']),_0x33ec67[_0x5de4b1(0x130)]==='svActor'&&(_0x33ec67[_0x5de4b1(0x920)]=!_0x33ec67[_0x5de4b1(0x920)]),_0x5601f1[_0x5de4b1(0x629)][_0x5de4b1(0x67c)]&&(_0x33ec67[_0x5de4b1(0x609)]*=-0x1),_0x5601f1['ExtraSettings']['parallaxScrollYinvertEnemy']&&(_0x33ec67[_0x5de4b1(0x363)]*=-0x1),_0x33ec67['parallaxHue']+=_0x5601f1[_0x5de4b1(0x629)][_0x5de4b1(0x8bf)]??0x0)),_0x33ec67;},PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Cutin_AddVisualCutinEffect',_0x44d15b=>{const _0x3e80ef=_0x29c7b3;if(!SceneManager[_0x3e80ef(0x429)]())return;if(!Imported[_0x3e80ef(0x7ae)])return;VisuMZ[_0x3e80ef(0x4cc)](_0x44d15b,_0x44d15b);const _0x178d12=VisuMZ['BattleCore'][_0x3e80ef(0x5eb)](_0x44d15b);SceneManager[_0x3e80ef(0x364)][_0x3e80ef(0x9fa)](_0x178d12);const _0x59d3fc=$gameTemp[_0x3e80ef(0x180)]();_0x59d3fc&&_0x44d15b[_0x3e80ef(0xa66)]&&_0x59d3fc[_0x3e80ef(0x493)]('cutinEnter');}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Cutin_EndVisualCutinEffectAll',_0x49a8ee=>{const _0x40084d=_0x29c7b3;if(!SceneManager[_0x40084d(0x429)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x40084d(0x4cc)](_0x49a8ee,_0x49a8ee),SceneManager[_0x40084d(0x364)][_0x40084d(0x809)]();const _0x341be0=$gameTemp['getLastPluginCommandInterpreter']();_0x341be0&&_0x49a8ee[_0x40084d(0x6a1)]&&_0x341be0[_0x40084d(0x493)](_0x40084d(0x28d));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xaed),_0x337a0d=>{const _0x26be6d=_0x29c7b3;if(!SceneManager[_0x26be6d(0x429)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x26be6d(0x4cc)](_0x337a0d,_0x337a0d);const _0x3dc639=_0x337a0d[_0x26be6d(0x65f)][_0x26be6d(0x6fd)]()[_0x26be6d(0x89a)]();SceneManager['_scene'][_0x26be6d(0x32d)](_0x3dc639);const _0x3ce77d=$gameTemp['getLastPluginCommandInterpreter']();_0x3ce77d&&_0x337a0d[_0x26be6d(0x6a1)]&&_0x3ce77d[_0x26be6d(0x493)](_0x26be6d(0x28d));}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],'ActSeq_Cutin_WaitForEntrance',_0x81cb95=>{const _0x36ef92=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x36ef92(0x7ae)])return;const _0x2b73ec=$gameTemp[_0x36ef92(0x180)]();_0x2b73ec['setWaitMode']('cutinEnter');}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x8d5),_0x3e0adc=>{const _0x1fcd04=_0x29c7b3;if(!SceneManager[_0x1fcd04(0x429)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x2057dd=$gameTemp['getLastPluginCommandInterpreter']();_0x2057dd[_0x1fcd04(0x493)](_0x1fcd04(0x28d));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_DB_DragonbonesMotionAni',_0x56d7b8=>{const _0xce4a1f=_0x29c7b3;if(!SceneManager[_0xce4a1f(0x429)]())return;if(!Imported[_0xce4a1f(0xb66)])return;VisuMZ[_0xce4a1f(0x4cc)](_0x56d7b8,_0x56d7b8);const _0x45afe1=VisuMZ[_0xce4a1f(0x951)](_0x56d7b8[_0xce4a1f(0x264)]),_0x5f41f5=_0x56d7b8['MotionAni'][_0xce4a1f(0x6fd)]()[_0xce4a1f(0x89a)]();for(const _0x2322ae of _0x45afe1){if(!_0x2322ae)continue;_0x2322ae[_0xce4a1f(0x52c)](_0x5f41f5);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xb19),_0x1fe181=>{const _0x407c0d=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x407c0d(0xb66)])return;VisuMZ[_0x407c0d(0x4cc)](_0x1fe181,_0x1fe181);const _0x4c5166=VisuMZ['CreateActionSequenceTargets'](_0x1fe181[_0x407c0d(0x264)]),_0x4c2aa4=_0x1fe181[_0x407c0d(0xbba)];for(const _0x5bdbfb of _0x4c5166){if(!_0x5bdbfb)continue;_0x5bdbfb[_0x407c0d(0x6e7)]()[_0x407c0d(0x870)]=_0x4c2aa4;}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Element_AddElements',_0x3737ff=>{const _0x5ccfc1=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5ccfc1(0x26b)])return;VisuMZ[_0x5ccfc1(0x4cc)](_0x3737ff,_0x3737ff);const _0x4a990d=BattleManager[_0x5ccfc1(0x41e)],_0x56cdab=_0x3737ff[_0x5ccfc1(0x87a)];if(!_0x4a990d)return;_0x4a990d[_0x5ccfc1(0x422)]=_0x56cdab;}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x2e4),_0xd674b=>{const _0x19aa23=_0x29c7b3;if(!SceneManager[_0x19aa23(0x429)]())return;if(!Imported[_0x19aa23(0x26b)])return;const _0x17261a=BattleManager[_0x19aa23(0x41e)];if(!_0x17261a)return;_0x17261a['clearElementChanges']();}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Element_ForceElements',_0x370de2=>{const _0x11e917=_0x29c7b3;if(!SceneManager[_0x11e917(0x429)]())return;if(!Imported[_0x11e917(0x26b)])return;VisuMZ[_0x11e917(0x4cc)](_0x370de2,_0x370de2);const _0x1c270a=BattleManager[_0x11e917(0x41e)],_0x26d7bf=_0x370de2['Elements'];if(!_0x1c270a)return;_0x1c270a['_battleCoreForcedElements']=_0x26d7bf;}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xa92),_0x618ee8=>{const _0x2a979c=_0x29c7b3;if(!SceneManager[_0x2a979c(0x429)]())return;if(!Imported[_0x2a979c(0x26b)])return;const _0xbdec7a=BattleManager[_0x2a979c(0x41e)];if(!_0xbdec7a)return;_0xbdec7a[_0x2a979c(0x5a4)]=!![];}),PluginManager['registerCommand'](pluginData['name'],_0x29c7b3(0x84d),_0x244141=>{const _0x40e83a=_0x29c7b3;VisuMZ['BattleGridSystem'][_0x40e83a(0x84d)](_0x244141);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x8dd),_0x2113e0=>{const _0x1936d5=_0x29c7b3;VisuMZ[_0x1936d5(0x6b1)]['ActSeq_Grid_AddPassiveStatesToNode'](_0x2113e0);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0xa41),_0x3df94a=>{const _0x5447cf=_0x29c7b3;VisuMZ['BattleGridSystem'][_0x5447cf(0xa41)](_0x3df94a);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],'ActSeq_Grid_AddTriggerToNodeJS',_0xacd986=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_AddTriggerToNode'](_0xacd986);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x8af),_0xa800fb=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_AnimationIDAtNode'](_0xa800fb);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x549),_0x5d3e7b=>{const _0xd091e1=_0x29c7b3;VisuMZ['BattleGridSystem'][_0xd091e1(0x549)](_0x5d3e7b);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x66e),_0x863b60=>{const _0x1e781d=_0x29c7b3;VisuMZ[_0x1e781d(0x6b1)][_0x1e781d(0x66e)](_0x863b60);}),PluginManager['registerCommand'](pluginData['name'],_0x29c7b3(0x19d),_0x1ca3d3=>{const _0x265376=_0x29c7b3;VisuMZ[_0x265376(0x6b1)][_0x265376(0x19d)](_0x1ca3d3);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Grid_MoveTargetsInDirection',_0x3a9912=>{const _0x23a568=_0x29c7b3;VisuMZ[_0x23a568(0x6b1)][_0x23a568(0x9c3)](_0x3a9912);}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x3c2),_0x57c065=>{const _0x112706=_0x29c7b3;VisuMZ['BattleGridSystem'][_0x112706(0x3c2)](_0x57c065);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],'ActSeq_Grid_PushFromTargetNode',_0x2689a9=>{const _0x132276=_0x29c7b3;VisuMZ['BattleGridSystem'][_0x132276(0xbf9)](_0x2689a9);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Grid_RemovePassiveStatesFromNode',_0x2f4fbc=>{const _0x4b068b=_0x29c7b3;VisuMZ[_0x4b068b(0x6b1)]['ActSeq_Grid_RemovePassiveStatesFromNode'](_0x2f4fbc);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0xadc),_0x2a6fbc=>{const _0x564dc8=_0x29c7b3;VisuMZ[_0x564dc8(0x6b1)][_0x564dc8(0xadc)](_0x2a6fbc);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0xb7c),_0x54b000=>{const _0x56e410=_0x29c7b3;VisuMZ[_0x56e410(0x6b1)][_0x56e410(0xb7c)](_0x54b000);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x3d8),_0x394af3=>{const _0x37829b=_0x29c7b3;VisuMZ[_0x37829b(0x6b1)][_0x37829b(0x3d8)](_0x394af3);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x45d),_0x3c4297=>{const _0x56c8e1=_0x29c7b3;if(!Imported[_0x56c8e1(0xb35)])return;if(!SceneManager[_0x56c8e1(0x429)]())return;VisuMZ[_0x56c8e1(0x4cc)](_0x3c4297,_0x3c4297);const _0x109bf0=VisuMZ['CreateActionSequenceTargets'](_0x3c4297[_0x56c8e1(0x264)]);for(const _0x51f5a5 of _0x109bf0){if(!_0x51f5a5)continue;_0x51f5a5[_0x56c8e1(0x581)](_0x56c8e1(0x714)),_0x51f5a5[_0x56c8e1(0x581)](_0x56c8e1(0x342)),_0x51f5a5[_0x56c8e1(0x581)]('tv'),_0x51f5a5[_0x56c8e1(0xbca)]();}$gamePlayer[_0x56c8e1(0x842)]();}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xb16),_0x5aad38=>{const _0x3f2e8e=_0x29c7b3;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3f2e8e(0x4cc)](_0x5aad38,_0x5aad38);const _0x4fc750=VisuMZ[_0x3f2e8e(0x951)](_0x5aad38[_0x3f2e8e(0x264)]),_0x2259ba=_0x3f2e8e(0x342);_0x5aad38[_0x3f2e8e(0x211)]=Math[_0x3f2e8e(0xc1a)](_0x5aad38['slices']/0x2),_0x5aad38[_0x3f2e8e(0x5a9)]=_0x5aad38[_0x3f2e8e(0xa2d)],_0x5aad38[_0x3f2e8e(0x16a)]=!![];for(const _0xd6511b of _0x4fc750){if(!_0xd6511b)continue;_0xd6511b[_0x3f2e8e(0x148)](_0x2259ba,_0x5aad38);}$gamePlayer[_0x3f2e8e(0x842)]();}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x4f1),_0x2faab0=>{const _0x4bcb1c=_0x29c7b3;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x4bcb1c(0x429)]())return;VisuMZ[_0x4bcb1c(0x4cc)](_0x2faab0,_0x2faab0);const _0x2d8aa8=VisuMZ[_0x4bcb1c(0x951)](_0x2faab0[_0x4bcb1c(0x264)]);for(const _0x18c25 of _0x2d8aa8){if(!_0x18c25)continue;_0x18c25[_0x4bcb1c(0x581)](_0x4bcb1c(0x342));}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xb05),_0x4f1876=>{const _0x3c3533=_0x29c7b3;if(!Imported[_0x3c3533(0xb35)])return;if(!SceneManager[_0x3c3533(0x429)]())return;VisuMZ['ConvertParams'](_0x4f1876,_0x4f1876);const _0x4d92ba=VisuMZ[_0x3c3533(0x951)](_0x4f1876[_0x3c3533(0x264)]),_0x567336='noise';for(const _0x2e301d of _0x4d92ba){if(!_0x2e301d)continue;_0x2e301d[_0x3c3533(0x148)](_0x567336,_0x4f1876);}$gamePlayer['refresh']();}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x2a9),_0xc1bb2c=>{const _0x39f8d7=_0x29c7b3;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x39f8d7(0x429)]())return;VisuMZ[_0x39f8d7(0x4cc)](_0xc1bb2c,_0xc1bb2c);const _0x4f82b8=VisuMZ['CreateActionSequenceTargets'](_0xc1bb2c[_0x39f8d7(0x264)]);for(const _0x877e3f of _0x4f82b8){if(!_0x877e3f)continue;_0x877e3f['removeHorrorEffect']('noise');}$gamePlayer[_0x39f8d7(0x842)]();}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x9bb),_0x36c174=>{const _0x3050fa=_0x29c7b3;if(!Imported[_0x3050fa(0xb35)])return;if(!SceneManager[_0x3050fa(0x429)]())return;VisuMZ['ConvertParams'](_0x36c174,_0x36c174);const _0x303dc5=VisuMZ[_0x3050fa(0x951)](_0x36c174[_0x3050fa(0x264)]),_0x1bad8a='tv';for(const _0x2c82dc of _0x303dc5){if(!_0x2c82dc)continue;_0x2c82dc['setHorrorEffectSettings'](_0x1bad8a,_0x36c174);}$gamePlayer[_0x3050fa(0x842)]();}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],'ActSeq_Horror_TVRemove',_0x39b6ec=>{const _0x2cd43b=_0x29c7b3;if(!Imported[_0x2cd43b(0xb35)])return;if(!SceneManager[_0x2cd43b(0x429)]())return;VisuMZ[_0x2cd43b(0x4cc)](_0x39b6ec,_0x39b6ec);const _0x581557=VisuMZ[_0x2cd43b(0x951)](_0x39b6ec['Targets']);for(const _0x4f4f78 of _0x581557){if(!_0x4f4f78)continue;_0x4f4f78[_0x2cd43b(0x581)]('tv');}$gamePlayer[_0x2cd43b(0x842)]();}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x64a),_0x5bffdb=>{const _0x24e3e2=_0x29c7b3;if(!Imported[_0x24e3e2(0x992)])return;const _0x2b29d5=SceneManager[_0x24e3e2(0x364)]['_spriteset'];if(!_0x2b29d5)return;if(VisuMZ[_0x24e3e2(0x2b5)][_0x24e3e2(0x65e)]<=1.04){alert(_0x24e3e2(0x783)),SceneManager['exit']();return;}VisuMZ[_0x24e3e2(0x4cc)](_0x5bffdb,_0x5bffdb);const _0x42f26f=_0x5bffdb[_0x24e3e2(0x8c6)];_0x2b29d5[_0x24e3e2(0xbc5)](_0x42f26f);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x6b9),_0x44b607=>{const _0x112d77=_0x29c7b3;if(!SceneManager[_0x112d77(0x429)]())return;if(!Imported[_0x112d77(0x992)])return;const _0x2f1f12=SceneManager['_scene'][_0x112d77(0x690)];if(!_0x2f1f12)return;VisuMZ[_0x112d77(0x4cc)](_0x44b607,_0x44b607);const _0x1e1d1b=_0x44b607[_0x112d77(0x3c3)]||0x1,_0x109676=_0x44b607[_0x112d77(0x21c)]||0x1,_0x25800d=_0x44b607[_0x112d77(0xac1)]||_0x112d77(0x2da);_0x2f1f12['setupRgbSplitImpactFilter'](_0x1e1d1b,_0x109676,_0x25800d);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x435),_0x49f4ba=>{const _0x2c87ca=_0x29c7b3;if(!Imported[_0x2c87ca(0x992)])return;const _0x244de4=SceneManager[_0x2c87ca(0x364)][_0x2c87ca(0x690)];if(!_0x244de4)return;if(VisuMZ[_0x2c87ca(0x2b5)][_0x2c87ca(0x65e)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x2c87ca(0x99d)]();return;}VisuMZ['ConvertParams'](_0x49f4ba,_0x49f4ba);const _0x505357=_0x49f4ba[_0x2c87ca(0x8c6)];_0x244de4[_0x2c87ca(0x427)](_0x505357);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x485),_0x9fb7b7=>{const _0x169cd0=_0x29c7b3;if(!SceneManager[_0x169cd0(0x429)]())return;if(!Imported[_0x169cd0(0x992)])return;const _0x279b71=SceneManager[_0x169cd0(0x364)][_0x169cd0(0x690)];if(!_0x279b71)return;VisuMZ[_0x169cd0(0x4cc)](_0x9fb7b7,_0x9fb7b7);const _0x466259=Number(_0x9fb7b7['Angle'])||0x0,_0x1eee51=Number(_0x9fb7b7['Rate']),_0x3ffa84=_0x9fb7b7['Duration']||0x1,_0x5abb2d=_0x9fb7b7[_0x169cd0(0xac1)]||_0x169cd0(0x2da);_0x279b71[_0x169cd0(0xb0b)](_0x466259,_0x1eee51,_0x3ffa84,_0x5abb2d);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x7fd),_0x255be9=>{const _0x511444=_0x29c7b3;if(!SceneManager[_0x511444(0x429)]())return;if(!Imported[_0x511444(0x992)])return;const _0x258159=SceneManager[_0x511444(0x364)]['_spriteset'];if(!_0x258159)return;VisuMZ[_0x511444(0x4cc)](_0x255be9,_0x255be9);const _0x3d1bbb=Number(_0x255be9['Angle'])||0x0,_0x400991=Number(_0x255be9['Rate']),_0x25e82e=_0x255be9[_0x511444(0x21c)]||0x1,_0x5cf273=_0x255be9[_0x511444(0xac1)]||'Linear',_0x3ea370=VisuMZ[_0x511444(0x951)](_0x255be9[_0x511444(0x264)]);for(const _0x5b2de8 of _0x3ea370){if(!_0x5b2de8)continue;if(!_0x5b2de8['battler']())continue;_0x5b2de8[_0x511444(0xa65)]()[_0x511444(0xb0b)](_0x3d1bbb,_0x400991,_0x25e82e,_0x5cf273);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Impact_MotionTrailCreate',_0x21df98=>{const _0x13b774=_0x29c7b3;if(!SceneManager[_0x13b774(0x429)]())return;if(!Imported[_0x13b774(0x992)])return;VisuMZ[_0x13b774(0x4cc)](_0x21df98,_0x21df98);const _0x21690c={'delay':_0x21df98['delay'],'duration':_0x21df98[_0x13b774(0x8a2)],'hue':_0x21df98[_0x13b774(0x395)],'opacityStart':_0x21df98[_0x13b774(0x4a1)],'tone':_0x21df98[_0x13b774(0x2f5)],'visible':!![]},_0x1a6db8=VisuMZ['CreateActionSequenceTargets'](_0x21df98[_0x13b774(0x264)]);for(const _0x2c3cab of _0x1a6db8){if(!_0x2c3cab)continue;_0x2c3cab[_0x13b774(0x3dd)](_0x21690c);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x652),_0x59433a=>{const _0x41f124=_0x29c7b3;if(!SceneManager[_0x41f124(0x429)]())return;if(!Imported[_0x41f124(0x992)])return;VisuMZ['ConvertParams'](_0x59433a,_0x59433a);const _0x21e10b=VisuMZ[_0x41f124(0x951)](_0x59433a[_0x41f124(0x264)]);for(const _0x2f564d of _0x21e10b){if(!_0x2f564d)continue;_0x2f564d[_0x41f124(0xad5)]();}}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],'ActSeq_Impact_Negative',_0xd4f4e5=>{const _0x450b13=_0x29c7b3;if(!Imported[_0x450b13(0x992)])return;const _0x1723e1=SceneManager['_scene'][_0x450b13(0x690)];if(!_0x1723e1)return;if(VisuMZ['ActSeqImpact'][_0x450b13(0x65e)]<=1.04){alert(_0x450b13(0x783)),SceneManager[_0x450b13(0x99d)]();return;}VisuMZ[_0x450b13(0x4cc)](_0xd4f4e5,_0xd4f4e5);const _0x131cc2=_0xd4f4e5[_0x450b13(0x8c6)];_0x1723e1[_0x450b13(0x26e)](_0x131cc2);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x1bd),_0x21a2b1=>{const _0x2f6807=_0x29c7b3;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x32701e=SceneManager[_0x2f6807(0x364)][_0x2f6807(0x690)];if(!_0x32701e)return;if(VisuMZ[_0x2f6807(0x2b5)][_0x2f6807(0x65e)]<=1.04){alert(_0x2f6807(0x783)),SceneManager[_0x2f6807(0x99d)]();return;}VisuMZ[_0x2f6807(0x4cc)](_0x21a2b1,_0x21a2b1);const _0x3523d3=_0x21a2b1[_0x2f6807(0x8c6)];_0x32701e[_0x2f6807(0xb3c)](_0x3523d3);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x540),_0x5078f2=>{const _0x472296=_0x29c7b3;if(!Imported[_0x472296(0x992)])return;const _0x50047c=SceneManager['_scene']['_spriteset'];if(!_0x50047c)return;VisuMZ[_0x472296(0x4cc)](_0x5078f2,_0x5078f2);const _0x16523a=_0x5078f2['X']||0x0,_0x8c7426=_0x5078f2['Y']||0x0,_0xe57e99=_0x5078f2[_0x472296(0x4dc)]||0x0,_0x579e32=_0x5078f2[_0x472296(0x38e)]||0x0,_0x271a08=_0x5078f2['Duration']||0x1;_0x50047c[_0x472296(0x7d4)](_0x16523a,_0x8c7426,_0xe57e99,_0x579e32,_0x271a08);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Impact_ShockwaveEachTargets',_0xd6212c=>{const _0xb24817=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xb24817(0x992)])return;const _0x4b03e2=SceneManager[_0xb24817(0x364)][_0xb24817(0x690)];if(!_0x4b03e2)return;VisuMZ[_0xb24817(0x4cc)](_0xd6212c,_0xd6212c);const _0xbf4b39=VisuMZ[_0xb24817(0x951)](_0xd6212c[_0xb24817(0x264)]),_0x1420c1=_0xd6212c[_0xb24817(0x465)],_0x4801ff=_0xd6212c['OffsetX']||0x0,_0x125f8d=_0xd6212c[_0xb24817(0x921)]||0x0,_0x34687c=_0xd6212c['Amp']||0x0,_0x469695=_0xd6212c[_0xb24817(0x38e)]||0x0,_0x3b39b3=_0xd6212c['Duration']||0x1;for(const _0x59ac26 of _0xbf4b39){if(!_0x59ac26)continue;if(!_0x59ac26[_0xb24817(0xa65)]())continue;const _0x304a03=_0x59ac26['battler']();let _0xd76577=_0x304a03['_baseX'],_0x34fa28=_0x304a03['_baseY'];_0xd76577+=(Graphics[_0xb24817(0x580)]-Graphics[_0xb24817(0xc0c)])/0x2,_0x34fa28+=(Graphics['height']-Graphics['boxHeight'])/0x2;if(_0x1420c1[_0xb24817(0x290)](/front/i))_0xd76577+=(_0x59ac26[_0xb24817(0xb3d)]()?0x1:-0x1)*_0x304a03['mainSpriteWidth']()/0x2;else _0x1420c1[_0xb24817(0x290)](/back/i)&&(_0xd76577+=(_0x59ac26[_0xb24817(0xb3d)]()?-0x1:0x1)*_0x304a03[_0xb24817(0xa7b)]()/0x2);if(_0x1420c1[_0xb24817(0x290)](/head/i))_0x34fa28-=_0x304a03[_0xb24817(0xc2e)]();else _0x1420c1[_0xb24817(0x290)](/center/i)&&(_0x34fa28-=_0x304a03[_0xb24817(0xc2e)]()/0x2);_0xd76577+=_0x4801ff,_0x34fa28+=_0x125f8d,_0x4b03e2[_0xb24817(0x7d4)](_0xd76577,_0x34fa28,_0x34687c,_0x469695,_0x3b39b3);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x688),_0x3f4ddd=>{const _0x180b82=_0x29c7b3;if(!SceneManager[_0x180b82(0x429)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1ff879=SceneManager[_0x180b82(0x364)][_0x180b82(0x690)];if(!_0x1ff879)return;VisuMZ[_0x180b82(0x4cc)](_0x3f4ddd,_0x3f4ddd);const _0x317c13=VisuMZ['CreateActionSequenceTargets'](_0x3f4ddd[_0x180b82(0x264)]),_0x1369a1=_0x3f4ddd[_0x180b82(0x465)],_0x488319=_0x3f4ddd[_0x180b82(0x970)]||0x0,_0x18d8e4=_0x3f4ddd[_0x180b82(0x921)]||0x0,_0x37c9a7=_0x3f4ddd[_0x180b82(0x4dc)]||0x0,_0x1c0e98=_0x3f4ddd[_0x180b82(0x38e)]||0x0,_0x51e0a3=_0x3f4ddd[_0x180b82(0x21c)]||0x1,_0x90a96=Math['min'](..._0x317c13[_0x180b82(0x8ea)](_0x433d5c=>_0x433d5c[_0x180b82(0xa65)]()[_0x180b82(0xa3a)]-_0x433d5c[_0x180b82(0xa65)]()[_0x180b82(0xa7b)]()/0x2)),_0x39d276=Math[_0x180b82(0xbaf)](..._0x317c13['map'](_0x57e736=>_0x57e736['battler']()[_0x180b82(0xa3a)]+_0x57e736[_0x180b82(0xa65)]()['mainSpriteWidth']()/0x2)),_0x2aa9e5=Math['min'](..._0x317c13[_0x180b82(0x8ea)](_0x3d1d92=>_0x3d1d92[_0x180b82(0xa65)]()['_baseY']-_0x3d1d92['battler']()[_0x180b82(0xc2e)]())),_0x2c8f89=Math[_0x180b82(0xbaf)](..._0x317c13[_0x180b82(0x8ea)](_0x31c3e6=>_0x31c3e6[_0x180b82(0xa65)]()['_baseY'])),_0x4d2d5c=_0x317c13[_0x180b82(0x55e)](_0x110dfb=>_0x110dfb['isActor']())['length'],_0x4db1e7=_0x317c13[_0x180b82(0x55e)](_0x2c2948=>_0x2c2948[_0x180b82(0xb3d)]())['length'];let _0x37ac4d=0x0,_0xc249d9=0x0;if(_0x1369a1['match'](/front/i))_0x37ac4d=_0x4d2d5c>=_0x4db1e7?_0x90a96:_0x39d276;else{if(_0x1369a1[_0x180b82(0x290)](/middle/i))_0x37ac4d=(_0x90a96+_0x39d276)/0x2,melee=-0x1;else _0x1369a1[_0x180b82(0x290)](/back/i)&&(_0x37ac4d=_0x4d2d5c>=_0x4db1e7?_0x39d276:_0x90a96);}if(_0x1369a1[_0x180b82(0x290)](/head/i))_0xc249d9=_0x2aa9e5;else{if(_0x1369a1[_0x180b82(0x290)](/center/i))_0xc249d9=(_0x2aa9e5+_0x2c8f89)/0x2;else _0x1369a1['match'](/base/i)&&(_0xc249d9=_0x2c8f89);}_0x37ac4d+=(Graphics[_0x180b82(0x580)]-Graphics[_0x180b82(0xc0c)])/0x2,_0xc249d9+=(Graphics['height']-Graphics[_0x180b82(0x132)])/0x2,_0x37ac4d+=_0x488319,_0xc249d9+=_0x18d8e4,_0x1ff879[_0x180b82(0x7d4)](_0x37ac4d,_0xc249d9,_0x37c9a7,_0x1c0e98,_0x51e0a3);}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x7a8),_0x203514=>{const _0x268602=_0x29c7b3;if(!Imported[_0x268602(0x992)])return;const _0xa8be7f=SceneManager[_0x268602(0x364)][_0x268602(0x690)];if(!_0xa8be7f)return;if(VisuMZ[_0x268602(0x2b5)][_0x268602(0x65e)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x268602(0x99d)]();return;}VisuMZ[_0x268602(0x4cc)](_0x203514,_0x203514);const _0x5c683f=$gameTemp[_0x268602(0x180)](),_0x1bbf89=Math['max'](0.01,_0x203514[_0x268602(0xba8)]);$gameTemp[_0x268602(0xb64)](_0x1bbf89,_0x5c683f);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x79f),_0x5e1967=>{const _0x3528f4=_0x29c7b3;if(!Imported[_0x3528f4(0x992)])return;const _0x28d79b=SceneManager['_scene'][_0x3528f4(0x690)];if(!_0x28d79b)return;if(VisuMZ['ActSeqImpact'][_0x3528f4(0x65e)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x3528f4(0x99d)]();return;}VisuMZ[_0x3528f4(0x4cc)](_0x5e1967,_0x5e1967);const _0x4a0298=$gameTemp['getLastPluginCommandInterpreter'](),_0x431016=_0x5e1967['ms']||0x1;VisuMZ['ActSeqImpact']['freezeTime'](_0x431016,_0x4a0298);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xa30),_0x23a50a=>{const _0x2113e8=_0x29c7b3;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x463396=SceneManager[_0x2113e8(0x364)][_0x2113e8(0x690)];if(!_0x463396)return;VisuMZ[_0x2113e8(0x4cc)](_0x23a50a,_0x23a50a);const _0x53b473=_0x23a50a['X']||0x0,_0x3ada42=_0x23a50a['Y']||0x0,_0x4faf9f=_0x23a50a[_0x2113e8(0x819)]||0x0,_0x51384b=_0x23a50a[_0x2113e8(0x263)]||0x0,_0x105664=_0x23a50a[_0x2113e8(0x21c)]||0x1,_0x3d28b0=_0x23a50a['EasingType']||_0x2113e8(0x2da);_0x463396[_0x2113e8(0x8e3)](_0x4faf9f,_0x53b473,_0x3ada42,_0x51384b,_0x105664,_0x3d28b0);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Impact_ZoomBlurTargetCenter',_0x30c0de=>{const _0x26375c=_0x29c7b3;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2afa95=SceneManager[_0x26375c(0x364)][_0x26375c(0x690)];if(!_0x2afa95)return;VisuMZ['ConvertParams'](_0x30c0de,_0x30c0de);const _0x696bf1=VisuMZ[_0x26375c(0x951)](_0x30c0de[_0x26375c(0x264)]),_0x433cb4=_0x30c0de[_0x26375c(0x465)],_0x501258=_0x30c0de[_0x26375c(0x970)]||0x0,_0x3a4bf9=_0x30c0de[_0x26375c(0x921)]||0x0,_0x43c66d=_0x30c0de['Strength']||0x0,_0x11e755=_0x30c0de[_0x26375c(0x263)]||0x0,_0xf8e385=_0x30c0de['Duration']||0x1,_0x4b9fdc=_0x30c0de[_0x26375c(0xac1)]||_0x26375c(0x2da),_0x3a1258=Math[_0x26375c(0xbce)](..._0x696bf1['map'](_0x3eaa04=>_0x3eaa04[_0x26375c(0xa65)]()[_0x26375c(0xa3a)]-_0x3eaa04['battler']()[_0x26375c(0xa7b)]()/0x2)),_0x3fe391=Math['max'](..._0x696bf1[_0x26375c(0x8ea)](_0x4be4e3=>_0x4be4e3[_0x26375c(0xa65)]()[_0x26375c(0xa3a)]+_0x4be4e3[_0x26375c(0xa65)]()[_0x26375c(0xa7b)]()/0x2)),_0x6c29b5=Math['min'](..._0x696bf1[_0x26375c(0x8ea)](_0xbcbd80=>_0xbcbd80[_0x26375c(0xa65)]()[_0x26375c(0x488)]-_0xbcbd80[_0x26375c(0xa65)]()[_0x26375c(0xc2e)]())),_0xfeeae7=Math[_0x26375c(0xbaf)](..._0x696bf1['map'](_0x82408c=>_0x82408c['battler']()[_0x26375c(0x488)])),_0x54694e=_0x696bf1[_0x26375c(0x55e)](_0x1bead9=>_0x1bead9[_0x26375c(0xa27)]())['length'],_0x3ca935=_0x696bf1['filter'](_0x284ed7=>_0x284ed7[_0x26375c(0xb3d)]())[_0x26375c(0xba7)];let _0x479c89=0x0,_0x21ede0=0x0;if(_0x433cb4[_0x26375c(0x290)](/front/i))_0x479c89=_0x54694e>=_0x3ca935?_0x3a1258:_0x3fe391;else{if(_0x433cb4[_0x26375c(0x290)](/middle/i))_0x479c89=(_0x3a1258+_0x3fe391)/0x2,melee=-0x1;else _0x433cb4[_0x26375c(0x290)](/back/i)&&(_0x479c89=_0x54694e>=_0x3ca935?_0x3fe391:_0x3a1258);}if(_0x433cb4[_0x26375c(0x290)](/head/i))_0x21ede0=_0x6c29b5;else{if(_0x433cb4[_0x26375c(0x290)](/center/i))_0x21ede0=(_0x6c29b5+_0xfeeae7)/0x2;else _0x433cb4['match'](/base/i)&&(_0x21ede0=_0xfeeae7);}_0x479c89+=(Graphics[_0x26375c(0x580)]-Graphics[_0x26375c(0xc0c)])/0x2,_0x21ede0+=(Graphics[_0x26375c(0x719)]-Graphics[_0x26375c(0x132)])/0x2,_0x479c89+=_0x501258,_0x21ede0+=_0x3a4bf9,_0x2afa95[_0x26375c(0x8e3)](_0x43c66d,_0x479c89,_0x21ede0,_0x11e755,_0xf8e385,_0x4b9fdc);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x3c7),_0x21f11f=>{const _0x142a37=_0x29c7b3;if(!Imported[_0x142a37(0x992)])return;const _0x3a931f=SceneManager[_0x142a37(0x364)][_0x142a37(0x690)];if(!_0x3a931f)return;if(VisuMZ['ActSeqImpact'][_0x142a37(0x65e)]<=1.05){alert(_0x142a37(0x783)),SceneManager[_0x142a37(0x99d)]();return;}VisuMZ[_0x142a37(0x4cc)](_0x21f11f,_0x21f11f);const _0x274713=VisuMZ[_0x142a37(0x951)](_0x21f11f['Targets']),_0x507f14={'filename':_0x21f11f['Filename'],'horzCells':_0x21f11f[_0x142a37(0x619)]||0x1,'vertCells':_0x21f11f['vertCells']||0x1,'frameDelay':_0x21f11f[_0x142a37(0x8bd)]||0x1,'smooth':_0x21f11f['smooth']||![],'anchorX':_0x21f11f[_0x142a37(0x311)]||0x0,'anchorY':_0x21f11f[_0x142a37(0xb02)]||0x0,'offsetX':_0x21f11f[_0x142a37(0x3e9)]||0x0,'offsetY':_0x21f11f[_0x142a37(0xa79)]||0x0};for(const _0x50e00c of _0x274713){if(!_0x50e00c)continue;if(!_0x50e00c['battler']())continue;_0x50e00c['battler']()[_0x142a37(0x902)](_0x507f14);}const _0x1aa5ec=$gameTemp[_0x142a37(0x180)]();_0x1aa5ec&&_0x1aa5ec[_0x142a37(0x493)](_0x142a37(0x329));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x949),_0x7860a0=>{const _0x4ae752=_0x29c7b3;if(!Imported[_0x4ae752(0x992)])return;const _0x2a5898=SceneManager[_0x4ae752(0x364)][_0x4ae752(0x690)];if(!_0x2a5898)return;if(VisuMZ[_0x4ae752(0x2b5)][_0x4ae752(0x65e)]<=1.05){alert(_0x4ae752(0x783)),SceneManager[_0x4ae752(0x99d)]();return;}VisuMZ[_0x4ae752(0x4cc)](_0x7860a0,_0x7860a0);const _0x2ab489=VisuMZ[_0x4ae752(0x951)](_0x7860a0[_0x4ae752(0x264)]);for(const _0x3f7855 of _0x2ab489){if(!_0x3f7855)continue;if(!_0x3f7855[_0x4ae752(0xa65)]())continue;_0x3f7855['battler']()['stopInjectAnimation']();}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Inject_AnimationPauseResume',_0x3546df=>{const _0x41e739=_0x29c7b3;if(!Imported[_0x41e739(0x992)])return;const _0x607fdb=SceneManager[_0x41e739(0x364)][_0x41e739(0x690)];if(!_0x607fdb)return;if(VisuMZ['ActSeqImpact'][_0x41e739(0x65e)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x41e739(0x99d)]();return;}VisuMZ[_0x41e739(0x4cc)](_0x3546df,_0x3546df);const _0x4d3f37=VisuMZ['CreateActionSequenceTargets'](_0x3546df['Targets']),_0xef18ed=_0x3546df[_0x41e739(0x486)];for(const _0x517d88 of _0x4d3f37){if(!_0x517d88)continue;if(!_0x517d88[_0x41e739(0xa65)]())continue;_0x517d88[_0x41e739(0xa65)]()[_0x41e739(0x1de)](_0xef18ed);}}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x73f),_0x2450af=>{const _0x50bb58=_0x29c7b3;if(!SceneManager[_0x50bb58(0x429)]())return;const _0x1f6c98=$gameTemp[_0x50bb58(0x180)]();if(!_0x1f6c98)return;_0x1f6c98[_0x50bb58(0x493)](_0x50bb58(0x83e));}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x42d),_0x439417=>{const _0x36eb40=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x36eb40(0x4cc)](_0x439417,_0x439417);const _0x4c7e84=$gameTemp['getLastPluginCommandInterpreter'](),_0x2cfef7=BattleManager[_0x36eb40(0x41e)],_0x4b3556=BattleManager[_0x36eb40(0x215)],_0x72bab3=BattleManager[_0x36eb40(0x70f)];if(!_0x4c7e84||!_0x2cfef7||!_0x4b3556)return;if(!_0x2cfef7[_0x36eb40(0x7cc)]())return;const _0xa2cdaa=VisuMZ[_0x36eb40(0x951)](_0x439417['Targets']);for(const _0x3472d3 of _0xa2cdaa){if(!_0x3472d3)continue;_0x72bab3['push'](_0x36eb40(0x83f),_0x4b3556,_0x3472d3);}_0x4c7e84[_0x36eb40(0x493)](_0x36eb40(0x46d));}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x79a),_0x21ef81=>{const _0x386e5a=_0x29c7b3;if(!SceneManager[_0x386e5a(0x429)]())return;if(!Imported[_0x386e5a(0x4b3)])return;$gameTemp['_performActionEnd']=!![];}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Mechanics_AddBuffDebuff',_0x807ff7=>{const _0x59c786=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x807ff7,_0x807ff7);const _0x46171=[_0x59c786(0x784),_0x59c786(0x903),_0x59c786(0x42a),_0x59c786(0xbc7),'MAT','MDF',_0x59c786(0x2fb),_0x59c786(0x187)],_0x353909=_0x807ff7[_0x59c786(0x9a6)],_0x14341d=_0x807ff7[_0x59c786(0x9f4)],_0x380f3a=_0x807ff7[_0x59c786(0x2a1)],_0x1ca477=VisuMZ[_0x59c786(0x951)](_0x807ff7[_0x59c786(0x264)]);for(const _0x4b7b3d of _0x1ca477){if(!_0x4b7b3d)continue;for(const _0x204eb0 of _0x353909){const _0x4cc87c=_0x46171[_0x59c786(0x617)](_0x204eb0[_0x59c786(0x36b)]()[_0x59c786(0x89a)]());_0x4cc87c>=0x0&&_0x4cc87c<=0x7&&_0x4b7b3d[_0x59c786(0xc00)](_0x4cc87c,_0x380f3a);}for(const _0x2330eb of _0x14341d){const _0x3b15fa=_0x46171[_0x59c786(0x617)](_0x2330eb[_0x59c786(0x36b)]()[_0x59c786(0x89a)]());_0x3b15fa>=0x0&&_0x3b15fa<=0x7&&_0x4b7b3d[_0x59c786(0x1d6)](_0x3b15fa,_0x380f3a);}}}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x985),_0x4f0f35=>{const _0x236469=_0x29c7b3;if(!SceneManager[_0x236469(0x429)]())return;VisuMZ[_0x236469(0x4cc)](_0x4f0f35,_0x4f0f35);const _0xc180ab=_0x4f0f35[_0x236469(0x4d4)],_0x3c3111=VisuMZ[_0x236469(0x951)](_0x4f0f35['Targets']);for(const _0x400936 of _0x3c3111){if(!_0x400936)continue;for(const _0x435b83 of _0xc180ab){_0x400936[_0x236469(0x1b2)](_0x435b83);}}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x2c5),_0x32710b=>{const _0x14da75=_0x29c7b3;if(!SceneManager[_0x14da75(0x429)]())return;VisuMZ[_0x14da75(0x4cc)](_0x32710b,_0x32710b);const _0x4af524=BattleManager[_0x14da75(0x41e)],_0x2410cc={'arPenRate':_0x32710b[_0x14da75(0x993)],'arPenFlat':_0x32710b[_0x14da75(0x2e3)],'arRedRate':_0x32710b['ArRedRate'],'arRedFlat':_0x32710b['ArRedFlat']};_0x4af524['_armorPenetration']=_0x2410cc;}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x939),_0x2eae4d=>{const _0x2de09e=_0x29c7b3;if(!SceneManager[_0x2de09e(0x429)]())return;if(!Imported[_0x2de09e(0x726)])return;VisuMZ[_0x2de09e(0x4cc)](_0x2eae4d,_0x2eae4d);const _0x2e89fa=VisuMZ[_0x2de09e(0x951)](_0x2eae4d[_0x2de09e(0x264)]),_0x19100a=_0x2eae4d[_0x2de09e(0x1fe)]||0x1;for(const _0x94ab83 of _0x2e89fa){if(!_0x94ab83)continue;if(!_0x94ab83[_0x2de09e(0xb3d)]())continue;_0x94ab83[_0x2de09e(0xbf3)](_0x19100a);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x57a),_0x37ee8a=>{const _0x19c622=_0x29c7b3;if(!SceneManager[_0x19c622(0x429)]())return;if(!Imported['VisuMZ_2_BattleSystemATB'])return;if(!BattleManager[_0x19c622(0x11f)]())return;VisuMZ[_0x19c622(0x4cc)](_0x37ee8a,_0x37ee8a);const _0x4c840b=VisuMZ[_0x19c622(0x951)](_0x37ee8a[_0x19c622(0x264)]),_0xea87c2=_0x37ee8a[_0x19c622(0x932)],_0x683ee5=_0x37ee8a[_0x19c622(0x932)],_0x526078=_0x37ee8a[_0x19c622(0x167)];for(const _0x16bdde of _0x4c840b){if(!_0x16bdde)continue;if(_0x16bdde[_0x19c622(0xa08)]())_0x16bdde[_0x19c622(0x9aa)](_0xea87c2);else{if(_0x16bdde[_0x19c622(0x4fc)]()){_0x16bdde[_0x19c622(0x198)](_0x683ee5);if(_0x526078)_0x16bdde[_0x19c622(0x785)]();}}}}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x7a5),_0x289816=>{const _0x50a947=_0x29c7b3;if(!SceneManager[_0x50a947(0x429)]())return;if(!Imported[_0x50a947(0x166)])return;VisuMZ[_0x50a947(0x4cc)](_0x289816,_0x289816);const _0x5c748c=VisuMZ[_0x50a947(0x951)](_0x289816[_0x50a947(0x264)]),_0x13edda=_0x289816[_0x50a947(0x722)];for(const _0x2ada68 of _0x5c748c){if(!_0x2ada68)continue;_0x2ada68[_0x50a947(0x41b)](_0x13edda);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x6b8),_0x525bfb=>{const _0xe6120e=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager['_subject'])return;VisuMZ[_0xe6120e(0x4cc)](_0x525bfb,_0x525bfb);const _0x894479=_0x525bfb[_0xe6120e(0x340)];$gameVariables[_0xe6120e(0xbd6)](_0x894479,BattleManager['_subject']['toUseBoostPoints']());}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xbf1),_0x236b34=>{const _0xd53573=_0x29c7b3;if(!SceneManager[_0xd53573(0x429)]())return;if(!Imported[_0xd53573(0x888)])return;VisuMZ[_0xd53573(0x4cc)](_0x236b34,_0x236b34);const _0x2b98e9=VisuMZ[_0xd53573(0x951)](_0x236b34['Targets']),_0x3d7be8=_0x236b34[_0xd53573(0x64f)];for(const _0x370119 of _0x2b98e9){if(!_0x370119)continue;if(_0x370119[_0xd53573(0x420)]())continue;if(!_0x370119[_0xd53573(0x7ed)]())continue;_0x370119[_0xd53573(0x776)](_0x3d7be8);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Mechanics_BreakShieldReset',_0x2fe2fe=>{const _0x12a582=_0x29c7b3;if(!SceneManager[_0x12a582(0x429)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ['ConvertParams'](_0x2fe2fe,_0x2fe2fe);const _0xe57a5f=VisuMZ[_0x12a582(0x951)](_0x2fe2fe[_0x12a582(0x264)]);for(const _0x25bf2e of _0xe57a5f){if(!_0x25bf2e)continue;if(_0x25bf2e[_0x12a582(0x420)]())continue;if(!_0x25bf2e[_0x12a582(0x7ed)]())continue;_0x25bf2e[_0x12a582(0x102)]();}}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x1d0),_0xfba61c=>{const _0x128a3c=_0x29c7b3;if(!SceneManager[_0x128a3c(0x429)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager[_0x128a3c(0xace)]())return;VisuMZ['ConvertParams'](_0xfba61c,_0xfba61c);const _0x239f70=VisuMZ[_0x128a3c(0x951)](_0xfba61c['Targets']),_0x23b25d=_0xfba61c[_0x128a3c(0x42f)];for(const _0x1966d6 of _0x239f70){if(!_0x1966d6)continue;_0x1966d6[_0x128a3c(0x118)](_0x23b25d);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Mechanics_Collapse',_0x213363=>{const _0x155c8e=_0x29c7b3;if(!SceneManager[_0x155c8e(0x429)]())return;VisuMZ[_0x155c8e(0x4cc)](_0x213363,_0x213363);const _0x510e53=$gameTemp[_0x155c8e(0x180)](),_0x5eef73=BattleManager['_action'],_0x434a6a=BattleManager[_0x155c8e(0x215)];if(!_0x510e53||!_0x5eef73||!_0x434a6a)return;if(!_0x5eef73['item']())return;const _0x43947c=VisuMZ['CreateActionSequenceTargets'](_0x213363[_0x155c8e(0x264)]);for(const _0x31726d of _0x43947c){if(!_0x31726d)continue;_0x213363[_0x155c8e(0x7e8)]&&(_0x31726d[_0x155c8e(0x88a)](),_0x31726d[_0x155c8e(0x1b2)](_0x31726d[_0x155c8e(0xbec)]())),_0x31726d[_0x155c8e(0x9fb)]()&&_0x31726d['performCollapse']();}_0x510e53[_0x155c8e(0x493)]('battleEffect');}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x117),_0xfee866=>{const _0x3f41c=_0x29c7b3;if(!SceneManager[_0x3f41c(0x429)]())return;if(!Imported[_0x3f41c(0x75a)])return;if(!BattleManager[_0x3f41c(0x34c)]())return;VisuMZ[_0x3f41c(0x4cc)](_0xfee866,_0xfee866);const _0x4df93c=VisuMZ[_0x3f41c(0x951)](_0xfee866[_0x3f41c(0x264)]),_0xac546f=_0xfee866[_0x3f41c(0xacf)];for(const _0x1ecf50 of _0x4df93c){if(!_0x1ecf50)continue;_0x1ecf50[_0x3f41c(0x6c6)](_0xac546f);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x655),_0xf744a4=>{const _0x437f12=_0x29c7b3;if(!SceneManager[_0x437f12(0x429)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x437f12(0x34c)]())return;VisuMZ[_0x437f12(0x4cc)](_0xf744a4,_0xf744a4);const _0xcd1155=VisuMZ[_0x437f12(0x951)](_0xf744a4['Targets']),_0x555df7=_0xf744a4['ChargeRate'],_0x35b9d8=_0xf744a4[_0x437f12(0x932)];for(const _0x40551e of _0xcd1155){if(!_0x40551e)continue;if(_0x40551e[_0x437f12(0x72b)]===_0x437f12(0x113))_0x40551e[_0x437f12(0x258)](_0x555df7);else _0x40551e[_0x437f12(0x72b)]===_0x437f12(0xbfa)&&_0x40551e[_0x437f12(0xa72)](_0x35b9d8);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x186),_0x4999ad=>{const _0x511eaf=_0x29c7b3;if(!SceneManager[_0x511eaf(0x429)]())return;VisuMZ[_0x511eaf(0x4cc)](_0x4999ad,_0x4999ad);const _0x23c414=BattleManager[_0x511eaf(0x41e)];if(!_0x23c414)return;let _0x2b7e4f=_0x4999ad[_0x511eaf(0x9df)];_0x23c414[_0x511eaf(0xb91)](_0x2b7e4f);}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xc0d),_0x2cfb0c=>{const _0x209f20=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2cfb0c,_0x2cfb0c);const _0x12cb04=VisuMZ['CreateActionSequenceTargets'](_0x2cfb0c[_0x209f20(0x264)]);for(const _0x541b38 of _0x12cb04){if(!_0x541b38)continue;if(_0x541b38['shouldPopupDamage']())_0x541b38[_0x209f20(0x5be)]();}}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x17c),_0x50f5e3=>{const _0x326974=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x326974(0x4cc)](_0x50f5e3,_0x50f5e3);const _0x2a40e3=$gameTemp[_0x326974(0x180)](),_0x332059=BattleManager[_0x326974(0x215)],_0x3ededf=_0x50f5e3['JumpToLabel'];if(!_0x2a40e3)return;if(!_0x332059)return;_0x332059&&_0x332059[_0x326974(0x7cd)]()&&_0x3ededf['toUpperCase']()[_0x326974(0x89a)]()!==_0x326974(0x44d)&&_0x2a40e3[_0x326974(0xa0e)]([_0x3ededf]);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x21b),_0x1662c4=>{const _0x53d68a=_0x29c7b3;if(!SceneManager[_0x53d68a(0x429)]())return;VisuMZ[_0x53d68a(0x4cc)](_0x1662c4,_0x1662c4);const _0x5c34f5=$gameTemp[_0x53d68a(0x180)](),_0x6b609a=BattleManager[_0x53d68a(0x70f)];if(!_0x5c34f5)return;const _0x133a9b=VisuMZ[_0x53d68a(0x951)](_0x1662c4['Users']),_0x2add2b=VisuMZ[_0x53d68a(0x951)](_0x1662c4['Targets']);for(const _0x11ae59 of _0x133a9b){for(const _0x3cd66e of _0x2add2b){if(!_0x3cd66e)continue;const _0x1e03e2=$dataSkills[_0x11ae59[_0x53d68a(0x881)]()];_0x6b609a['push'](_0x53d68a(0x61a),_0x11ae59,_0x3cd66e,_0x1e03e2);}}_0x5c34f5[_0x53d68a(0x493)](_0x53d68a(0x46d));}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x90a),_0x3dcfd0=>{const _0x354a7e=_0x29c7b3;if(!SceneManager[_0x354a7e(0x429)]())return;VisuMZ['ConvertParams'](_0x3dcfd0,_0x3dcfd0);const _0xeaf30e=$gameTemp[_0x354a7e(0x180)](),_0x47ea7b=BattleManager[_0x354a7e(0x70f)];if(!_0xeaf30e)return;const _0xe28129=VisuMZ[_0x354a7e(0x951)](_0x3dcfd0[_0x354a7e(0xaba)]),_0x5497c5=VisuMZ[_0x354a7e(0x951)](_0x3dcfd0['Targets']);for(const _0x3a165b of _0xe28129){for(const _0x7c59d of _0x5497c5){if(!_0x7c59d)continue;const _0x664854=$dataSkills[_0x3a165b[_0x354a7e(0x7a7)]()];_0x47ea7b[_0x354a7e(0x13a)](_0x354a7e(0x61a),_0x3a165b,_0x7c59d,_0x664854);}}_0xeaf30e[_0x354a7e(0x493)](_0x354a7e(0x46d));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x13f),_0x50b0f6=>{const _0x423b4d=_0x29c7b3;if(!SceneManager[_0x423b4d(0x429)]())return;VisuMZ[_0x423b4d(0x4cc)](_0x50b0f6,_0x50b0f6);const _0x540fc2=$gameTemp[_0x423b4d(0x180)](),_0x435aca=BattleManager[_0x423b4d(0x70f)],_0x5d7fa4=Number(_0x50b0f6[_0x423b4d(0x164)]||0x1),_0x1304c2=$dataItems[_0x5d7fa4];if(!_0x540fc2)return;if(!_0x1304c2)return;const _0x25c4e2=VisuMZ[_0x423b4d(0x951)](_0x50b0f6[_0x423b4d(0xaba)]),_0x30dc9e=VisuMZ[_0x423b4d(0x951)](_0x50b0f6['Targets']);for(const _0x2aa7a7 of _0x25c4e2){for(const _0x2dfe27 of _0x30dc9e){if(!_0x2dfe27)continue;_0x435aca[_0x423b4d(0x13a)](_0x423b4d(0x61a),_0x2aa7a7,_0x2dfe27,_0x1304c2);}}_0x540fc2['setWaitMode'](_0x423b4d(0x46d));}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],'ActSeq_Mechanics_EmulateSkillCost',_0xa04c50=>{const _0x27a8e1=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x27a8e1(0x4cc)](_0xa04c50,_0xa04c50);let _0x48cb9d=Number(_0xa04c50[_0x27a8e1(0x90d)]||0x0);if(_0x48cb9d<=0x0){const _0x546209=BattleManager[_0x27a8e1(0x41e)];if(_0x546209&&_0x546209[_0x27a8e1(0x94d)]())_0x48cb9d=_0x546209['item']()['id'];else return;}const _0x4fec0a=$dataSkills[_0x48cb9d];if(!_0x4fec0a)return;const _0xc2db49=VisuMZ['CreateActionSequenceTargets'](_0xa04c50[_0x27a8e1(0xaba)]);for(const _0x557e43 of _0xc2db49){_0x557e43[_0x27a8e1(0x5fe)](_0x4fec0a);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x786),_0x529307=>{const _0x36c8ba=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x36c8ba(0x4cc)](_0x529307,_0x529307);const _0xf6d0f1=$gameTemp[_0x36c8ba(0x180)](),_0xf007e3=BattleManager[_0x36c8ba(0x70f)],_0x16c0a1=Number(_0x529307['SkillID']||0x1),_0x5adf81=$dataSkills[_0x16c0a1];if(!_0xf6d0f1)return;if(!_0x5adf81)return;const _0x26eb4d=VisuMZ['CreateActionSequenceTargets'](_0x529307[_0x36c8ba(0xaba)]),_0x48bc04=VisuMZ[_0x36c8ba(0x951)](_0x529307[_0x36c8ba(0x264)]);for(const _0x594e6d of _0x26eb4d){for(const _0x26e452 of _0x48bc04){if(!_0x26e452)continue;_0xf007e3[_0x36c8ba(0x13a)](_0x36c8ba(0x61a),_0x594e6d,_0x26e452,_0x5adf81);}}_0xf6d0f1[_0x36c8ba(0x493)](_0x36c8ba(0x46d));}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x5e0),_0x302e2b=>{const _0x3caa7c=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3caa7c(0x4cc)](_0x302e2b,_0x302e2b);const _0x544763=VisuMZ[_0x3caa7c(0x951)](_0x302e2b['Targets']);for(const _0x103f4f of _0x544763){if(!_0x103f4f)continue;if(!_0x103f4f[_0x3caa7c(0xb3d)]())continue;_0x103f4f['escape']();}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x49a),_0x308583=>{const _0x2299fa=_0x29c7b3;if(!SceneManager[_0x2299fa(0x429)]())return;if(!Imported[_0x2299fa(0x3cc)])return;if(!BattleManager[_0x2299fa(0x3c1)]())return;VisuMZ[_0x2299fa(0x4cc)](_0x308583,_0x308583);const _0x2c0e58=_0x308583[_0x2299fa(0x267)];BattleManager[_0x2299fa(0x215)]&&BattleManager[_0x2299fa(0x215)]['friendsUnit']()[_0x2299fa(0x904)](_0x2c0e58);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x39b),_0x111292=>{const _0x501733=_0x29c7b3;if(!SceneManager[_0x501733(0x429)]())return;if(!Imported[_0x501733(0x253)])return;if(!BattleManager['isFTB']())return;VisuMZ['ConvertParams'](_0x111292,_0x111292);const _0x566653=_0x111292[_0x501733(0x267)];BattleManager[_0x501733(0x215)]&&BattleManager[_0x501733(0x215)][_0x501733(0x922)]()[_0x501733(0x555)](_0x566653);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x600),_0x2814a2=>{const _0x1d8389=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1d8389(0x4cc)](_0x2814a2,_0x2814a2);const _0x2614f9=VisuMZ[_0x1d8389(0x951)](_0x2814a2['Targets']),_0x5a901d=_0x2814a2[_0x1d8389(0xa19)],_0x5573eb=_0x2814a2[_0x1d8389(0x135)],_0x149441=_0x2814a2[_0x1d8389(0x1c7)],_0x4db96a=_0x2814a2[_0x1d8389(0x10b)],_0x5b4cfc=_0x2814a2[_0x1d8389(0xfe)],_0x1e93a2=_0x2814a2[_0x1d8389(0x6d9)],_0xb0941=_0x2814a2[_0x1d8389(0x824)];for(const _0x5236f3 of _0x2614f9){if(!_0x5236f3)continue;const _0x9c47c8=_0x5236f3[_0x1d8389(0x475)](),_0xd81e94=Math[_0x1d8389(0x50f)](_0x5a901d*_0x5236f3[_0x1d8389(0x1e9)]+_0x5573eb),_0x4bbb42=Math[_0x1d8389(0x50f)](_0x149441*_0x5236f3[_0x1d8389(0x47f)]+_0x4db96a),_0x2ca5e5=Math['round'](_0x5b4cfc*_0x5236f3['maxTp']()+_0x1e93a2);if(_0xd81e94!==0x0)_0x5236f3['gainHp'](_0xd81e94);if(_0x4bbb42!==0x0)_0x5236f3['gainMp'](_0x4bbb42);if(_0x2ca5e5!==0x0)_0x5236f3[_0x1d8389(0x29c)](_0x2ca5e5);if(_0xb0941)_0x5236f3[_0x1d8389(0x5be)]();_0x9c47c8&&_0x5236f3['isDead']()&&_0x5236f3['performCollapse']();}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x57b),_0x30c18c=>{const _0xa61db0=_0x29c7b3;if(!SceneManager[_0xa61db0(0x429)]())return;VisuMZ[_0xa61db0(0x4cc)](_0x30c18c,_0x30c18c);const _0xd72d75=VisuMZ[_0xa61db0(0x951)](_0x30c18c['Targets']);for(const _0x482198 of _0xd72d75){if(!_0x482198)continue;_0x482198[_0xa61db0(0xbb9)](_0x30c18c['Immortal']);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Mechanics_Multipliers',_0xa1a76=>{const _0x138665=_0x29c7b3;if(!SceneManager[_0x138665(0x429)]())return;VisuMZ[_0x138665(0x4cc)](_0xa1a76,_0xa1a76);const _0x3d1e47=BattleManager[_0x138665(0x41e)],_0x29579d={'criticalHitRate':_0xa1a76[_0x138665(0xb29)],'criticalHitFlat':_0xa1a76[_0x138665(0x6ac)],'criticalDmgRate':_0xa1a76['CriticalDmgRate'],'criticalDmgFlat':_0xa1a76[_0x138665(0x59a)],'damageRate':_0xa1a76['DamageRate'],'damageFlat':_0xa1a76['DamageFlat'],'hitRate':_0xa1a76[_0x138665(0x511)],'hitFlat':_0xa1a76[_0x138665(0x3dc)]};_0x3d1e47[_0x138665(0x65d)]=_0x29579d;}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x61c),_0x57e8aa=>{const _0x19f1e2=_0x29c7b3;if(!SceneManager[_0x19f1e2(0x429)]())return;VisuMZ[_0x19f1e2(0x4cc)](_0x57e8aa,_0x57e8aa);const _0xe339d6=_0x57e8aa[_0x19f1e2(0x114)];SceneManager[_0x19f1e2(0x364)]['playOnceParallelInterpreter'](_0xe339d6);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x417),_0x2e7ab5=>{const _0x5bc2d8=_0x29c7b3;if(!SceneManager[_0x5bc2d8(0x429)]())return;if(!Imported[_0x5bc2d8(0x273)])return;if(!BattleManager[_0x5bc2d8(0x524)]())return;VisuMZ[_0x5bc2d8(0x4cc)](_0x2e7ab5,_0x2e7ab5);const _0x160ad0=VisuMZ[_0x5bc2d8(0x951)](_0x2e7ab5['Targets']);for(const _0x26119a of _0x160ad0){if(!_0x26119a)continue;let _0x2ff344=_0x2e7ab5[_0x5bc2d8(0xbfd)],_0x184d68=_0x2e7ab5[_0x5bc2d8(0x6bd)],_0x35ee48=_0x2e7ab5[_0x5bc2d8(0x332)];BattleManager[_0x5bc2d8(0x43e)][_0x5bc2d8(0xba2)](_0x26119a)?_0x2ff344+=_0x35ee48:_0x184d68+=_0x35ee48,BattleManager['turnOrderChangeOTB'](_0x26119a,-_0x2ff344,![]),BattleManager[_0x5bc2d8(0xb14)](_0x26119a,-_0x184d68,!![]);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Mechanics_PtbAlterCost',_0x58f34e=>{const _0x51a7c4=_0x29c7b3;if(!SceneManager[_0x51a7c4(0x429)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x51a7c4(0x4cc)](_0x58f34e,_0x58f34e);const _0x38242d=BattleManager[_0x51a7c4(0x215)][_0x51a7c4(0x922)](),_0x53ff00=_0x58f34e[_0x51a7c4(0x51d)],_0x3ff98b=_0x58f34e[_0x51a7c4(0x434)]||_0x51a7c4(0x75d),_0x57009b=_0x58f34e[_0x51a7c4(0x683)]||_0x51a7c4(0x75d),_0x52c2b4=_0x58f34e[_0x51a7c4(0x3f1)]||0x0,_0x274a39=_0x58f34e[_0x51a7c4(0x68a)]||0x0;(_0x38242d['canAlterActionCostPTB']()||_0x53ff00)&&(_0x53ff00&&(_0x38242d['_ptbActionCost']=_0x38242d[_0x51a7c4(0x5d8)]||{},_0x38242d['_ptbActionCost'][_0x51a7c4(0x777)]=0x0),_0x38242d[_0x51a7c4(0xbc9)](_0x3ff98b,_0x57009b,_0x52c2b4,_0x274a39));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xc26),_0x31c5a3=>{const _0x38dc2e=_0x29c7b3;if(!SceneManager[_0x38dc2e(0x429)]())return;if(!Imported[_0x38dc2e(0x570)])return;if(!BattleManager[_0x38dc2e(0x708)]())return;VisuMZ[_0x38dc2e(0x4cc)](_0x31c5a3,_0x31c5a3);const _0x2e9ab9=BattleManager[_0x38dc2e(0x215)][_0x38dc2e(0x922)]();let _0x2d5e1d=Math[_0x38dc2e(0xbaf)](_0x31c5a3[_0x38dc2e(0x4fd)],0x0),_0xd5218f=_0x2e9ab9[_0x38dc2e(0x811)](),_0x921d84=_0x2e9ab9[_0x38dc2e(0x445)]();while(_0x2d5e1d--){if(_0xd5218f<=0x0&&_0x921d84<=0x0)break;else _0xd5218f>0x0?(_0xd5218f--,_0x921d84++):_0x921d84--;}_0x2e9ab9['setFullActionsPTB'](_0xd5218f),_0x2e9ab9[_0x38dc2e(0x9d8)](_0x921d84);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Mechanics_PtbFullHalfAction',_0xe0c4ed=>{const _0x1371a8=_0x29c7b3;if(!SceneManager[_0x1371a8(0x429)]())return;if(!Imported[_0x1371a8(0x570)])return;if(!BattleManager[_0x1371a8(0x708)]())return;VisuMZ[_0x1371a8(0x4cc)](_0xe0c4ed,_0xe0c4ed);const _0x16bfe0=BattleManager[_0x1371a8(0x215)][_0x1371a8(0x922)]();let _0xd31f6d=_0xe0c4ed[_0x1371a8(0x712)],_0x477ce4=_0xe0c4ed['HalfActions'];_0x16bfe0[_0x1371a8(0x64e)](_0xd31f6d),_0x16bfe0[_0x1371a8(0x5fb)](_0x477ce4);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x59c),_0x31e54a=>{const _0x2f123d=_0x29c7b3;if(!SceneManager[_0x2f123d(0x429)]())return;VisuMZ[_0x2f123d(0x4cc)](_0x31e54a,_0x31e54a);const _0x3d5053=[_0x2f123d(0x784),_0x2f123d(0x903),_0x2f123d(0x42a),'DEF',_0x2f123d(0xa28),'MDF',_0x2f123d(0x2fb),_0x2f123d(0x187)],_0x3c5871=_0x31e54a[_0x2f123d(0x9a6)],_0x922f05=_0x31e54a['Debuffs'],_0x537d90=VisuMZ['CreateActionSequenceTargets'](_0x31e54a[_0x2f123d(0x264)]);for(const _0x34f243 of _0x537d90){if(!_0x34f243)continue;for(const _0x327e58 of _0x3c5871){const _0x49324e=_0x3d5053[_0x2f123d(0x617)](_0x327e58['toUpperCase']()[_0x2f123d(0x89a)]());_0x49324e>=0x0&&_0x49324e<=0x7&&_0x34f243['isBuffAffected'](_0x49324e)&&_0x34f243[_0x2f123d(0x4e1)](_0x49324e);}for(const _0x166195 of _0x922f05){const _0x55747c=_0x3d5053[_0x2f123d(0x617)](_0x166195['toUpperCase']()[_0x2f123d(0x89a)]());_0x55747c>=0x0&&_0x55747c<=0x7&&_0x34f243['isDebuffAffected'](_0x55747c)&&_0x34f243[_0x2f123d(0x4e1)](_0x55747c);}}}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],'ActSeq_Mechanics_RemoveState',_0x5c7aa1=>{const _0x193e28=_0x29c7b3;if(!SceneManager[_0x193e28(0x429)]())return;VisuMZ['ConvertParams'](_0x5c7aa1,_0x5c7aa1);const _0x17befb=_0x5c7aa1[_0x193e28(0x4d4)],_0x8eb279=VisuMZ[_0x193e28(0x951)](_0x5c7aa1[_0x193e28(0x264)]);for(const _0x404330 of _0x8eb279){if(!_0x404330)continue;for(const _0x1b8acc of _0x17befb){_0x404330['removeState'](_0x1b8acc);}}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Mechanics_StateTurnsChangeBy',_0x1e2ec2=>{const _0x29d3aa=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;VisuMZ[_0x29d3aa(0x4cc)](_0x1e2ec2,_0x1e2ec2);const _0x59953b=VisuMZ[_0x29d3aa(0x951)](_0x1e2ec2[_0x29d3aa(0x264)]),_0x261065=Number(_0x1e2ec2[_0x29d3aa(0x850)]),_0x1f45d3=Number(_0x1e2ec2[_0x29d3aa(0x2a1)]),_0x419a52=_0x1e2ec2['AutoAddState'];for(const _0x1e952e of _0x59953b){if(!_0x1e952e)continue;_0x419a52&&!_0x1e952e[_0x29d3aa(0xaf3)](_0x261065)?(_0x1e952e[_0x29d3aa(0x1b2)](_0x261065),_0x1e952e[_0x29d3aa(0xad6)](_0x261065,_0x1f45d3)):_0x1e952e['addStateTurns'](_0x261065,_0x1f45d3);}}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x622),_0x3fa5c2=>{const _0x5b7d5f=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5b7d5f(0xacd)])return;VisuMZ[_0x5b7d5f(0x4cc)](_0x3fa5c2,_0x3fa5c2);const _0x41d92c=VisuMZ[_0x5b7d5f(0x951)](_0x3fa5c2[_0x5b7d5f(0x264)]),_0x1684c9=Number(_0x3fa5c2[_0x5b7d5f(0x850)]),_0x48c0e8=Math[_0x5b7d5f(0xbaf)](Number(_0x3fa5c2['Turns']),0x0),_0x567c16=_0x3fa5c2[_0x5b7d5f(0x128)];for(const _0x101238 of _0x41d92c){if(!_0x101238)continue;_0x567c16&&!_0x101238[_0x5b7d5f(0xaf3)](_0x1684c9)&&_0x101238[_0x5b7d5f(0x1b2)](_0x1684c9),_0x101238[_0x5b7d5f(0xad6)](_0x1684c9,_0x48c0e8);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_StbExploit',_0x3b8900=>{const _0x5da8c6=_0x29c7b3;if(!SceneManager[_0x5da8c6(0x429)]())return;if(!Imported[_0x5da8c6(0xbb1)])return;if(!BattleManager[_0x5da8c6(0x142)]())return;VisuMZ[_0x5da8c6(0x4cc)](_0x3b8900,_0x3b8900);const _0x4159c1=_0x3b8900['Exploited'],_0x2dcd02=VisuMZ[_0x5da8c6(0x951)](_0x3b8900[_0x5da8c6(0x264)]),_0x5154da=_0x3b8900[_0x5da8c6(0x442)],_0x59d557=_0x3b8900['Exploiter'],_0x4826f8=_0x3b8900[_0x5da8c6(0x433)],_0xac173b=BattleManager['_action'];if(_0x4159c1)for(const _0x2a9b81 of _0x2dcd02){if(!_0x2a9b81)continue;if(_0x2a9b81===BattleManager['_subject'])continue;if(_0x5154da)_0x2a9b81[_0x5da8c6(0x78f)](![]);_0x2a9b81[_0x5da8c6(0x487)](BattleManager['_subject'],_0xac173b);}if(_0x59d557&&BattleManager[_0x5da8c6(0x215)]){if(_0x4826f8)BattleManager['_subject'][_0x5da8c6(0x78f)](![]);const _0x6b0186=_0x2dcd02[0x0];BattleManager[_0x5da8c6(0x215)][_0x5da8c6(0x5bf)](_0x6b0186,_0xac173b);}}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x28f),_0x28b5a6=>{const _0x3fde37=_0x29c7b3;if(!SceneManager[_0x3fde37(0x429)]())return;if(!Imported[_0x3fde37(0xbb1)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x3fde37(0x4cc)](_0x28b5a6,_0x28b5a6);const _0x2b9d9a=_0x28b5a6[_0x3fde37(0xb37)];BattleManager['_subject']&&BattleManager[_0x3fde37(0x215)][_0x3fde37(0x19f)](_0x2b9d9a);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Mechanics_StbRemoveExcessActions',_0x2aebc6=>{const _0x128403=_0x29c7b3;if(!SceneManager[_0x128403(0x429)]())return;if(!Imported[_0x128403(0xbb1)])return;if(!BattleManager[_0x128403(0x142)]())return;VisuMZ[_0x128403(0x4cc)](_0x2aebc6,_0x2aebc6);let _0x33c25f=_0x2aebc6[_0x128403(0xb37)];if(BattleManager['_subject']){BattleManager[_0x128403(0x215)]['_actions']=BattleManager[_0x128403(0x215)][_0x128403(0x8f1)]||[];while(_0x33c25f--){if(BattleManager[_0x128403(0x215)]['_actions']['length']<=0x0)break;BattleManager[_0x128403(0x215)][_0x128403(0x8f1)][_0x128403(0x43d)]();}}}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x228),_0x312fd0=>{const _0x201a52=_0x29c7b3;if(!SceneManager[_0x201a52(0x429)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0x201a52(0x4cc)](_0x312fd0,_0x312fd0);const _0x466c3d=VisuMZ['CreateActionSequenceTargets'](_0x312fd0['Targets']),_0x3e4893=_0x312fd0['WeaponTypeID'];for(const _0x3f93eb of _0x466c3d){if(!_0x3f93eb)continue;if(!_0x3f93eb['isActor']())continue;_0x3f93eb[_0x201a52(0x6df)](_0x3e4893);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Mechanics_TextPopup',_0xf75d95=>{const _0x63a8c1=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0xf75d95,_0xf75d95);const _0x166e44=VisuMZ[_0x63a8c1(0x951)](_0xf75d95[_0x63a8c1(0x264)]),_0x47c0bb=_0xf75d95['Text'],_0x2db661={'textColor':ColorManager[_0x63a8c1(0xa0d)](_0xf75d95[_0x63a8c1(0x1ae)]),'flashColor':_0xf75d95[_0x63a8c1(0x577)],'flashDuration':_0xf75d95[_0x63a8c1(0x12e)]};for(const _0x42aea9 of _0x166e44){if(!_0x42aea9)continue;_0x42aea9['setupTextPopup'](_0x47c0bb,_0x2db661);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Mechanics_VariablePopup',_0x1ea2d9=>{const _0x2eb625=_0x29c7b3;if(!SceneManager[_0x2eb625(0x429)]())return;VisuMZ[_0x2eb625(0x4cc)](_0x1ea2d9,_0x1ea2d9);const _0x4cf107=VisuMZ['CreateActionSequenceTargets'](_0x1ea2d9[_0x2eb625(0x264)]);let _0x1f4b71=$gameVariables[_0x2eb625(0x8b1)](_0x1ea2d9['Variable']);Imported[_0x2eb625(0x50c)]&&_0x1ea2d9['DigitGrouping']&&(_0x1f4b71=VisuMZ[_0x2eb625(0xc05)](_0x1f4b71));const _0xafc45e=String(_0x1f4b71),_0x36b44a={'textColor':ColorManager[_0x2eb625(0xa0d)](_0x1ea2d9[_0x2eb625(0x1ae)]),'flashColor':_0x1ea2d9[_0x2eb625(0x577)],'flashDuration':_0x1ea2d9[_0x2eb625(0x12e)]};for(const _0x5b11d0 of _0x4cf107){if(!_0x5b11d0)continue;_0x5b11d0[_0x2eb625(0x612)](_0xafc45e,_0x36b44a);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x2a4),_0x129952=>{const _0x4b297e=_0x29c7b3;if(!SceneManager[_0x4b297e(0x429)]())return;const _0x5c0224=$gameTemp[_0x4b297e(0x180)]();if(!_0x5c0224)return;_0x5c0224[_0x4b297e(0x493)](_0x4b297e(0x436));}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x1bc),_0x49657b=>{const _0xc29678=_0x29c7b3;if(!SceneManager[_0xc29678(0x429)]())return;VisuMZ['ConvertParams'](_0x49657b,_0x49657b);const _0x507368=VisuMZ[_0xc29678(0x951)](_0x49657b[_0xc29678(0x264)]);for(const _0x32c3e8 of _0x507368){if(!_0x32c3e8)continue;_0x32c3e8['clearFreezeMotion']();}}),PluginManager['registerCommand'](pluginData['name'],_0x29c7b3(0xaa2),_0x5af32d=>{const _0x4a5013=_0x29c7b3;if(!SceneManager[_0x4a5013(0x429)]())return;VisuMZ[_0x4a5013(0x4cc)](_0x5af32d,_0x5af32d);const _0x193314=VisuMZ[_0x4a5013(0x951)](_0x5af32d[_0x4a5013(0x264)]),_0x418d1d=_0x5af32d[_0x4a5013(0x806)][_0x4a5013(0x6fd)]()[_0x4a5013(0x89a)]();let _0x526a09=_0x5af32d[_0x4a5013(0x9da)];const _0x1e0dbb=_0x5af32d[_0x4a5013(0x15a)];![_0x4a5013(0x1dc),_0x4a5013(0xa91),'swing','missile']['includes'](_0x418d1d)&&(_0x526a09=![]);for(const _0x5bd223 of _0x193314){if(!_0x5bd223)continue;_0x5bd223[_0x4a5013(0x7fb)](_0x418d1d,_0x526a09,_0x1e0dbb);}}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x74a),_0x413a6e=>{const _0xc04334=_0x29c7b3;if(!SceneManager[_0xc04334(0x429)]())return;VisuMZ[_0xc04334(0x4cc)](_0x413a6e,_0x413a6e);const _0x4f0d06=VisuMZ[_0xc04334(0x951)](_0x413a6e[_0xc04334(0x264)]),_0x257ad8=_0x413a6e[_0xc04334(0x806)][_0xc04334(0x6fd)]()[_0xc04334(0x89a)](),_0x5db217=_0x413a6e[_0xc04334(0x9da)];for(const _0x1e1031 of _0x4f0d06){if(!_0x1e1031)continue;_0x1e1031[_0xc04334(0x3d2)]=_0x5db217;if(_0x257ad8[_0xc04334(0x290)](/ATTACK[ ](\d+)/i))_0x1e1031[_0xc04334(0x5a6)](Number(RegExp['$1']));else _0x257ad8==='attack'?_0x1e1031[_0xc04334(0xa70)]():_0x1e1031['requestMotion'](_0x257ad8);if(!_0x5db217)_0x1e1031[_0xc04334(0x85f)](0x0);else{if(_0x5db217&&[_0xc04334(0xa91),'swing',_0xc04334(0x682)][_0xc04334(0xba2)](_0x257ad8)){}}_0x1e1031[_0xc04334(0x3d2)]=undefined;}}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0xa5f),_0x3f6ea5=>{const _0x512c08=_0x29c7b3;if(!SceneManager[_0x512c08(0x429)]())return;VisuMZ[_0x512c08(0x4cc)](_0x3f6ea5,_0x3f6ea5);const _0x462198=BattleManager[_0x512c08(0x41e)];if(!_0x462198)return;if(!_0x462198[_0x512c08(0x7cc)]())return;const _0x469f5e=VisuMZ[_0x512c08(0x951)](_0x3f6ea5[_0x512c08(0x264)]);for(const _0x15be29 of _0x469f5e){if(!_0x15be29)continue;_0x15be29['performAction'](_0x462198);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Motion_RefreshMotion',_0x239862=>{const _0x2ff756=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2ff756(0x4cc)](_0x239862,_0x239862);const _0x23d8c9=VisuMZ[_0x2ff756(0x951)](_0x239862[_0x2ff756(0x264)]);for(const _0x4e3ef8 of _0x23d8c9){if(!_0x4e3ef8)continue;if(!_0x4e3ef8[_0x2ff756(0xa65)]())continue;_0x4e3ef8[_0x2ff756(0xa65)]()[_0x2ff756(0x3c5)]();}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xb55),_0x2753a9=>{const _0x453f63=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x453f63(0x4cc)](_0x2753a9,_0x2753a9);const _0x28daca=$gameTemp[_0x453f63(0x180)](),_0x176981=_0x2753a9[_0x453f63(0x924)]*Sprite_Battler[_0x453f63(0x9ae)];_0x28daca[_0x453f63(0x60f)](_0x176981);}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x507),_0x5cd740=>{const _0x2ebea1=_0x29c7b3;if(!SceneManager[_0x2ebea1(0x429)]())return;VisuMZ[_0x2ebea1(0x4cc)](_0x5cd740,_0x5cd740);const _0xbf9084=$gameTemp[_0x2ebea1(0x180)](),_0x552fe6=BattleManager[_0x2ebea1(0x41e)];if(!_0xbf9084||!_0x552fe6)return;if(!_0x552fe6[_0x2ebea1(0x7cc)]())return;const _0xe60586=VisuMZ[_0x2ebea1(0x951)](_0x5cd740['Targets']);for(const _0x3b53dd of _0xe60586){if(!_0x3b53dd)continue;_0x3b53dd['performActionStart'](_0x552fe6);}if(_0x5cd740[_0x2ebea1(0x686)])_0xbf9084[_0x2ebea1(0x493)](_0x2ebea1(0x2a5));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x539),_0x959edd=>{const _0x5dfb2a=_0x29c7b3;if(!SceneManager[_0x5dfb2a(0x429)]())return;if(!$gameSystem[_0x5dfb2a(0x204)]())return;VisuMZ[_0x5dfb2a(0x4cc)](_0x959edd,_0x959edd);const _0x562f6e=$gameTemp[_0x5dfb2a(0x180)](),_0x2be6a0=VisuMZ['CreateActionSequenceTargets'](_0x959edd[_0x5dfb2a(0x264)]),_0x17bfa5=_0x959edd[_0x5dfb2a(0x1f5)],_0x3a128f=_0x959edd['DistanceX'],_0x494f28=_0x959edd[_0x5dfb2a(0x4f3)],_0x5884b8=_0x959edd[_0x5dfb2a(0x21c)],_0x3228e0=_0x959edd['FaceDirection'],_0x41cd57=_0x959edd[_0x5dfb2a(0xac1)],_0x182225=_0x959edd[_0x5dfb2a(0x806)],_0x114c5f=_0x959edd['WaitForMovement'];if(!_0x562f6e)return;for(const _0x4c6407 of _0x2be6a0){if(!_0x4c6407)continue;let _0x5c7768=_0x3a128f,_0x2cb399=_0x494f28;if(_0x17bfa5[_0x5dfb2a(0x290)](/horz/i))_0x5c7768*=_0x4c6407[_0x5dfb2a(0xa27)]()?-0x1:0x1;if(_0x17bfa5[_0x5dfb2a(0x290)](/vert/i))_0x2cb399*=_0x4c6407['isActor']()?-0x1:0x1;_0x4c6407[_0x5dfb2a(0x196)](_0x5c7768,_0x2cb399,_0x5884b8,_0x3228e0,_0x41cd57),_0x4c6407['requestMotion'](_0x182225);}if(_0x114c5f)_0x562f6e['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData['name'],_0x29c7b3(0x9af),_0x460b43=>{const _0x5a386e=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x5a386e(0x204)]())return;VisuMZ['ConvertParams'](_0x460b43,_0x460b43);const _0x47323b=$gameTemp[_0x5a386e(0x180)](),_0x55a08c=VisuMZ[_0x5a386e(0x951)](_0x460b43[_0x5a386e(0x264)]),_0x32260f=_0x460b43[_0x5a386e(0x4ec)],_0x1f063a=_0x460b43[_0x5a386e(0x970)],_0x12384a=_0x460b43['OffsetY'],_0x531c10=_0x460b43[_0x5a386e(0x21c)],_0x407882=_0x460b43[_0x5a386e(0x607)],_0x171fed=_0x460b43[_0x5a386e(0xac1)],_0x31d9d2=_0x460b43[_0x5a386e(0x806)],_0x220b98=_0x460b43[_0x5a386e(0x686)];if(!_0x47323b)return;for(const _0x3b2982 of _0x55a08c){if(!_0x3b2982)continue;const _0x1ba867=_0x460b43['DestinationJS'](_0x3b2982)||{'x':0x0,'y':0x0};let _0x46c0a9=_0x1ba867['x'],_0x2f1752=_0x1ba867['y'];if(_0x32260f[_0x5a386e(0x290)](/none/i))_0x46c0a9+=_0x1f063a,_0x2f1752+=_0x12384a;else{if(_0x32260f['match'](/horz/i)&&_0x32260f[_0x5a386e(0x290)](/vert/i))_0x46c0a9+=_0x3b2982[_0x5a386e(0xa27)]()?-_0x1f063a:_0x1f063a,_0x2f1752+=_0x3b2982[_0x5a386e(0xa27)]()?-_0x12384a:_0x12384a;else{if(_0x32260f[_0x5a386e(0x290)](/horz/i))_0x46c0a9+=_0x3b2982[_0x5a386e(0xa27)]()?-_0x1f063a:_0x1f063a,_0x2f1752+=_0x12384a;else _0x32260f[_0x5a386e(0x290)](/vert/i)&&(_0x46c0a9+=_0x1f063a,_0x2f1752+=_0x3b2982['isActor']()?-_0x12384a:_0x12384a);}}_0x3b2982[_0x5a386e(0x223)](_0x46c0a9,_0x2f1752,_0x531c10,_0x407882,_0x171fed,-0x1),_0x3b2982[_0x5a386e(0x635)](_0x31d9d2);}if(_0x220b98)_0x47323b[_0x5a386e(0x493)](_0x5a386e(0x2a5));}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],'ActSeq_Movement_HomeMoveToPoint',_0x51092d=>{const _0x22a773=_0x29c7b3;if(!SceneManager[_0x22a773(0x429)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x22a773(0x4cc)](_0x51092d,_0x51092d);const _0x43cd44=$gameTemp[_0x22a773(0x180)](),_0x4ec6a2=VisuMZ[_0x22a773(0x951)](_0x51092d[_0x22a773(0x264)]),_0x391e26=_0x51092d[_0x22a773(0x3b6)],_0x1aa071=_0x51092d['OffsetAdjust'],_0x55ccc0=_0x51092d[_0x22a773(0x970)],_0x347e23=_0x51092d[_0x22a773(0x921)],_0x253db5=_0x51092d[_0x22a773(0x21c)],_0x1b940b=_0x51092d['FaceDirection'],_0x335dd1=_0x51092d[_0x22a773(0xac1)],_0x4bc08d=_0x51092d[_0x22a773(0x806)],_0x474967=_0x51092d['WaitForMovement'];if(!_0x43cd44)return;for(const _0x42ae94 of _0x4ec6a2){if(!_0x42ae94)continue;let _0x3128fa=_0x42ae94[_0x22a773(0xa65)]()[_0x22a773(0xa3a)],_0xbfe795=_0x42ae94['battler']()['_baseY'];if(_0x391e26[_0x22a773(0x290)](/home/i))_0x3128fa=_0x42ae94[_0x22a773(0xa65)]()[_0x22a773(0x755)],_0xbfe795=_0x42ae94[_0x22a773(0xa65)]()[_0x22a773(0x76e)];else{if(_0x391e26[_0x22a773(0x290)](/center/i))_0x3128fa=Graphics['boxWidth']/0x2,_0xbfe795=Graphics[_0x22a773(0x132)]/0x2;else _0x391e26[_0x22a773(0x290)](/point (\d+), (\d+)/i)&&(_0x3128fa=Number(RegExp['$1']),_0xbfe795=Number(RegExp['$2']));}if(_0x1aa071['match'](/none/i))_0x3128fa+=_0x55ccc0,_0xbfe795+=_0x347e23;else{if(_0x1aa071['match'](/horz/i)&&_0x1aa071[_0x22a773(0x290)](/vert/i))_0x3128fa+=_0x42ae94['isActor']()?-_0x55ccc0:_0x55ccc0,_0xbfe795+=_0x42ae94[_0x22a773(0xa27)]()?-_0x347e23:_0x347e23;else{if(_0x1aa071['match'](/horz/i))_0x3128fa+=_0x42ae94['isActor']()?-_0x55ccc0:_0x55ccc0,_0xbfe795+=_0x347e23;else _0x1aa071['match'](/vert/i)&&(_0x3128fa+=_0x55ccc0,_0xbfe795+=_0x42ae94[_0x22a773(0xa27)]()?-_0x347e23:_0x347e23);}}_0x42ae94[_0x22a773(0x223)](_0x3128fa,_0xbfe795,_0x253db5,_0x1b940b,_0x335dd1,-0x1),_0x42ae94[_0x22a773(0x635)](_0x4bc08d);}if(_0x474967)_0x43cd44[_0x22a773(0x493)](_0x22a773(0x2a5));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x955),_0x5d27bd=>{const _0x5826aa=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x5826aa(0x204)]())return;VisuMZ['ConvertParams'](_0x5d27bd,_0x5d27bd);const _0x27f231=$gameTemp[_0x5826aa(0x180)](),_0x33fa5a=VisuMZ[_0x5826aa(0x951)](_0x5d27bd[_0x5826aa(0xa1b)]),_0x24d7d9=VisuMZ[_0x5826aa(0x951)](_0x5d27bd['Targets2']),_0x59505f=_0x5d27bd[_0x5826aa(0x465)];let _0x5dd801=_0x5d27bd[_0x5826aa(0x4b6)];const _0x1d65ba=_0x5d27bd[_0x5826aa(0x4ec)],_0x542360=_0x5d27bd[_0x5826aa(0x970)],_0x563cc6=_0x5d27bd[_0x5826aa(0x921)],_0x34a00e=_0x5d27bd[_0x5826aa(0x21c)],_0x315964=_0x5d27bd['FaceDirection'],_0x2aa094=_0x5d27bd[_0x5826aa(0xac1)],_0x52d0e4=_0x5d27bd['MotionType'],_0x552add=_0x5d27bd[_0x5826aa(0x686)],_0x41730e=Math[_0x5826aa(0xbce)](..._0x24d7d9[_0x5826aa(0x8ea)](_0x14c559=>_0x14c559[_0x5826aa(0xa65)]()['_baseX']-_0x14c559[_0x5826aa(0xa65)]()[_0x5826aa(0xa7b)]()/0x2)),_0x36c834=Math['max'](..._0x24d7d9['map'](_0x5d46a7=>_0x5d46a7[_0x5826aa(0xa65)]()[_0x5826aa(0xa3a)]+_0x5d46a7[_0x5826aa(0xa65)]()[_0x5826aa(0xa7b)]()/0x2)),_0x846d73=Math['min'](..._0x24d7d9[_0x5826aa(0x8ea)](_0x547452=>_0x547452[_0x5826aa(0xa65)]()[_0x5826aa(0x488)]-_0x547452[_0x5826aa(0xa65)]()[_0x5826aa(0xc2e)]())),_0x1ebb2a=Math[_0x5826aa(0xbaf)](..._0x24d7d9[_0x5826aa(0x8ea)](_0x47674d=>_0x47674d[_0x5826aa(0xa65)]()[_0x5826aa(0x488)])),_0x1cee00=_0x24d7d9[_0x5826aa(0x55e)](_0x944cf7=>_0x944cf7[_0x5826aa(0xa27)]())[_0x5826aa(0xba7)],_0x256cf0=_0x24d7d9[_0x5826aa(0x55e)](_0xca3478=>_0xca3478['isEnemy']())[_0x5826aa(0xba7)];let _0x1ff2e6=0x0,_0x4f0278=0x0;if(_0x59505f[_0x5826aa(0x290)](/front/i))_0x1ff2e6=_0x1cee00>=_0x256cf0?_0x41730e:_0x36c834;else{if(_0x59505f[_0x5826aa(0x290)](/middle/i))_0x1ff2e6=(_0x41730e+_0x36c834)/0x2,_0x5dd801=-0x1;else _0x59505f[_0x5826aa(0x290)](/back/i)&&(_0x1ff2e6=_0x1cee00>=_0x256cf0?_0x36c834:_0x41730e);}if(_0x59505f[_0x5826aa(0x290)](/head/i))_0x4f0278=_0x846d73;else{if(_0x59505f[_0x5826aa(0x290)](/center/i))_0x4f0278=(_0x846d73+_0x1ebb2a)/0x2;else _0x59505f[_0x5826aa(0x290)](/base/i)&&(_0x4f0278=_0x1ebb2a);}if(!_0x27f231)return;for(const _0x186735 of _0x33fa5a){if(!_0x186735)continue;let _0x4c4f33=_0x1ff2e6,_0x1a95e2=_0x4f0278;if(_0x1d65ba[_0x5826aa(0x290)](/none/i))_0x4c4f33+=_0x542360,_0x1a95e2+=_0x563cc6;else{if(_0x1d65ba[_0x5826aa(0x290)](/horz/i)&&_0x1d65ba[_0x5826aa(0x290)](/vert/i))_0x4c4f33+=_0x186735[_0x5826aa(0xa27)]()?-_0x542360:_0x542360,_0x1a95e2+=_0x186735[_0x5826aa(0xa27)]()?-_0x563cc6:_0x563cc6;else{if(_0x1d65ba['match'](/horz/i))_0x4c4f33+=_0x186735['isActor']()?-_0x542360:_0x542360,_0x1a95e2+=_0x563cc6;else _0x1d65ba[_0x5826aa(0x290)](/vert/i)&&(_0x4c4f33+=_0x542360,_0x1a95e2+=_0x186735[_0x5826aa(0xa27)]()?-_0x563cc6:_0x563cc6);}}_0x186735[_0x5826aa(0x223)](_0x4c4f33,_0x1a95e2,_0x34a00e,_0x315964,_0x2aa094,_0x5dd801),_0x186735[_0x5826aa(0x635)](_0x52d0e4);}if(_0x552add)_0x27f231[_0x5826aa(0x493)](_0x5826aa(0x2a5));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x5e6),_0x2c517f=>{const _0x4908ae=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4908ae(0x204)]())return;VisuMZ[_0x4908ae(0x4cc)](_0x2c517f,_0x2c517f);const _0x11fd0c=VisuMZ[_0x4908ae(0x951)](_0x2c517f[_0x4908ae(0x264)]);let _0x35dbfe=_0x2c517f[_0x4908ae(0xb23)][_0x4908ae(0x290)](/back/i);for(const _0x591fa8 of _0x11fd0c){if(!_0x591fa8)continue;if(_0x2c517f[_0x4908ae(0xb23)][_0x4908ae(0x290)](/rand/i))_0x35dbfe=Math[_0x4908ae(0x7d2)](0x2);_0x591fa8[_0x4908ae(0x4cf)](!!_0x35dbfe);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Movement_FaceJsPoint',_0x2be035=>{const _0xbab8e3=_0x29c7b3;if(!SceneManager[_0xbab8e3(0x429)]())return;if(!$gameSystem[_0xbab8e3(0x204)]())return;VisuMZ[_0xbab8e3(0x4cc)](_0x2be035,_0x2be035);const _0x4beae7=VisuMZ[_0xbab8e3(0x951)](_0x2be035[_0xbab8e3(0x264)]),_0x377d9e=_0x2be035[_0xbab8e3(0x478)];for(const _0x458fb0 of _0x4beae7){if(!_0x458fb0)continue;const _0xcaf7e7=_0x2be035[_0xbab8e3(0x2c4)](_0x458fb0)||{'x':0x0,'y':0x0};let _0x1f6c4d=_0xcaf7e7['x'],_0x4e737c=_0xcaf7e7['y'];_0x458fb0[_0xbab8e3(0x32c)](Math[_0xbab8e3(0x50f)](_0x1f6c4d),Math['round'](_0x4e737c),!!_0x377d9e);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x5a0),_0x370e03=>{const _0x54fdb7=_0x29c7b3;if(!SceneManager[_0x54fdb7(0x429)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x54fdb7(0x4cc)](_0x370e03,_0x370e03);const _0x40b66c=VisuMZ['CreateActionSequenceTargets'](_0x370e03[_0x54fdb7(0x264)]);let _0x2d0e43=_0x370e03[_0x54fdb7(0xbcf)];const _0x194016=_0x370e03[_0x54fdb7(0x478)];for(const _0x342799 of _0x40b66c){if(!_0x342799)continue;let _0x2b9ed6=_0x342799[_0x54fdb7(0xa65)]()[_0x54fdb7(0xa3a)],_0x3a91fc=_0x342799['battler']()[_0x54fdb7(0x488)];if(_0x2d0e43['match'](/home/i))_0x2b9ed6=_0x342799[_0x54fdb7(0xa65)]()['_homeX'],_0x3a91fc=_0x342799[_0x54fdb7(0xa65)]()[_0x54fdb7(0x76e)];else{if(_0x2d0e43['match'](/center/i))_0x2b9ed6=Graphics[_0x54fdb7(0xc0c)]/0x2,_0x3a91fc=Graphics[_0x54fdb7(0x132)]/0x2;else _0x2d0e43['match'](/point (\d+), (\d+)/i)&&(_0x2b9ed6=Number(RegExp['$1']),_0x3a91fc=Number(RegExp['$2']));}_0x342799[_0x54fdb7(0x32c)](Math[_0x54fdb7(0x50f)](_0x2b9ed6),Math[_0x54fdb7(0x50f)](_0x3a91fc),!!_0x194016);}}),PluginManager['registerCommand'](pluginData['name'],_0x29c7b3(0x109),_0x52c602=>{const _0x207670=_0x29c7b3;if(!SceneManager[_0x207670(0x429)]())return;if(!$gameSystem[_0x207670(0x204)]())return;VisuMZ['ConvertParams'](_0x52c602,_0x52c602);const _0x2e43ee=VisuMZ['CreateActionSequenceTargets'](_0x52c602['Targets1']),_0x3f5450=VisuMZ[_0x207670(0x951)](_0x52c602['Targets2']),_0x23079a=_0x3f5450['map'](_0x4611a7=>_0x4611a7&&_0x4611a7[_0x207670(0xa65)]()?_0x4611a7[_0x207670(0xa65)]()[_0x207670(0xa3a)]:0x0)/(_0x3f5450[_0x207670(0xba7)]||0x1),_0x11b429=_0x3f5450[_0x207670(0x8ea)](_0x46937a=>_0x46937a&&_0x46937a[_0x207670(0xa65)]()?_0x46937a['battler']()[_0x207670(0x488)]:0x0)/(_0x3f5450[_0x207670(0xba7)]||0x1),_0x2438c3=_0x52c602[_0x207670(0x478)];for(const _0x1fa9d9 of _0x2e43ee){if(!_0x1fa9d9)continue;_0x1fa9d9[_0x207670(0x32c)](Math[_0x207670(0x50f)](_0x23079a),Math[_0x207670(0x50f)](_0x11b429),!!_0x2438c3);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x9cf),_0x2befd9=>{const _0x35b7ad=_0x29c7b3;if(!SceneManager[_0x35b7ad(0x429)]())return;VisuMZ['ConvertParams'](_0x2befd9,_0x2befd9);const _0x3ec932=$gameTemp[_0x35b7ad(0x180)](),_0x1c08b2=VisuMZ[_0x35b7ad(0x951)](_0x2befd9['Targets']),_0x55e584=_0x2befd9[_0x35b7ad(0x6ee)],_0x3c7a9f=_0x2befd9['Duration'],_0x5f356b=_0x2befd9[_0x35b7ad(0xac1)],_0x46e8be=_0x2befd9[_0x35b7ad(0x217)];if(!_0x3ec932)return;for(const _0x69a9b4 of _0x1c08b2){if(!_0x69a9b4)continue;_0x69a9b4[_0x35b7ad(0x365)](_0x55e584,_0x3c7a9f,_0x5f356b);}if(_0x46e8be)_0x3ec932['setWaitMode'](_0x35b7ad(0xbd3));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x495),_0x487e89=>{const _0x1a4354=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1a4354(0x4cc)](_0x487e89,_0x487e89);const _0x104d95=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x104d95)return;const _0x55807f=VisuMZ['CreateActionSequenceTargets'](_0x487e89[_0x1a4354(0x264)]);for(const _0x3d6758 of _0x55807f){if(!_0x3d6758)continue;_0x3d6758[_0x1a4354(0x336)]();}BattleManager['_subject']&&BattleManager[_0x1a4354(0x215)][_0x1a4354(0xc21)]();if(_0x487e89[_0x1a4354(0x686)])_0x104d95[_0x1a4354(0x493)](_0x1a4354(0x2a5));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x98c),_0x35054f=>{const _0x450377=_0x29c7b3;if(!SceneManager[_0x450377(0x429)]())return;VisuMZ[_0x450377(0x4cc)](_0x35054f,_0x35054f);const _0x56829b=$gameTemp[_0x450377(0x180)](),_0x313337=VisuMZ[_0x450377(0x951)](_0x35054f['Targets']),_0x529d60=_0x35054f[_0x450377(0x6ee)],_0x1f0d9d=_0x35054f['Duration'],_0x1d1a07=_0x35054f['WaitForJump'];if(!_0x56829b)return;for(const _0x321666 of _0x313337){if(!_0x321666)continue;_0x321666[_0x450377(0x4a2)](_0x529d60,_0x1f0d9d);}if(_0x1d1a07)_0x56829b['setWaitMode'](_0x450377(0x3fb));}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0xb89),_0x1065c1=>{const _0x20da14=_0x29c7b3;if(!SceneManager[_0x20da14(0x429)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x20da14(0x4cc)](_0x1065c1,_0x1065c1);const _0x27cb5f=$gameTemp[_0x20da14(0x180)](),_0x2a69b0=VisuMZ[_0x20da14(0x951)](_0x1065c1[_0x20da14(0x264)]),_0x11508f=_0x1065c1[_0x20da14(0x1f5)],_0x549218=_0x1065c1['DistanceX'],_0x473a97=_0x1065c1[_0x20da14(0x4f3)],_0x332014=_0x1065c1[_0x20da14(0x21c)],_0xdb3729=_0x1065c1['FaceDirection'],_0x444d8f=_0x1065c1[_0x20da14(0xac1)],_0x40621b=_0x1065c1[_0x20da14(0x806)],_0x19f45b=_0x1065c1[_0x20da14(0x686)];if(!_0x27cb5f)return;for(const _0x22f5e8 of _0x2a69b0){if(!_0x22f5e8)continue;let _0x34d715=_0x549218,_0x11972b=_0x473a97;if(_0x11508f[_0x20da14(0x290)](/horz/i))_0x34d715*=_0x22f5e8['isActor']()?-0x1:0x1;if(_0x11508f[_0x20da14(0x290)](/vert/i))_0x11972b*=_0x22f5e8[_0x20da14(0xa27)]()?-0x1:0x1;_0x22f5e8[_0x20da14(0x40d)](_0x34d715,_0x11972b,_0x332014,_0xdb3729,_0x444d8f),_0x22f5e8[_0x20da14(0x635)](_0x40621b);}if(_0x19f45b)_0x27cb5f['setWaitMode'](_0x20da14(0x2a5));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x6f1),_0x5bcbbc=>{const _0x38bb59=_0x29c7b3;if(!SceneManager[_0x38bb59(0x429)]())return;if(!$gameSystem[_0x38bb59(0x204)]())return;VisuMZ['ConvertParams'](_0x5bcbbc,_0x5bcbbc);const _0x50cc7b=$gameTemp[_0x38bb59(0x180)](),_0x36934f=VisuMZ[_0x38bb59(0x951)](_0x5bcbbc['Targets']),_0x37ae22=_0x5bcbbc['OffsetAdjust'],_0x4836b1=_0x5bcbbc[_0x38bb59(0x970)],_0x21709a=_0x5bcbbc[_0x38bb59(0x921)],_0x1cc59b=_0x5bcbbc['Duration'],_0x34c3f3=_0x5bcbbc[_0x38bb59(0x607)],_0xe4b947=_0x5bcbbc[_0x38bb59(0xac1)],_0x5795b7=_0x5bcbbc[_0x38bb59(0x806)],_0x4f05b2=_0x5bcbbc[_0x38bb59(0x686)];if(!_0x50cc7b)return;for(const _0x45673e of _0x36934f){if(!_0x45673e)continue;const _0x13ff52=_0x5bcbbc['DestinationJS'](_0x45673e)||{'x':0x0,'y':0x0};let _0x5ba41b=_0x13ff52['x'],_0x42fabe=_0x13ff52['y'];if(_0x37ae22[_0x38bb59(0x290)](/none/i))_0x5ba41b+=_0x4836b1,_0x42fabe+=_0x21709a;else{if(_0x37ae22[_0x38bb59(0x290)](/horz/i)&&_0x37ae22['match'](/vert/i))_0x5ba41b+=_0x45673e[_0x38bb59(0xa27)]()?-_0x4836b1:_0x4836b1,_0x42fabe+=_0x45673e[_0x38bb59(0xa27)]()?-_0x21709a:_0x21709a;else{if(_0x37ae22[_0x38bb59(0x290)](/horz/i))_0x5ba41b+=_0x45673e[_0x38bb59(0xa27)]()?-_0x4836b1:_0x4836b1,_0x42fabe+=_0x21709a;else _0x37ae22[_0x38bb59(0x290)](/vert/i)&&(_0x5ba41b+=_0x4836b1,_0x42fabe+=_0x45673e[_0x38bb59(0xa27)]()?-_0x21709a:_0x21709a);}}_0x45673e[_0x38bb59(0x43c)](_0x5ba41b,_0x42fabe,_0x1cc59b,_0x34c3f3,_0xe4b947,-0x1),_0x45673e[_0x38bb59(0x635)](_0x5795b7);}if(_0x4f05b2)_0x50cc7b[_0x38bb59(0x493)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],'ActSeq_Movement_MoveToPoint',_0x555865=>{const _0x459248=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x459248(0x204)]())return;VisuMZ[_0x459248(0x4cc)](_0x555865,_0x555865);const _0x148f2b=$gameTemp[_0x459248(0x180)](),_0x26e55f=VisuMZ[_0x459248(0x951)](_0x555865['Targets']),_0x3bf583=_0x555865[_0x459248(0x3b6)],_0x5bf962=_0x555865[_0x459248(0x4ec)],_0x415e7b=_0x555865['OffsetX'],_0x35e6ec=_0x555865[_0x459248(0x921)],_0x198001=_0x555865[_0x459248(0x21c)],_0x3cfb35=_0x555865[_0x459248(0x607)],_0x6ac4eb=_0x555865['EasingType'],_0x18bbe6=_0x555865[_0x459248(0x806)],_0x34c840=_0x555865[_0x459248(0x686)];if(!_0x148f2b)return;for(const _0x3ea886 of _0x26e55f){if(!_0x3ea886)continue;let _0x5ac90e=_0x3ea886[_0x459248(0xa65)]()['_baseX'],_0x8b5cfa=_0x3ea886['battler']()[_0x459248(0x488)];if(_0x3bf583[_0x459248(0x290)](/home/i))_0x5ac90e=_0x3ea886[_0x459248(0xa65)]()[_0x459248(0x755)],_0x8b5cfa=_0x3ea886[_0x459248(0xa65)]()[_0x459248(0x76e)];else{if(_0x3bf583['match'](/center/i))_0x5ac90e=Graphics['boxWidth']/0x2,_0x8b5cfa=Graphics['boxHeight']/0x2;else _0x3bf583[_0x459248(0x290)](/point (\d+), (\d+)/i)&&(_0x5ac90e=Number(RegExp['$1']),_0x8b5cfa=Number(RegExp['$2']));}if(_0x5bf962[_0x459248(0x290)](/none/i))_0x5ac90e+=_0x415e7b,_0x8b5cfa+=_0x35e6ec;else{if(_0x5bf962[_0x459248(0x290)](/horz/i)&&_0x5bf962[_0x459248(0x290)](/vert/i))_0x5ac90e+=_0x3ea886['isActor']()?-_0x415e7b:_0x415e7b,_0x8b5cfa+=_0x3ea886[_0x459248(0xa27)]()?-_0x35e6ec:_0x35e6ec;else{if(_0x5bf962[_0x459248(0x290)](/horz/i))_0x5ac90e+=_0x3ea886['isActor']()?-_0x415e7b:_0x415e7b,_0x8b5cfa+=_0x35e6ec;else _0x5bf962[_0x459248(0x290)](/vert/i)&&(_0x5ac90e+=_0x415e7b,_0x8b5cfa+=_0x3ea886[_0x459248(0xa27)]()?-_0x35e6ec:_0x35e6ec);}}_0x3ea886[_0x459248(0x43c)](_0x5ac90e,_0x8b5cfa,_0x198001,_0x3cfb35,_0x6ac4eb,-0x1),_0x3ea886[_0x459248(0x635)](_0x18bbe6);}if(_0x34c840)_0x148f2b[_0x459248(0x493)](_0x459248(0x2a5));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x88b),_0x27773b=>{const _0x7696b2=_0x29c7b3;if(!SceneManager[_0x7696b2(0x429)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x7696b2(0x4cc)](_0x27773b,_0x27773b);const _0x44b65c=$gameTemp[_0x7696b2(0x180)](),_0x4c1c60=VisuMZ[_0x7696b2(0x951)](_0x27773b['Targets1']),_0x1daeaf=VisuMZ[_0x7696b2(0x951)](_0x27773b[_0x7696b2(0x236)]),_0xd626f6=_0x27773b[_0x7696b2(0x465)];let _0x247b4e=_0x27773b[_0x7696b2(0x4b6)];const _0x14fdeb=_0x27773b[_0x7696b2(0x4ec)],_0x24bff5=_0x27773b[_0x7696b2(0x970)],_0x287678=_0x27773b[_0x7696b2(0x921)],_0xaaf59e=_0x27773b['Duration'],_0x198eaa=_0x27773b[_0x7696b2(0x607)],_0x594a4b=_0x27773b['EasingType'],_0x444f05=_0x27773b[_0x7696b2(0x806)],_0x5b77e3=_0x27773b[_0x7696b2(0x686)],_0x5cff97=Math['min'](..._0x1daeaf[_0x7696b2(0x8ea)](_0x22fcf9=>_0x22fcf9[_0x7696b2(0xa65)]()['_baseX']-_0x22fcf9[_0x7696b2(0xa65)]()['mainSpriteWidth']()/0x2)),_0x4c7aca=Math[_0x7696b2(0xbaf)](..._0x1daeaf[_0x7696b2(0x8ea)](_0x5bc5ad=>_0x5bc5ad[_0x7696b2(0xa65)]()[_0x7696b2(0xa3a)]+_0x5bc5ad[_0x7696b2(0xa65)]()[_0x7696b2(0xa7b)]()/0x2)),_0x5bb2bd=Math[_0x7696b2(0xbce)](..._0x1daeaf[_0x7696b2(0x8ea)](_0x556b38=>_0x556b38['battler']()[_0x7696b2(0x488)]-_0x556b38[_0x7696b2(0xa65)]()['mainSpriteHeight']())),_0x287060=Math[_0x7696b2(0xbaf)](..._0x1daeaf['map'](_0x4afef9=>_0x4afef9[_0x7696b2(0xa65)]()['_baseY'])),_0x2aa5e2=_0x1daeaf[_0x7696b2(0x55e)](_0x3ca49=>_0x3ca49['isActor']())[_0x7696b2(0xba7)],_0x4d1ca9=_0x1daeaf['filter'](_0x3466b5=>_0x3466b5[_0x7696b2(0xb3d)]())[_0x7696b2(0xba7)];let _0x4c85c1=0x0,_0x2726a5=0x0;if(_0xd626f6[_0x7696b2(0x290)](/front/i))_0x4c85c1=_0x2aa5e2>=_0x4d1ca9?_0x5cff97:_0x4c7aca;else{if(_0xd626f6[_0x7696b2(0x290)](/middle/i))_0x4c85c1=(_0x5cff97+_0x4c7aca)/0x2,_0x247b4e=-0x1;else _0xd626f6[_0x7696b2(0x290)](/back/i)&&(_0x4c85c1=_0x2aa5e2>=_0x4d1ca9?_0x4c7aca:_0x5cff97);}if(_0xd626f6['match'](/head/i))_0x2726a5=_0x5bb2bd;else{if(_0xd626f6[_0x7696b2(0x290)](/center/i))_0x2726a5=(_0x5bb2bd+_0x287060)/0x2;else _0xd626f6[_0x7696b2(0x290)](/base/i)&&(_0x2726a5=_0x287060);}if(!_0x44b65c)return;for(const _0x2d70d3 of _0x4c1c60){if(!_0x2d70d3)continue;let _0x3569ff=_0x4c85c1,_0x4604d3=_0x2726a5;if(_0x14fdeb[_0x7696b2(0x290)](/none/i))_0x3569ff+=_0x24bff5,_0x4604d3+=_0x287678;else{if(_0x14fdeb[_0x7696b2(0x290)](/horz/i)&&_0x14fdeb[_0x7696b2(0x290)](/vert/i))_0x3569ff+=_0x2d70d3[_0x7696b2(0xa27)]()?-_0x24bff5:_0x24bff5,_0x4604d3+=_0x2d70d3['isActor']()?-_0x287678:_0x287678;else{if(_0x14fdeb[_0x7696b2(0x290)](/horz/i))_0x3569ff+=_0x2d70d3['isActor']()?-_0x24bff5:_0x24bff5,_0x4604d3+=_0x287678;else _0x14fdeb['match'](/vert/i)&&(_0x3569ff+=_0x24bff5,_0x4604d3+=_0x2d70d3[_0x7696b2(0xa27)]()?-_0x287678:_0x287678);}}_0x2d70d3[_0x7696b2(0x43c)](_0x3569ff,_0x4604d3,_0xaaf59e,_0x198eaa,_0x594a4b,_0x247b4e),_0x2d70d3[_0x7696b2(0x635)](_0x444f05);}if(_0x5b77e3)_0x44b65c[_0x7696b2(0x493)]('battleMove');}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Movement_Opacity',_0x54fbbb=>{const _0x16eef1=_0x29c7b3;if(!SceneManager[_0x16eef1(0x429)]())return;VisuMZ[_0x16eef1(0x4cc)](_0x54fbbb,_0x54fbbb);const _0x99a000=$gameTemp['getLastPluginCommandInterpreter'](),_0x2bbb14=VisuMZ[_0x16eef1(0x951)](_0x54fbbb[_0x16eef1(0x264)]),_0x5b41db=_0x54fbbb[_0x16eef1(0xc18)],_0x411d0d=_0x54fbbb['Duration'],_0x3c8e65=_0x54fbbb[_0x16eef1(0xac1)],_0x330560=_0x54fbbb[_0x16eef1(0x144)];if(!_0x99a000)return;for(const _0x37f5a9 of _0x2bbb14){if(!_0x37f5a9)continue;_0x37f5a9[_0x16eef1(0x6a4)](_0x5b41db,_0x411d0d,_0x3c8e65);}if(_0x330560)_0x99a000[_0x16eef1(0x493)](_0x16eef1(0x2de));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Movement_Scale',_0x44f0f9=>{const _0xc7efd3=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xc7efd3(0x4cc)](_0x44f0f9,_0x44f0f9);const _0x8d2d2a=$gameTemp[_0xc7efd3(0x180)](),_0xb0d810=VisuMZ['CreateActionSequenceTargets'](_0x44f0f9[_0xc7efd3(0x264)]),_0x1c5ea4=_0x44f0f9[_0xc7efd3(0x312)],_0x527c57=_0x44f0f9[_0xc7efd3(0x906)],_0x1d359a=_0x44f0f9[_0xc7efd3(0x21c)],_0x530f00=_0x44f0f9[_0xc7efd3(0xac1)],_0x31d2d9=_0x44f0f9['WaitForScale'];if(!_0x8d2d2a)return;for(const _0x1c5afb of _0xb0d810){if(!_0x1c5afb)continue;_0x1c5afb[_0xc7efd3(0xae4)](_0x1c5ea4,_0x527c57,_0x1d359a,_0x530f00);}if(_0x31d2d9)_0x8d2d2a[_0xc7efd3(0x493)](_0xc7efd3(0x136));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xaec),_0x45f102=>{const _0x48382e=_0x29c7b3;if(!SceneManager[_0x48382e(0x429)]())return;VisuMZ['ConvertParams'](_0x45f102,_0x45f102);const _0xd3092d=$gameTemp[_0x48382e(0x180)](),_0xf78236=VisuMZ[_0x48382e(0x951)](_0x45f102[_0x48382e(0x264)]),_0x1434db=_0x45f102['SkewX'],_0x1970b9=_0x45f102[_0x48382e(0x405)],_0x5049a2=_0x45f102['Duration'],_0x315729=_0x45f102[_0x48382e(0xac1)],_0x3f7cbd=_0x45f102[_0x48382e(0x116)];if(!_0xd3092d)return;for(const _0x262570 of _0xf78236){if(!_0x262570)continue;_0x262570[_0x48382e(0x386)](_0x1434db,_0x1970b9,_0x5049a2,_0x315729);}if(_0x3f7cbd)_0xd3092d[_0x48382e(0x493)]('battleSpriteSkew');}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x7bd),_0xf2f68b=>{const _0x35a566=_0x29c7b3;if(!SceneManager[_0x35a566(0x429)]())return;VisuMZ[_0x35a566(0x4cc)](_0xf2f68b,_0xf2f68b);const _0x2807c4=$gameTemp[_0x35a566(0x180)](),_0x25f5d6=VisuMZ[_0x35a566(0x951)](_0xf2f68b['Targets']),_0x4fa685=_0xf2f68b[_0x35a566(0x3cf)],_0x2d24a4=_0xf2f68b[_0x35a566(0x21c)],_0x3ca39f=_0xf2f68b['EasingType'],_0x4e57f9=_0xf2f68b[_0x35a566(0x8c7)],_0x34a495=_0xf2f68b['WaitForSpin'];if(!_0x2807c4)return;for(const _0x18a3b8 of _0x25f5d6){if(!_0x18a3b8)continue;_0x18a3b8['spinBattler'](_0x4fa685,_0x2d24a4,_0x3ca39f,_0x4e57f9);}if(_0x34a495)_0x2807c4['setWaitMode']('battleSpin');}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x5aa),_0x36bd7e=>{const _0x15ff3b=_0x29c7b3;if(!SceneManager[_0x15ff3b(0x429)]())return;const _0x2f1659=$gameTemp[_0x15ff3b(0x180)]();if(!_0x2f1659)return;_0x2f1659[_0x15ff3b(0x493)](_0x15ff3b(0xbd3));}),PluginManager['registerCommand'](pluginData['name'],_0x29c7b3(0x3f3),_0x3b89fd=>{const _0x5f29e7=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;const _0x3a297c=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3a297c)return;_0x3a297c[_0x5f29e7(0x493)]('battleJump');}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x99e),_0x52b501=>{const _0x4abb0f=_0x29c7b3;if(!SceneManager[_0x4abb0f(0x429)]())return;const _0x14ed19=$gameTemp[_0x4abb0f(0x180)]();if(!_0x14ed19)return;_0x14ed19[_0x4abb0f(0x493)](_0x4abb0f(0x2a5));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x25c),_0x505347=>{const _0x26758d=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;const _0x11258e=$gameTemp[_0x26758d(0x180)]();if(!_0x11258e)return;_0x11258e['setWaitMode'](_0x26758d(0x2de));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Movement_WaitForScale',_0x5dfd66=>{const _0x335972=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;const _0x236020=$gameTemp[_0x335972(0x180)]();if(!_0x236020)return;_0x236020[_0x335972(0x493)](_0x335972(0x136));}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x7fc),_0x3fd96d=>{const _0x56318d=_0x29c7b3;if(!SceneManager[_0x56318d(0x429)]())return;const _0x4b36bc=$gameTemp[_0x56318d(0x180)]();if(!_0x4b36bc)return;_0x4b36bc[_0x56318d(0x493)](_0x56318d(0xa07));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xc0e),_0x52997f=>{const _0x1b39c1=_0x29c7b3;if(!SceneManager[_0x1b39c1(0x429)]())return;const _0x35b15a=$gameTemp[_0x1b39c1(0x180)]();if(!_0x35b15a)return;_0x35b15a['setWaitMode'](_0x1b39c1(0xabd));}),VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x4ee)]=function(){const _0x1a3cd5=_0x29c7b3;if(!Imported[_0x1a3cd5(0x176)])return;if(VisuMZ[_0x1a3cd5(0x4ab)][_0x1a3cd5(0x65e)]<1.08){let _0x457005='';_0x457005+='VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20',_0x457005+=_0x1a3cd5(0x1c6),alert(_0x457005),SceneManager[_0x1a3cd5(0x99d)]();}},PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x602),_0x5aedb9=>{const _0x52d7fe=_0x29c7b3;if(!SceneManager[_0x52d7fe(0x429)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x52d7fe(0x4cc)](_0x5aedb9,_0x5aedb9),VisuMZ['BattleCore'][_0x52d7fe(0x4ee)]();const _0x3fe8a6=$gameTemp[_0x52d7fe(0x180)](),_0x1b3020=_0x5aedb9[_0x52d7fe(0xab0)];if(!_0x3fe8a6)return;const _0x3b2c67=BattleManager['_spriteset'];if(!_0x3b2c67)return;_0x3b2c67['createActionSequenceProjectile'](_0x5aedb9);if(_0x1b3020)_0x3fe8a6[_0x52d7fe(0x493)]('battleProjectiles');}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xbf5),_0x3f57da=>{const _0x480c17=_0x29c7b3;if(!SceneManager[_0x480c17(0x429)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x480c17(0x4cc)](_0x3f57da,_0x3f57da),VisuMZ['BattleCore'][_0x480c17(0x4ee)]();const _0x322b91=$gameTemp[_0x480c17(0x180)](),_0x4d559f=_0x3f57da['WaitForProjectile'];if(!_0x322b91)return;const _0x11ac97=BattleManager[_0x480c17(0x690)];if(!_0x11ac97)return;_0x11ac97[_0x480c17(0x496)](_0x3f57da);if(_0x4d559f)_0x322b91['setWaitMode'](_0x480c17(0x151));}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0x309),_0x3d7cb8=>{const _0x20256e=_0x29c7b3;if(!SceneManager[_0x20256e(0x429)]())return;if(!Imported[_0x20256e(0x176)])return;VisuMZ[_0x20256e(0x4cc)](_0x3d7cb8,_0x3d7cb8),VisuMZ[_0x20256e(0x2e2)][_0x20256e(0x4ee)]();const _0x5902f=$gameTemp[_0x20256e(0x180)](),_0x99ad3b=_0x3d7cb8[_0x20256e(0xab0)];if(!_0x5902f)return;const _0x6618f8=BattleManager['_spriteset'];if(!_0x6618f8)return;_0x6618f8[_0x20256e(0x496)](_0x3d7cb8);if(_0x99ad3b)_0x5902f[_0x20256e(0x493)](_0x20256e(0x151));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_ChangeSkew',_0x476978=>{const _0x2f12aa=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2f12aa(0x92c)])return;VisuMZ[_0x2f12aa(0x4cc)](_0x476978,_0x476978);const _0x2dff01=$gameTemp[_0x2f12aa(0x180)](),_0x11b668=_0x476978[_0x2f12aa(0x116)];if(!_0x2dff01)return;$gameScreen[_0x2f12aa(0x122)](_0x476978[_0x2f12aa(0x68f)],_0x476978[_0x2f12aa(0x405)],_0x476978[_0x2f12aa(0x21c)],_0x476978[_0x2f12aa(0xac1)]);if(_0x11b668)_0x2dff01['setWaitMode'](_0x2f12aa(0x5ec));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Skew_Reset',_0x211395=>{const _0x211415=_0x29c7b3;if(!SceneManager[_0x211415(0x429)]())return;if(!Imported[_0x211415(0x92c)])return;VisuMZ[_0x211415(0x4cc)](_0x211395,_0x211395);const _0x5d77e1=$gameTemp[_0x211415(0x180)](),_0x63741a=_0x211395['WaitForSkew'];if(!_0x5d77e1)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x211395['Duration'],_0x211395[_0x211415(0xac1)]);if(_0x63741a)_0x5d77e1[_0x211415(0x493)]('battleSkew');}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x34d),_0x5363c8=>{const _0x54509d=_0x29c7b3;if(!SceneManager[_0x54509d(0x429)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x175743=$gameTemp[_0x54509d(0x180)]();if(!_0x175743)return;_0x175743[_0x54509d(0x493)]('battleSkew');}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xbad),_0x572170=>{const _0x4ddc70=_0x29c7b3;if(!SceneManager[_0x4ddc70(0x429)]())return;VisuMZ[_0x4ddc70(0x4cc)](_0x572170,_0x572170);const _0x2036d9=$gameTemp[_0x4ddc70(0x180)](),_0x6cf0c7=_0x572170['Index'],_0x29e37c=_0x572170[_0x4ddc70(0x249)];if(!_0x2036d9)return;BattleManager['_targetIndex']=_0x6cf0c7,BattleManager[_0x4ddc70(0x424)]=BattleManager['_allTargets']?BattleManager[_0x4ddc70(0x5e1)][BattleManager[_0x4ddc70(0x717)]]||null:null;if(window[_0x4ddc70(0x9d3)])BattleManager[_0x4ddc70(0x5b0)]();BattleManager[_0x4ddc70(0x424)]&&_0x29e37c[_0x4ddc70(0x36b)]()[_0x4ddc70(0x89a)]()!==_0x4ddc70(0x44d)&&_0x2036d9['command119']([_0x29e37c]);}),PluginManager[_0x29c7b3(0xa4c)](pluginData['name'],_0x29c7b3(0xab5),_0x449c2c=>{const _0x201af6=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x201af6(0x4cc)](_0x449c2c,_0x449c2c);const _0x33dc80=$gameTemp[_0x201af6(0x180)](),_0x5e0f0f=_0x449c2c[_0x201af6(0x249)];if(!_0x33dc80)return;BattleManager[_0x201af6(0x717)]++,BattleManager[_0x201af6(0x424)]=BattleManager[_0x201af6(0x5e1)][BattleManager[_0x201af6(0x717)]]||null;if(window[_0x201af6(0x9d3)])BattleManager[_0x201af6(0x5b0)]();BattleManager[_0x201af6(0x424)]&&_0x5e0f0f[_0x201af6(0x36b)]()[_0x201af6(0x89a)]()!==_0x201af6(0x44d)&&_0x33dc80[_0x201af6(0xa0e)]([_0x5e0f0f]);}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x3ed),_0x13aa71=>{const _0x914d76=_0x29c7b3;if(!SceneManager[_0x914d76(0x429)]())return;VisuMZ[_0x914d76(0x4cc)](_0x13aa71,_0x13aa71);const _0x9a6634=$gameTemp[_0x914d76(0x180)](),_0x3a6fb4=_0x13aa71[_0x914d76(0x249)];if(!_0x9a6634)return;BattleManager['_targetIndex']--,BattleManager[_0x914d76(0x424)]=BattleManager['_allTargets'][BattleManager[_0x914d76(0x717)]]||null;if(window['$target'])BattleManager['updateBattleVariables']();BattleManager['_target']&&_0x3a6fb4[_0x914d76(0x36b)]()[_0x914d76(0x89a)]()!==_0x914d76(0x44d)&&_0x9a6634[_0x914d76(0xa0e)]([_0x3a6fb4]);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xbb7),_0x285a85=>{const _0x4783ce=_0x29c7b3;if(!SceneManager[_0x4783ce(0x429)]())return;VisuMZ[_0x4783ce(0x4cc)](_0x285a85,_0x285a85);const _0x8b54d3=$gameTemp['getLastPluginCommandInterpreter'](),_0x4fe573=_0x285a85[_0x4783ce(0xa47)],_0x4d91bb=_0x285a85[_0x4783ce(0x249)];if(!_0x8b54d3)return;const _0x359c41=BattleManager[_0x4783ce(0x717)];for(;;){BattleManager[_0x4783ce(0x717)]=Math[_0x4783ce(0x7d2)](BattleManager[_0x4783ce(0x5e1)][_0x4783ce(0xba7)]);if(!_0x4fe573)break;if(BattleManager['_targetIndex']!==_0x359c41)break;if(BattleManager['_allTargets'][_0x4783ce(0xba7)]<=0x1){BattleManager['_targetIndex']=0x0;break;}}BattleManager[_0x4783ce(0x424)]=BattleManager[_0x4783ce(0x5e1)][BattleManager[_0x4783ce(0x717)]]||null;if(window[_0x4783ce(0x9d3)])BattleManager[_0x4783ce(0x5b0)]();BattleManager[_0x4783ce(0x424)]&&_0x4d91bb[_0x4783ce(0x36b)]()[_0x4783ce(0x89a)]()!==_0x4783ce(0x44d)&&_0x8b54d3[_0x4783ce(0xa0e)]([_0x4d91bb]);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x111),_0x584074=>{const _0x580317=_0x29c7b3;if(!SceneManager[_0x580317(0x429)]())return;if(!Imported[_0x580317(0x86b)])return;if(!ConfigManager[_0x580317(0x2db)])return;VisuMZ[_0x580317(0x4cc)](_0x584074,_0x584074);const _0x41a706=VisuMZ[_0x580317(0x951)](_0x584074[_0x580317(0x264)]);let _0x5a0da9=_0x584074[_0x580317(0xb98)]||'';for(const _0x20978f of _0x41a706){if(!_0x20978f)continue;_0x20978f['playBattleVoice'](_0x5a0da9);}}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x400),_0x44a2b7=>{const _0x5da0d7=_0x29c7b3;if(!SceneManager[_0x5da0d7(0x429)]())return;if(!Imported['VisuMZ_3_BattleVoices'])return;if(!ConfigManager[_0x5da0d7(0x2db)])return;VisuMZ['ConvertParams'](_0x44a2b7,_0x44a2b7);const _0x32b9a2=VisuMZ[_0x5da0d7(0x951)](_0x44a2b7[_0x5da0d7(0x264)]);let _0x1bbc94=(_0x44a2b7[_0x5da0d7(0x439)]||'')+(_0x44a2b7[_0x5da0d7(0x2ad)]||'');for(const _0x3373d0 of _0x32b9a2){if(!_0x3373d0)continue;_0x3373d0[_0x5da0d7(0xb13)](_0x1bbc94);}}),PluginManager['registerCommand'](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0xb3e),_0x688d72=>{const _0x5d9f6a=_0x29c7b3;if(!SceneManager[_0x5d9f6a(0x429)]())return;VisuMZ[_0x5d9f6a(0x4cc)](_0x688d72,_0x688d72);const _0x397995=VisuMZ[_0x5d9f6a(0x951)](_0x688d72[_0x5d9f6a(0x264)]);for(const _0x3c0a0c of _0x397995){if(!_0x3c0a0c)continue;if(!_0x3c0a0c[_0x5d9f6a(0xa27)]())continue;_0x3c0a0c[_0x5d9f6a(0xad8)]();}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Weapon_NextActiveWeapon',_0x4f0e7b=>{const _0x226670=_0x29c7b3;if(!SceneManager[_0x226670(0x429)]())return;VisuMZ['ConvertParams'](_0x4f0e7b,_0x4f0e7b);const _0x228f31=$gameTemp[_0x226670(0x180)]();let _0x349c7a=![];const _0x2f6ae6=_0x4f0e7b[_0x226670(0x249)],_0x2055d7=VisuMZ['CreateActionSequenceTargets'](_0x4f0e7b[_0x226670(0x264)]);for(const _0x1e618b of _0x2055d7){if(!_0x1e618b)continue;if(!_0x1e618b['isActor']())continue;_0x1e618b[_0x226670(0x733)](),_0x1e618b[_0x226670(0x87f)]()[_0x226670(0xba7)]>0x0?_0x349c7a=!![]:_0x1e618b['clearActiveWeaponSlot']();}_0x349c7a&&_0x2f6ae6[_0x226670(0x36b)]()[_0x226670(0x89a)]()!=='UNTITLED'&&_0x228f31['command119']([_0x2f6ae6]);}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x23f),_0x2b5147=>{const _0xc469b=_0x29c7b3;if(!SceneManager[_0xc469b(0x429)]())return;VisuMZ[_0xc469b(0x4cc)](_0x2b5147,_0x2b5147);let _0x178573=_0x2b5147[_0xc469b(0x99f)];_0x178573--,_0x178573=Math['max'](_0x178573,0x0);const _0xabaa39=VisuMZ['CreateActionSequenceTargets'](_0x2b5147[_0xc469b(0x264)]);for(const _0x10e1ee of _0xabaa39){if(!_0x10e1ee)continue;if(!_0x10e1ee['isActor']())continue;_0x10e1ee[_0xc469b(0x9d0)](_0x178573);}}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x5f3),_0x4be3a7=>{const _0x3c9091=_0x29c7b3;if(!SceneManager[_0x3c9091(0x429)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x4be3a7,_0x4be3a7);const _0x49d6aa=$gameTemp[_0x3c9091(0x180)](),_0x55c36f=_0x4be3a7['WaitForZoom'];if(!_0x49d6aa)return;$gameScreen[_0x3c9091(0x71a)](_0x4be3a7[_0x3c9091(0xba8)],_0x4be3a7['Duration'],_0x4be3a7[_0x3c9091(0xac1)]);if(_0x55c36f)_0x49d6aa['setWaitMode'](_0x3c9091(0x760));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],'ActSeq_Zoom_Reset',_0x57a3a2=>{const _0x31f3ba=_0x29c7b3;if(!SceneManager[_0x31f3ba(0x429)]())return;if(!Imported[_0x31f3ba(0x92c)])return;VisuMZ[_0x31f3ba(0x4cc)](_0x57a3a2,_0x57a3a2);const _0x50e9c8=$gameTemp[_0x31f3ba(0x180)](),_0x5798fb=_0x57a3a2[_0x31f3ba(0x748)];if(!_0x50e9c8)return;$gameScreen[_0x31f3ba(0x71a)](0x1,_0x57a3a2[_0x31f3ba(0x21c)],_0x57a3a2[_0x31f3ba(0xac1)]);if(_0x5798fb)_0x50e9c8[_0x31f3ba(0x493)](_0x31f3ba(0x760));}),PluginManager[_0x29c7b3(0xa4c)](pluginData[_0x29c7b3(0x161)],_0x29c7b3(0x19a),_0x4b146a=>{const _0x154817=_0x29c7b3;if(!SceneManager[_0x154817(0x429)]())return;if(!Imported[_0x154817(0x92c)])return;const _0x5faa55=$gameTemp[_0x154817(0x180)]();if(!_0x5faa55)return;_0x5faa55['setWaitMode']('battleZoom');}),VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x334)]=Scene_Boot[_0x29c7b3(0xc03)]['onDatabaseLoaded'],Scene_Boot[_0x29c7b3(0xc03)][_0x29c7b3(0xc20)]=function(){const _0x2e3438=_0x29c7b3;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x2e3438(0x51e)](),this[_0x2e3438(0x34a)](),this[_0x2e3438(0x432)](),VisuMZ['BattleCore']['Scene_Boot_onDatabaseLoaded'][_0x2e3438(0x8d6)](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x2e3438(0x828)](),this[_0x2e3438(0x359)](),this[_0x2e3438(0x4e0)]();},Scene_Boot[_0x29c7b3(0xc03)]['process_VisuMZ_BattleCore_Notetags']=function(){const _0x538f9e=_0x29c7b3;if(VisuMZ[_0x538f9e(0x4d2)])return;this[_0x538f9e(0x6da)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x538f9e(0x112)]();},Scene_Boot[_0x29c7b3(0xc03)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x7da604=_0x29c7b3,_0x149e63=$dataSystem['weaponTypes']['length'];for(let _0x5e195f=0x0;_0x5e195f<_0x149e63;_0x5e195f++){const _0x427187=$dataSystem[_0x7da604(0x9e0)][_0x5e195f];if(_0x427187)continue;$dataSystem['attackMotions'][_0x5e195f]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x29c7b3(0xc03)][_0x29c7b3(0x51e)]=function(){const _0x2b05b4=_0x29c7b3,_0x37891d=VisuMZ[_0x2b05b4(0x2e2)][_0x2b05b4(0xc14)];_0x37891d[_0x2b05b4(0x9c7)][_0x2b05b4(0x13e)]===undefined&&(_0x37891d['Damage'][_0x2b05b4(0x13e)]=_0x2b05b4(0x60c)),_0x37891d[_0x2b05b4(0x953)][_0x2b05b4(0x8a0)]===undefined&&(_0x37891d[_0x2b05b4(0x953)][_0x2b05b4(0x8a0)]=![]),_0x37891d[_0x2b05b4(0xac6)][_0x2b05b4(0x8a0)]===undefined&&(_0x37891d['Enemy']['SmoothImage']=!![]),_0x37891d['Actor'][_0x2b05b4(0x563)]===undefined&&(_0x37891d[_0x2b05b4(0x953)][_0x2b05b4(0x563)]=![]),_0x37891d[_0x2b05b4(0x953)][_0x2b05b4(0x17f)]===undefined&&(_0x37891d[_0x2b05b4(0x953)]['PrioritySortActors']=!![]);},VisuMZ[_0x29c7b3(0xbbe)]={},Scene_Boot['prototype'][_0x29c7b3(0x34a)]=function(){const _0x5b8025=_0x29c7b3;for(const _0x5e4d52 of VisuMZ[_0x5b8025(0x2e2)]['Settings']['Damage'][_0x5b8025(0x18f)]){if(!_0x5e4d52)continue;const _0x2254f4=_0x5e4d52[_0x5b8025(0x846)][_0x5b8025(0x36b)]()[_0x5b8025(0x89a)]();VisuMZ['DamageStyles'][_0x2254f4]=_0x5e4d52;}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x1f2)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x29c7b3(0xc03)][_0x29c7b3(0x432)]=function(){const _0x2d4f47=_0x29c7b3,_0x4dd9e4=VisuMZ[_0x2d4f47(0x2e2)]['RegExp'],_0x50f0bd=_0x2d4f47(0x1a5),_0xa60c89=[[_0x2d4f47(0x696),_0x2d4f47(0xba6)],['Post',_0x2d4f47(0x66b)]],_0x45270b=[[_0x2d4f47(0x14b),'JS\x20%1APPLY\x20%2'],[_0x2d4f47(0x55b),_0x2d4f47(0xbb2)]],_0x5dd64b=[['',''],[_0x2d4f47(0x10a),_0x2d4f47(0xa7e)],[_0x2d4f47(0xa51),'AS\x20TARGET']];for(const _0x2f32b1 of _0x45270b){for(const _0x4a249b of _0x5dd64b){for(const _0x1d1282 of _0xa60c89){const _0x32571c=_0x2f32b1[0x0]['format'](_0x1d1282[0x0],_0x4a249b[0x0]),_0x39b586=_0x2f32b1[0x1][_0x2d4f47(0x77d)](_0x1d1282[0x1],_0x4a249b[0x1])[_0x2d4f47(0x89a)](),_0x4d6f18=new RegExp(_0x50f0bd[_0x2d4f47(0x77d)](_0x39b586),'i');_0x4dd9e4[_0x32571c]=_0x4d6f18;}}}const _0x193499=[['%1StartActionJS',_0x2d4f47(0x632)],['%1EndActionJS','JS\x20%1END\x20ACTION']];for(const _0x52add4 of _0x193499){for(const _0x5cb4b2 of _0xa60c89){const _0x28ca8b=_0x52add4[0x0]['format'](_0x5cb4b2[0x0]),_0xab17dd=_0x52add4[0x1][_0x2d4f47(0x77d)](_0x5cb4b2[0x1]),_0x27ec22=new RegExp(_0x50f0bd[_0x2d4f47(0x77d)](_0xab17dd),'i');_0x4dd9e4[_0x28ca8b]=_0x27ec22;}}const _0x266d56=[['%1StartBattleJS',_0x2d4f47(0x87c)],[_0x2d4f47(0x20e),'JS\x20%1END\x20BATTLE'],[_0x2d4f47(0x2a3),_0x2d4f47(0xa09)],[_0x2d4f47(0xc08),_0x2d4f47(0x216)],['EscapeSuccessJS',_0x2d4f47(0xa82)],[_0x2d4f47(0x936),_0x2d4f47(0x9cb)],[_0x2d4f47(0xa3d),_0x2d4f47(0xbae)],[_0x2d4f47(0x5e4),_0x2d4f47(0x5da)],[_0x2d4f47(0x593),_0x2d4f47(0x731)]];for(const _0x45bf2c of _0x266d56){for(const _0x4184e7 of _0xa60c89){const _0x4c32c9=_0x45bf2c[0x0]['format'](_0x4184e7[0x0]),_0x41ac27=_0x45bf2c[0x1][_0x2d4f47(0x77d)](_0x4184e7[0x1]),_0x4240df=new RegExp(_0x50f0bd[_0x2d4f47(0x77d)](_0x41ac27),'i');_0x4dd9e4[_0x4c32c9]=_0x4240df;}}},Scene_Boot[_0x29c7b3(0xc03)][_0x29c7b3(0x6da)]=function(){const _0x3f3470=_0x29c7b3,_0x3d6cec=$dataSkills[_0x3f3470(0xaaf)]($dataItems);for(const _0x1b4ce4 of _0x3d6cec){if(!_0x1b4ce4)continue;VisuMZ[_0x3f3470(0x2e2)][_0x3f3470(0x2f6)](_0x1b4ce4);}},Scene_Boot[_0x29c7b3(0xc03)][_0x29c7b3(0x74c)]=function(){const _0x56a280=_0x29c7b3,_0x51292=$dataActors[_0x56a280(0xaaf)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x586890 of _0x51292){if(!_0x586890)continue;VisuMZ[_0x56a280(0x2e2)]['Parse_Notetags_TraitObjects'](_0x586890),_0x586890[_0x56a280(0xc16)]!==undefined&&VisuMZ['BattleCore']['Parse_Notetags_HelpDescription'](_0x586890);}},Scene_Boot[_0x29c7b3(0xc03)][_0x29c7b3(0x828)]=function(){const _0x4230fc=_0x29c7b3,_0x3d3b75=VisuMZ[_0x4230fc(0x2e2)][_0x4230fc(0xc14)][_0x4230fc(0x9c6)][_0x4230fc(0x782)],_0x2ffe4d=[];for(const _0x2310d9 of _0x3d3b75){const _0xffd82f=$dataTroops[_0x2310d9];if(_0xffd82f)_0x2ffe4d[_0x4230fc(0x13a)](JsonEx['makeDeepCopy'](_0xffd82f));}for(const _0x1d95e0 of $dataTroops){if(!_0x1d95e0)continue;for(const _0x28ddd8 of _0x2ffe4d){if(_0x28ddd8['id']===_0x1d95e0['id'])continue;_0x1d95e0[_0x4230fc(0x251)]=_0x1d95e0['pages'][_0x4230fc(0xaaf)](_0x28ddd8['pages']);}}},Scene_Boot[_0x29c7b3(0xc03)]['process_VisuMZ_BattleCore_PreBattleCommonEvent']=function(){const _0x17e0e2=_0x29c7b3,_0x5da5d9=VisuMZ[_0x17e0e2(0x2e2)]['Settings'][_0x17e0e2(0x9c6)];if(_0x5da5d9['BattleStartEvent']>0x0&&$dataCommonEvents[_0x5da5d9[_0x17e0e2(0xac9)]]){const _0x2479ab=$dataCommonEvents[_0x5da5d9[_0x17e0e2(0xac9)]],_0x4f5c57=_0x2479ab[_0x17e0e2(0x72f)][_0x17e0e2(0xba7)]-0x2,_0x1e7aa9=_0x2479ab[_0x17e0e2(0x72f)][_0x4f5c57];if(_0x1e7aa9&&_0x1e7aa9[_0x17e0e2(0x1ee)]!==0xe6){const _0x2c03ce={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x4cbfed=_0x2479ab[_0x17e0e2(0x72f)][_0x17e0e2(0x7bc)]();_0x2479ab[_0x17e0e2(0x72f)][_0x17e0e2(0x5ab)](_0x2c03ce),_0x2479ab[_0x17e0e2(0x72f)][_0x17e0e2(0x5ab)](_0x4cbfed);}}},Scene_Boot['prototype'][_0x29c7b3(0x4e0)]=function(){const _0x37102d=_0x29c7b3;VisuMZ[_0x37102d(0x2e2)][_0x37102d(0xae5)](),VisuMZ[_0x37102d(0x2e2)][_0x37102d(0x53f)]($dataSkills),VisuMZ[_0x37102d(0x2e2)][_0x37102d(0x53f)]($dataItems);},VisuMZ['BattleCore'][_0x29c7b3(0xae5)]=function(){const _0x3764a7=_0x29c7b3;VisuMZ[_0x3764a7(0x2e2)][_0x3764a7(0x56f)]={};for(const _0x1be8a7 of $dataCommonEvents){if(!_0x1be8a7)continue;if(_0x1be8a7[_0x3764a7(0x161)][_0x3764a7(0x290)](/\[(.*)\]/i)){let _0x5edbbe=String(RegExp['$1'])['replace'](/,/g,'')[_0x3764a7(0x36b)]()[_0x3764a7(0x89a)]();VisuMZ[_0x3764a7(0x2e2)][_0x3764a7(0x56f)][_0x5edbbe]=_0x1be8a7['id'];}}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x53f)]=function(_0xe84474){const _0x324617=_0x29c7b3;for(const _0x4d2104 of _0xe84474){if(!_0x4d2104)continue;VisuMZ[_0x324617(0x2e2)]['BindCommonEventKeysForObj'](_0x4d2104);}},VisuMZ[_0x29c7b3(0x2e2)]['BindCommonEventKeysForObj']=function(_0x340951){const _0x74f8b9=_0x29c7b3;if(!_0x340951)return;if(!_0x340951[_0x74f8b9(0xb59)])return;VisuMZ[_0x74f8b9(0x2e2)]['_commonEventKey']=VisuMZ[_0x74f8b9(0x2e2)][_0x74f8b9(0x56f)]||{};const _0x31d923=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x513bad=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x3f415b=[];const _0x4c826a=_0x340951[_0x74f8b9(0x124)][_0x74f8b9(0x290)](_0x31d923);if(_0x4c826a){for(const _0x3a12c9 of _0x4c826a){_0x3a12c9['match'](_0x31d923);const _0x2f425f=String(RegExp['$1'])[_0x74f8b9(0xb3b)](',')[_0x74f8b9(0x8ea)](_0x1ed952=>String(_0x1ed952)[_0x74f8b9(0x36b)]()[_0x74f8b9(0x89a)]());_0x3f415b=_0x3f415b[_0x74f8b9(0xaaf)](_0x2f425f);}!_0x340951['note']['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x340951[_0x74f8b9(0x124)]+=_0x74f8b9(0xc2d));;}if(_0x340951[_0x74f8b9(0x124)][_0x74f8b9(0x290)](_0x513bad)){const _0x1cf655=String(RegExp['$1'])[_0x74f8b9(0xb3b)](/[\r\n]+/)[_0x74f8b9(0x8ea)](_0x41e4d9=>String(_0x41e4d9)[_0x74f8b9(0x36b)]()[_0x74f8b9(0x89a)]());_0x3f415b=_0x3f415b[_0x74f8b9(0xaaf)](_0x1cf655);!_0x340951[_0x74f8b9(0x124)][_0x74f8b9(0x290)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x340951[_0x74f8b9(0x124)]+=_0x74f8b9(0xc2d));;}for(const _0x4405c5 of _0x3f415b){if(VisuMZ['BattleCore'][_0x74f8b9(0x56f)][_0x4405c5]){const _0xb18af3=VisuMZ[_0x74f8b9(0x2e2)][_0x74f8b9(0x56f)][_0x4405c5],_0x41c391={'code':0x2c,'dataId':_0xb18af3,'value1':0x1,'value2':0x0};_0x340951[_0x74f8b9(0xb59)][_0x74f8b9(0x13a)](_0x41c391);}}},Scene_Boot[_0x29c7b3(0xc03)][_0x29c7b3(0x112)]=function(){const _0x3b4448=_0x29c7b3,_0x394bd6=$dataSkills['concat']($dataItems);for(const _0x29f66d of _0x394bd6){if(!_0x29f66d)continue;VisuMZ[_0x3b4448(0x2e2)]['Parse_Notetags_Targets'](_0x29f66d);}},VisuMZ[_0x29c7b3(0x2e2)]['ParseActorNotetags']=VisuMZ[_0x29c7b3(0x9b2)],VisuMZ[_0x29c7b3(0x9b2)]=function(_0x24bf20){const _0x42d294=_0x29c7b3;VisuMZ[_0x42d294(0x2e2)][_0x42d294(0x9b2)]&&VisuMZ[_0x42d294(0x2e2)][_0x42d294(0x9b2)][_0x42d294(0x8d6)](this,_0x24bf20),VisuMZ[_0x42d294(0x2e2)][_0x42d294(0x721)](_0x24bf20);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xaf4)]=VisuMZ[_0x29c7b3(0xaf4)],VisuMZ[_0x29c7b3(0xaf4)]=function(_0x52e2e6){const _0x35875b=_0x29c7b3;VisuMZ[_0x35875b(0x2e2)][_0x35875b(0xaf4)]&&VisuMZ[_0x35875b(0x2e2)][_0x35875b(0xaf4)][_0x35875b(0x8d6)](this,_0x52e2e6),VisuMZ[_0x35875b(0x2e2)][_0x35875b(0x721)](_0x52e2e6);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x458)]=VisuMZ[_0x29c7b3(0x458)],VisuMZ[_0x29c7b3(0x458)]=function(_0x3d63ab){const _0x216b5e=_0x29c7b3;VisuMZ[_0x216b5e(0x2e2)]['ParseSkillNotetags']&&VisuMZ['BattleCore'][_0x216b5e(0x458)][_0x216b5e(0x8d6)](this,_0x3d63ab),VisuMZ[_0x216b5e(0x2e2)]['Parse_Notetags_Action'](_0x3d63ab),VisuMZ[_0x216b5e(0x2e2)][_0x216b5e(0x99b)](_0x3d63ab);},VisuMZ[_0x29c7b3(0x2e2)]['ParseItemNotetags']=VisuMZ['ParseItemNotetags'],VisuMZ[_0x29c7b3(0x8cf)]=function(_0x4bf424){const _0x69d2=_0x29c7b3;VisuMZ['BattleCore'][_0x69d2(0x8cf)]&&VisuMZ[_0x69d2(0x2e2)][_0x69d2(0x8cf)][_0x69d2(0x8d6)](this,_0x4bf424),VisuMZ['BattleCore'][_0x69d2(0x2f6)](_0x4bf424),VisuMZ[_0x69d2(0x2e2)]['Parse_Notetags_Targets'](_0x4bf424);},VisuMZ[_0x29c7b3(0x2e2)]['ParseWeaponNotetags']=VisuMZ['ParseWeaponNotetags'],VisuMZ[_0x29c7b3(0xb5f)]=function(_0x71464){const _0x29a971=_0x29c7b3;VisuMZ[_0x29a971(0x2e2)][_0x29a971(0xb5f)]&&VisuMZ['BattleCore']['ParseWeaponNotetags']['call'](this,_0x71464),VisuMZ[_0x29a971(0x2e2)][_0x29a971(0x721)](_0x71464);},VisuMZ[_0x29c7b3(0x2e2)]['ParseArmorNotetags']=VisuMZ[_0x29c7b3(0xbdb)],VisuMZ[_0x29c7b3(0xbdb)]=function(_0x8ec77b){const _0x4abbc8=_0x29c7b3;VisuMZ['BattleCore'][_0x4abbc8(0xbdb)]&&VisuMZ[_0x4abbc8(0x2e2)]['ParseArmorNotetags'][_0x4abbc8(0x8d6)](this,_0x8ec77b),VisuMZ[_0x4abbc8(0x2e2)][_0x4abbc8(0x721)](_0x8ec77b);},VisuMZ['BattleCore'][_0x29c7b3(0x62f)]=VisuMZ[_0x29c7b3(0x62f)],VisuMZ[_0x29c7b3(0x62f)]=function(_0x541373){const _0x2a40bc=_0x29c7b3;VisuMZ['BattleCore']['ParseEnemyNotetags']&&VisuMZ['BattleCore'][_0x2a40bc(0x62f)]['call'](this,_0x541373),VisuMZ[_0x2a40bc(0x2e2)][_0x2a40bc(0x721)](_0x541373);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x5e9)]=VisuMZ[_0x29c7b3(0x5e9)],VisuMZ['ParseStateNotetags']=function(_0x4bcf06){const _0x2ec53a=_0x29c7b3;VisuMZ['BattleCore'][_0x2ec53a(0x5e9)]&&VisuMZ[_0x2ec53a(0x2e2)][_0x2ec53a(0x5e9)][_0x2ec53a(0x8d6)](this,_0x4bcf06),VisuMZ['BattleCore'][_0x2ec53a(0x721)](_0x4bcf06),VisuMZ[_0x2ec53a(0x2e2)][_0x2ec53a(0xb50)](_0x4bcf06);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x2f6)]=function(_0x955922){const _0x22f10e=_0x29c7b3,_0x531748=[_0x22f10e(0x4f7),_0x22f10e(0x6c7),_0x22f10e(0x49b),_0x22f10e(0xc2c),_0x22f10e(0x3a5),'PostStartActionJS',_0x22f10e(0x203),'PostEndActionJS'];for(const _0x590e54 of _0x531748){VisuMZ[_0x22f10e(0x2e2)][_0x22f10e(0x810)](_0x955922,_0x590e54);}const _0x1d70e2=_0x955922[_0x22f10e(0x124)];_0x1d70e2[_0x22f10e(0x290)](/<ALWAYS CRITICAL/i)&&(_0x955922[_0x22f10e(0x969)][_0x22f10e(0x6ad)]=!![]),_0x1d70e2[_0x22f10e(0x290)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x955922[_0x22f10e(0x5d4)]=Math['max'](0x1,Number(RegExp['$1']))),_0x1d70e2[_0x22f10e(0x290)](/<TARGET:[ ](.*)>/i)&&(_0x955922[_0x22f10e(0x791)]=String(RegExp['$1'])[_0x22f10e(0x36b)]()[_0x22f10e(0x89a)]());},VisuMZ[_0x29c7b3(0x2e2)]['Parse_Notetags_TraitObjects']=function(_0x4689e7){const _0x3eb380=_0x29c7b3,_0xa28d7e=[_0x3eb380(0x3af),_0x3eb380(0x32f),'PreDamageAsUserJS',_0x3eb380(0x266),_0x3eb380(0x8bb),_0x3eb380(0x20d),_0x3eb380(0x3b9),_0x3eb380(0x419),_0x3eb380(0x3a5),_0x3eb380(0x67a),_0x3eb380(0x203),_0x3eb380(0x8c4),_0x3eb380(0x1dd),_0x3eb380(0x1db),'PreEndBattleJS',_0x3eb380(0x348),'BattleVictoryJS','BattleDefeatJS',_0x3eb380(0x823),_0x3eb380(0x936),_0x3eb380(0x78a),'PostStartTurnJS',_0x3eb380(0x157),'PostEndTurnJS',_0x3eb380(0x553),'PostRegenerateJS'];for(const _0x5bf625 of _0xa28d7e){VisuMZ[_0x3eb380(0x2e2)][_0x3eb380(0x810)](_0x4689e7,_0x5bf625);}const _0x4ec548=[_0x3eb380(0x2bf),_0x3eb380(0x418),'jsAccuracyAsTarget',_0x3eb380(0x24b),'jsCritRateAsTarget'];for(const _0xde612d of _0x4ec548){VisuMZ['BattleCore']['createRateJS'](_0x4689e7,_0xde612d);}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x99b)]=function(_0x3073db){const _0x27f5d5=_0x29c7b3,_0x2b3b08=_0x3073db[_0x27f5d5(0x124)];if(_0x2b3b08[_0x27f5d5(0x290)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x230289=String(RegExp['$1']),_0x4750ed=VisuMZ[_0x27f5d5(0x2e2)][_0x27f5d5(0x978)](_0x3073db,_0x27f5d5(0x264));VisuMZ[_0x27f5d5(0x2e2)][_0x27f5d5(0x2e0)](_0x230289,_0x4750ed);}if(_0x2b3b08['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x52bc7f=String(RegExp['$1']),_0x9e59be=VisuMZ[_0x27f5d5(0x2e2)][_0x27f5d5(0x978)](_0x3073db,_0x27f5d5(0x73e));VisuMZ[_0x27f5d5(0x2e2)][_0x27f5d5(0x1a2)](_0x52bc7f,_0x9e59be);}},VisuMZ[_0x29c7b3(0x2e2)]['JS']={},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x810)]=function(_0x5e7353,_0x801813){const _0x5187cd=_0x29c7b3,_0x3f5cd4=_0x5e7353['note'];if(_0x3f5cd4[_0x5187cd(0x290)](VisuMZ[_0x5187cd(0x2e2)][_0x5187cd(0x1f2)][_0x801813])){const _0x125e8b=RegExp['$1'],_0x317670=_0x5187cd(0xb40)[_0x5187cd(0x77d)](_0x125e8b),_0xf44fdf=VisuMZ[_0x5187cd(0x2e2)][_0x5187cd(0x978)](_0x5e7353,_0x801813);VisuMZ[_0x5187cd(0x2e2)]['JS'][_0xf44fdf]=new Function(_0x317670);}},VisuMZ['BattleCore'][_0x29c7b3(0x978)]=function(_0x41038d,_0x3e29e7){const _0xaffc78=_0x29c7b3;if(VisuMZ[_0xaffc78(0x978)])return VisuMZ[_0xaffc78(0x978)](_0x41038d,_0x3e29e7);let _0xf7ac12='';if($dataActors[_0xaffc78(0xba2)](_0x41038d))_0xf7ac12=_0xaffc78(0x8ce)[_0xaffc78(0x77d)](_0x41038d['id'],_0x3e29e7);if($dataClasses['includes'](_0x41038d))_0xf7ac12=_0xaffc78(0x596)[_0xaffc78(0x77d)](_0x41038d['id'],_0x3e29e7);if($dataSkills[_0xaffc78(0xba2)](_0x41038d))_0xf7ac12=_0xaffc78(0x414)['format'](_0x41038d['id'],_0x3e29e7);if($dataItems[_0xaffc78(0xba2)](_0x41038d))_0xf7ac12='Item-%1-%2'[_0xaffc78(0x77d)](_0x41038d['id'],_0x3e29e7);if($dataWeapons['includes'](_0x41038d))_0xf7ac12=_0xaffc78(0x4ed)[_0xaffc78(0x77d)](_0x41038d['id'],_0x3e29e7);if($dataArmors['includes'](_0x41038d))_0xf7ac12=_0xaffc78(0x8f7)[_0xaffc78(0x77d)](_0x41038d['id'],_0x3e29e7);if($dataEnemies[_0xaffc78(0xba2)](_0x41038d))_0xf7ac12='Enemy-%1-%2'[_0xaffc78(0x77d)](_0x41038d['id'],_0x3e29e7);if($dataStates['includes'](_0x41038d))_0xf7ac12=_0xaffc78(0x1b5)[_0xaffc78(0x77d)](_0x41038d['id'],_0x3e29e7);return _0xf7ac12;},VisuMZ['BattleCore'][_0x29c7b3(0x2e0)]=function(_0x200a08,_0x5cf0a7){const _0xff8c1c=_0x29c7b3,_0x43a341='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0xff8c1c(0x77d)](_0x200a08);VisuMZ[_0xff8c1c(0x2e2)]['JS'][_0x5cf0a7]=new Function(_0x43a341);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x1a2)]=function(_0x13fd70,_0x468d33){const _0x209cf9=_0x29c7b3,_0x5753e2=_0x209cf9(0x361)[_0x209cf9(0x77d)](_0x13fd70);VisuMZ[_0x209cf9(0x2e2)]['JS'][_0x468d33]=new Function(_0x5753e2);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x866)]=function(_0x5ea4e6,_0x100d64){const _0x32f43f=_0x29c7b3,_0x553dd5=_0x5ea4e6[_0x32f43f(0x124)];if(_0x553dd5[_0x32f43f(0x290)](VisuMZ[_0x32f43f(0x2e2)]['RegExp'][_0x100d64])){const _0x25b110=RegExp['$1'],_0xa9e5bf=_0x32f43f(0x827)[_0x32f43f(0x77d)](_0x25b110),_0x14b9b9=VisuMZ['BattleCore'][_0x32f43f(0x978)](_0x5ea4e6,_0x100d64);VisuMZ[_0x32f43f(0x2e2)]['JS'][_0x14b9b9]=new Function(_0xa9e5bf);}},VisuMZ['BattleCore']['Parse_Notetags_HelpDescription']=function(_0x4feee1){const _0x2e3ff0=_0x29c7b3;_0x4feee1[_0x2e3ff0(0xaff)]='-';const _0x5ee415=_0x4feee1[_0x2e3ff0(0x124)];_0x5ee415[_0x2e3ff0(0x290)](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x4feee1['description']=String(RegExp['$1'])[_0x2e3ff0(0x89a)]()),_0x5ee415[_0x2e3ff0(0x290)](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x4feee1[_0x2e3ff0(0x5f0)]=String(RegExp['$1'])[_0x2e3ff0(0x89a)]()),_0x5ee415['match'](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING|STATUS LISTING)>/i)&&(_0x4feee1[_0x2e3ff0(0x4c8)]=!![]);},TextManager[_0x29c7b3(0x285)]=VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0xa04)]['CmdTextAutoBattle'],TextManager['autoBattleStart']=VisuMZ['BattleCore'][_0x29c7b3(0xc14)]['AutoBattle'][_0x29c7b3(0x9ff)],TextManager[_0x29c7b3(0x453)]=VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)]['AutoBattle'][_0x29c7b3(0x28a)],TextManager[_0x29c7b3(0x146)]=VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x579)][_0x29c7b3(0x846)],ColorManager['getColor']=function(_0x19519d){const _0x31e6e0=_0x29c7b3;return _0x19519d=String(_0x19519d),_0x19519d[_0x31e6e0(0x290)](/#(.*)/i)?_0x31e6e0(0x78e)['format'](String(RegExp['$1'])):this[_0x31e6e0(0x16d)](Number(_0x19519d));},DataManager[_0x29c7b3(0x7c4)]=function(_0x20da67){const _0x1fc012=_0x29c7b3;if(_0x20da67[_0x1fc012(0x124)][_0x1fc012(0x290)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x1ad6ea=String(RegExp['$1'])[_0x1fc012(0x36b)]()[_0x1fc012(0x89a)]();if(_0x1ad6ea==='MANUAL')return'MANUAL';if(VisuMZ['DamageStyles'][_0x1ad6ea])return _0x1ad6ea;}const _0x4c1865=VisuMZ['BattleCore']['Settings'][_0x1fc012(0x9c7)][_0x1fc012(0x421)][_0x1fc012(0x36b)]()['trim']();if(VisuMZ[_0x1fc012(0xbbe)][_0x4c1865])return _0x4c1865;return _0x1fc012(0x61d);},DataManager[_0x29c7b3(0xab9)]=function(_0x37b7f3){const _0x568628=_0x29c7b3;_0x37b7f3=_0x37b7f3[_0x568628(0x36b)]()[_0x568628(0x89a)](),this[_0x568628(0xb6b)]=this[_0x568628(0xb6b)]||{};if(this['_stypeIDs'][_0x37b7f3])return this['_stypeIDs'][_0x37b7f3];for(let _0x26fb8e=0x1;_0x26fb8e<0x64;_0x26fb8e++){if(!$dataSystem[_0x568628(0x82e)][_0x26fb8e])continue;let _0x17b1aa=$dataSystem[_0x568628(0x82e)][_0x26fb8e][_0x568628(0x36b)]()[_0x568628(0x89a)]();_0x17b1aa=_0x17b1aa[_0x568628(0xa2c)](/\x1I\[(\d+)\]/gi,''),_0x17b1aa=_0x17b1aa[_0x568628(0xa2c)](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x17b1aa]=_0x26fb8e;}return this[_0x568628(0xb6b)][_0x37b7f3]||0x0;},DataManager['getSkillIdWithName']=function(_0x116bce){const _0x578f55=_0x29c7b3;_0x116bce=_0x116bce['toUpperCase']()[_0x578f55(0x89a)](),this[_0x578f55(0x747)]=this[_0x578f55(0x747)]||{};if(this[_0x578f55(0x747)][_0x116bce])return this[_0x578f55(0x747)][_0x116bce];for(const _0x1a77fa of $dataSkills){if(!_0x1a77fa)continue;this[_0x578f55(0x747)][_0x1a77fa[_0x578f55(0x161)][_0x578f55(0x36b)]()[_0x578f55(0x89a)]()]=_0x1a77fa['id'];}return this[_0x578f55(0x747)][_0x116bce]||0x0;},DataManager[_0x29c7b3(0x201)]=function(_0x162a4c){const _0x58942=_0x29c7b3;_0x162a4c=_0x162a4c[_0x58942(0x36b)]()[_0x58942(0x89a)](),this[_0x58942(0x14d)]=this['_enemyIDs']||{};if(this[_0x58942(0x14d)][_0x162a4c])return this['_enemyIDs'][_0x162a4c];for(const _0x48b382 of $dataEnemies){if(!_0x48b382)continue;this[_0x58942(0x14d)][_0x48b382[_0x58942(0x161)][_0x58942(0x36b)]()['trim']()]=_0x48b382['id'];}return this['_enemyIDs'][_0x162a4c]||0x0;},DataManager[_0x29c7b3(0x3bb)]=function(_0x5ae369){const _0x460210=_0x29c7b3;_0x5ae369=_0x5ae369[_0x460210(0x36b)]()[_0x460210(0x89a)](),this[_0x460210(0xaa6)]=this['_wtypeIDs']||{};if(this[_0x460210(0xaa6)][_0x5ae369])return this['_wtypeIDs'][_0x5ae369];for(let _0x30cbe0=0x1;_0x30cbe0<0x64;_0x30cbe0++){if(!$dataSystem[_0x460210(0x9fc)][_0x30cbe0])continue;let _0x4be46b=$dataSystem['weaponTypes'][_0x30cbe0]['toUpperCase']()['trim']();_0x4be46b=_0x4be46b[_0x460210(0xa2c)](/\x1I\[(\d+)\]/gi,''),_0x4be46b=_0x4be46b[_0x460210(0xa2c)](/\\I\[(\d+)\]/gi,''),this['_wtypeIDs'][_0x4be46b]=_0x30cbe0;}return this[_0x460210(0xaa6)][_0x460210(0xbf4)]=0x0,this[_0x460210(0xaa6)][_0x5ae369]||0x0;},DataManager['battleDisplayText']=function(_0x2bbe10){const _0x2e20b6=_0x29c7b3,_0x365fbc=_0x2e20b6(0x88f);let _0x341925=_0x2bbe10[_0x2e20b6(0x66d)],_0x5c0cd2=_0x2bbe10[_0x2e20b6(0x161)];const _0x396b71=_0x2bbe10[_0x2e20b6(0x124)];return _0x396b71[_0x2e20b6(0x290)](/<DISPLAY ICON: (\d+)>/i)&&(_0x341925=Number(RegExp['$1'])),_0x396b71['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x5c0cd2=String(RegExp['$1'])),_0x365fbc[_0x2e20b6(0x77d)](_0x341925,_0x5c0cd2);},DataManager[_0x29c7b3(0xa05)]=function(_0x4c66ca){const _0x5caaa2=_0x29c7b3;return _0x4c66ca[_0x5caaa2(0x124)][_0x5caaa2(0x290)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x4c66ca[_0x5caaa2(0x161)];},DataManager[_0x29c7b3(0x9a0)]=function(_0xaf809d){const _0x533f14=_0x29c7b3;return _0xaf809d[_0x533f14(0x124)]['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0xaf809d[_0x533f14(0x66d)];},DataManager[_0x29c7b3(0x8ff)]=function(_0x5b7735){const _0xf78bdd=_0x29c7b3,_0x3f874c=$dataEnemies[_0x5b7735];if(_0x3f874c){if(_0x3f874c['note'][_0xf78bdd(0x290)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x482f83=String(RegExp['$1'])[_0xf78bdd(0xb3b)](/[\r\n]+/)[_0xf78bdd(0x5e2)](''),_0x404746=this[_0xf78bdd(0x67e)](_0x482f83);_0x5b7735=this[_0xf78bdd(0x201)](_0x404746)||_0x5b7735,_0x5b7735=DataManager['swapEnemyIDs'](_0x5b7735);}}return _0x5b7735;},DataManager[_0x29c7b3(0x67e)]=function(_0x11e036){const _0x2f8c91=_0x29c7b3;let _0x8a51a4=0x0;const _0x22b0f6={};for(const _0x22cf85 of _0x11e036){if(_0x22cf85['match'](/(.*):[ ](\d+)/i)){const _0x40ffb2=String(RegExp['$1'])[_0x2f8c91(0x89a)](),_0x41a48c=Number(RegExp['$2']);_0x22b0f6[_0x40ffb2]=_0x41a48c,_0x8a51a4+=_0x41a48c;}else{if(_0x22cf85[_0x2f8c91(0x290)](/(.*):[ ](\d+\.?\d+)/i)){const _0x106ace=String(RegExp['$1'])['trim'](),_0x29e442=Number(RegExp['$2']);_0x22b0f6[_0x106ace]=_0x29e442,_0x8a51a4+=_0x29e442;}else _0x22cf85!==''&&(_0x22b0f6[_0x22cf85]=0x1,_0x8a51a4++);}}if(_0x8a51a4<=0x0)return'';let _0x6bf65d=Math['random']()*_0x8a51a4;for(const _0x2f5c16 in _0x22b0f6){_0x6bf65d-=_0x22b0f6[_0x2f5c16];if(_0x6bf65d<=0x0)return _0x2f5c16;}return'';},DataManager['checkAutoCustomActionSequenceNotetagEffect']=function(_0x275b5a){const _0x1bb5b3=_0x29c7b3;if(!_0x275b5a)return![];if(!VisuMZ['BattleCore'][_0x1bb5b3(0xc14)][_0x1bb5b3(0x54f)][_0x1bb5b3(0x85a)])return![];if(_0x275b5a[_0x1bb5b3(0x124)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x275b5a[_0x1bb5b3(0x124)][_0x1bb5b3(0x290)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x4c8642 of _0x275b5a['effects']){if(!_0x4c8642)continue;if(_0x4c8642[_0x1bb5b3(0x1ee)]===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x29c7b3(0x4ac)]=function(_0x188d20){const _0x3a3b7c=_0x29c7b3,_0x3d867b=$dataTroops[_0x188d20];if(!_0x3d867b)return'';let _0x42aec6='';_0x42aec6+=_0x3d867b[_0x3a3b7c(0x161)];for(const _0x82a95b of _0x3d867b[_0x3a3b7c(0x251)]){for(const _0x515708 of _0x82a95b[_0x3a3b7c(0x72f)]){[0x6c,0x198]['includes'](_0x515708[_0x3a3b7c(0x1ee)])&&(_0x42aec6+='\x0a',_0x42aec6+=_0x515708[_0x3a3b7c(0x5b3)][0x0]);}}return _0x42aec6;},ConfigManager[_0x29c7b3(0x673)]=ConfigManager['autoBattleAtStart']??![],ConfigManager['autoBattleUseSkills']=ConfigManager[_0x29c7b3(0x154)]??![],ConfigManager['visualHpGauge']=ConfigManager[_0x29c7b3(0x146)]??!![],VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xa1c)]=ConfigManager['makeData'],ConfigManager[_0x29c7b3(0xa39)]=function(){const _0x103d6e=_0x29c7b3,_0x2f861f=VisuMZ['BattleCore'][_0x103d6e(0xa1c)][_0x103d6e(0x8d6)](this);return _0x2f861f['autoBattleAtStart']=this[_0x103d6e(0x673)],_0x2f861f[_0x103d6e(0x154)]=this['autoBattleUseSkills'],_0x2f861f['visualHpGauge']=this[_0x103d6e(0x146)],_0x2f861f;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x184)]=ConfigManager[_0x29c7b3(0x3cd)],ConfigManager['applyData']=function(_0x2ea40f){const _0x41dac5=_0x29c7b3;VisuMZ[_0x41dac5(0x2e2)][_0x41dac5(0x184)][_0x41dac5(0x8d6)](this,_0x2ea40f),'autoBattleAtStart'in _0x2ea40f?this['autoBattleAtStart']=_0x2ea40f[_0x41dac5(0x673)]:this['autoBattleAtStart']=![],_0x41dac5(0x154)in _0x2ea40f?this['autoBattleUseSkills']=_0x2ea40f[_0x41dac5(0x154)]:this[_0x41dac5(0x154)]=![],_0x41dac5(0x146)in _0x2ea40f?this['visualHpGauge']=_0x2ea40f['visualHpGauge']:this[_0x41dac5(0x146)]=!![];},ImageManager['svActorHorzCells']=ImageManager['svActorHorzCells']||0x9,ImageManager['svActorVertCells']=ImageManager[_0x29c7b3(0x1d9)]||0x6,VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x3e3)]=BattleManager[_0x29c7b3(0xb10)],BattleManager['setup']=function(_0x399313,_0x472d93,_0x311ad8){const _0x2fb53a=_0x29c7b3;VisuMZ[_0x2fb53a(0x2e2)][_0x2fb53a(0x3e3)]['call'](this,_0x399313,_0x472d93,_0x311ad8),this[_0x2fb53a(0x1ce)]={};},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x1cd)]=BattleManager['initMembers'],BattleManager['initMembers']=function(){const _0x2fc9c7=_0x29c7b3;VisuMZ[_0x2fc9c7(0x2e2)][_0x2fc9c7(0x1cd)][_0x2fc9c7(0x8d6)](this),this[_0x2fc9c7(0xb12)]=[];},BattleManager['updateBattleVariables']=function(){const _0x347843=_0x29c7b3;$subject=this[_0x347843(0x215)],$targets=this[_0x347843(0x48a)],$target=this[_0x347843(0x424)]||this[_0x347843(0x48a)][this['_targetIndex']||0x0];},BattleManager['refreshStatusWindow']=function(){const _0x239724=_0x29c7b3;if(!SceneManager[_0x239724(0x429)]())return;const _0x425feb=SceneManager[_0x239724(0x364)][_0x239724(0x92e)];if(_0x425feb)_0x425feb[_0x239724(0x4f2)]();},BattleManager[_0x29c7b3(0x794)]=function(){const _0x2720c4=_0x29c7b3;if(BattleManager[_0x2720c4(0xb86)]())return'TPB';return _0x2720c4(0x255);},BattleManager[_0x29c7b3(0xbef)]=function(_0x33e7ef){const _0x2f1f9d=_0x29c7b3;return _0x33e7ef=_0x33e7ef['toUpperCase']()[_0x2f1f9d(0x89a)](),this[_0x2f1f9d(0x794)]()===_0x33e7ef;},BattleManager['isDTB']=function(){const _0x467bfa=_0x29c7b3;return this[_0x467bfa(0xbef)](_0x467bfa(0x255));},BattleManager['isTurnBased']=function(){const _0x4529c1=_0x29c7b3;return this[_0x4529c1(0x804)]();},BattleManager[_0x29c7b3(0x634)]=function(){const _0x2eedb5=_0x29c7b3;return!this[_0x2eedb5(0x9b4)]();},BattleManager[_0x29c7b3(0x571)]=function(){const _0x2e04a9=_0x29c7b3;return!this[_0x2e04a9(0x9b4)]()&&!this[_0x2e04a9(0x634)]();},BattleManager['getBattlerFromKey']=function(_0xe82e03){const _0x501079=_0x29c7b3;this[_0x501079(0x1ce)]=this[_0x501079(0x1ce)]||{};if(this['_battlerKeyCache'][_0xe82e03]!==undefined)return this[_0x501079(0x1ce)][_0xe82e03];this[_0x501079(0x1ce)][_0xe82e03]=null;const _0x18e8a7=this[_0x501079(0xaf1)](),_0x20a3e9=_0x18e8a7[_0x501079(0x50a)](_0x407ec1=>_0x407ec1[_0x501079(0x6db)]()===_0xe82e03);if(_0x20a3e9)this[_0x501079(0x1ce)][_0xe82e03]=_0x20a3e9;return this[_0x501079(0x1ce)][_0xe82e03];},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x6db)]=function(){const _0x539b55=_0x29c7b3;return'%1-%2'[_0x539b55(0x77d)](this[_0x539b55(0xa27)]()?_0x539b55(0xb4d):_0x539b55(0x662),this[_0x539b55(0x161)]()+'-'+(this['isActor']()?this[_0x539b55(0x2e6)]():this[_0x539b55(0xb21)]()));},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x8cc)]=function(_0x13dcd7){const _0x4fb1f1=_0x29c7b3;if(this[_0x4fb1f1(0xadb)]!=='')return;typeof _0x13dcd7===_0x4fb1f1(0x6d8)?this[_0x4fb1f1(0xadb)]=_0x13dcd7[_0x4fb1f1(0x6fd)]()[_0x4fb1f1(0x89a)]():this[_0x4fb1f1(0xadb)]=_0x13dcd7[_0x4fb1f1(0x6db)]();},Game_Action['prototype'][_0x29c7b3(0x80e)]=function(){const _0x39ad2f=_0x29c7b3;return[this[_0x39ad2f(0x1a1)]()];},Game_Action['prototype']['getSpecificBattlerKeyTarget']=function(){const _0x4a1048=_0x29c7b3,_0x1a7a93=this[_0x4a1048(0xadb)]||'',_0x15ee7d=BattleManager[_0x4a1048(0x8c8)](_0x1a7a93);if(!_0x15ee7d)return this['getBattlerKeyTargetReplacement']();if(!_0x15ee7d[_0x4a1048(0x475)]())return this[_0x4a1048(0x636)]();return _0x15ee7d;},Game_Action[_0x29c7b3(0xc03)]['getBattlerKeyTargetReplacement']=function(){const _0x50b57a=_0x29c7b3,_0x42c888=this[_0x50b57a(0xadb)];return _0x42c888[_0x50b57a(0x290)](/ACTOR/i)?this[_0x50b57a(0x922)]()['trueRandomTarget']():this['opponentsUnit']()[_0x50b57a(0x108)]();},BattleManager[_0x29c7b3(0xb95)]=function(){const _0x1eb7b9=_0x29c7b3;return this['allBattleMembers']()[_0x1eb7b9(0x55e)](_0x359e0d=>_0x359e0d[_0x1eb7b9(0xa5a)]());},BattleManager[_0x29c7b3(0x15b)]=function(_0x460c42){const _0x1476ed=_0x29c7b3;_0x460c42===_0x1476ed(0x2a3)&&(this['_endingBattle']=!![]),$gameParty[_0x1476ed(0x15b)](_0x460c42),$gameTroop[_0x1476ed(0x15b)](_0x460c42);},VisuMZ['BattleCore'][_0x29c7b3(0x5b7)]=BattleManager[_0x29c7b3(0x10e)],BattleManager[_0x29c7b3(0x10e)]=function(){const _0x39cb6d=_0x29c7b3;this[_0x39cb6d(0x8ab)]=![],this[_0x39cb6d(0xb25)]=ConfigManager[_0x39cb6d(0x673)],this['_endingBattle']=![],this['processBattleCoreJS'](_0x39cb6d(0x1dd)),VisuMZ['BattleCore'][_0x39cb6d(0x5b7)]['call'](this),this[_0x39cb6d(0x15b)](_0x39cb6d(0x1db));},BattleManager['processPostBattleCommonEvents']=function(_0x13d61c){const _0x5e725f=_0x29c7b3,_0xfda211=VisuMZ[_0x5e725f(0x2e2)][_0x5e725f(0xc14)][_0x5e725f(0x9c6)];_0x13d61c!==_0x5e725f(0xaaa)&&_0xfda211[_0x5e725f(0x793)]&&VisuMZ[_0x5e725f(0x2e2)][_0x5e725f(0x915)](_0xfda211[_0x5e725f(0x793)])&&$gameTemp[_0x5e725f(0xa6e)](_0xfda211['BattleEndEvent']);const _0x15a5aa=_0x5e725f(0xb5c)[_0x5e725f(0x77d)](_0x13d61c);_0xfda211[_0x15a5aa]&&VisuMZ[_0x5e725f(0x2e2)][_0x5e725f(0x915)](_0xfda211[_0x15a5aa])&&$gameTemp['reserveCommonEvent'](_0xfda211[_0x15a5aa]);},VisuMZ['BattleCore'][_0x29c7b3(0x885)]=BattleManager['abort'],BattleManager['abort']=function(){const _0x582148=_0x29c7b3;VisuMZ['BattleCore'][_0x582148(0x885)][_0x582148(0x8d6)](this),SceneManager[_0x582148(0x429)]()&&BattleManager[_0x582148(0x583)]();},VisuMZ[_0x29c7b3(0x2e2)]['BattleManager_checkBattleEnd']=BattleManager['checkBattleEnd'],BattleManager[_0x29c7b3(0x412)]=function(){const _0x538271=_0x29c7b3;if(this[_0x538271(0x1f8)]===_0x538271(0x1c0)){if($gameTemp[_0x538271(0x9a2)]())return![];}return VisuMZ['BattleCore'][_0x538271(0x693)][_0x538271(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)]['BattleManager_processVictory']=BattleManager['processVictory'],BattleManager[_0x29c7b3(0xa9a)]=function(){const _0x355329=_0x29c7b3;this['_endingBattle']=!![],this[_0x355329(0x15b)](_0x355329(0x2a3)),VisuMZ[_0x355329(0x2e2)][_0x355329(0x999)][_0x355329(0x8d6)](this),this[_0x355329(0x973)]('Victory');},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x425)]=BattleManager[_0x29c7b3(0x4c4)],BattleManager[_0x29c7b3(0x4c4)]=function(){const _0x595162=_0x29c7b3;this['_endingBattle']=!![],VisuMZ[_0x595162(0x2e2)][_0x595162(0x425)][_0x595162(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x8ec)]=BattleManager[_0x29c7b3(0x838)],BattleManager[_0x29c7b3(0x838)]=function(){const _0x17ee70=_0x29c7b3;this[_0x17ee70(0x736)]=!![],this[_0x17ee70(0x15b)](_0x17ee70(0xc08)),VisuMZ[_0x17ee70(0x2e2)]['BattleManager_processDefeat'][_0x17ee70(0x8d6)](this),this[_0x17ee70(0x973)]('Defeat');},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xa46)]=BattleManager[_0x29c7b3(0x551)],BattleManager[_0x29c7b3(0x551)]=function(_0x1ecb17){const _0x1a7c48=_0x29c7b3;this[_0x1a7c48(0x8ab)]=!![],this[_0x1a7c48(0xb25)]=![],this['processBattleCoreJS']('PreEndBattleJS'),VisuMZ[_0x1a7c48(0x2e2)][_0x1a7c48(0xa46)][_0x1a7c48(0x8d6)](this,_0x1ecb17),this[_0x1a7c48(0x15b)]('PostEndBattleJS');},VisuMZ['BattleCore'][_0x29c7b3(0x278)]=BattleManager[_0x29c7b3(0x214)],BattleManager[_0x29c7b3(0x214)]=function(){const _0x537242=_0x29c7b3;if(this[_0x537242(0x9b4)]())this[_0x537242(0x15b)]('PreStartTurnJS');VisuMZ[_0x537242(0x2e2)][_0x537242(0x278)][_0x537242(0x8d6)](this);if(this[_0x537242(0x9b4)]())this['processBattleCoreJS'](_0x537242(0x594));},BattleManager[_0x29c7b3(0x7f7)]=function(){const _0x2d0aaa=_0x29c7b3,_0x3c086f=this[_0x2d0aaa(0x215)],_0x19a3e2=_0x3c086f[_0x2d0aaa(0x248)]();_0x19a3e2?(_0x19a3e2['prepare'](),_0x19a3e2[_0x2d0aaa(0xbbd)]()?(this['startAction'](),_0x3c086f['removeCurrentAction']()):(_0x3c086f[_0x2d0aaa(0x513)](),this[_0x2d0aaa(0xa0a)]())):(this['endAction'](),this['_subject']=null);},VisuMZ[_0x29c7b3(0x2e2)]['BattleManager_startAction']=BattleManager[_0x29c7b3(0x356)],BattleManager[_0x29c7b3(0x356)]=function(){const _0x4b3f86=_0x29c7b3,_0x7a8305=this[_0x4b3f86(0x215)][_0x4b3f86(0x248)](),_0xee5e31=this[_0x4b3f86(0x215)];_0x7a8305&&_0x7a8305['subject']()===_0xee5e31&&_0x7a8305[_0x4b3f86(0x3db)](_0x4b3f86(0x3a5)),VisuMZ[_0x4b3f86(0x2e2)][_0x4b3f86(0x7c5)][_0x4b3f86(0x8d6)](this),_0x7a8305&&_0x7a8305[_0x4b3f86(0x812)]()===_0xee5e31&&_0x7a8305['actionBattleCoreJS'](_0x4b3f86(0x67a));},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x5e7)]=BattleManager['endAction'],BattleManager[_0x29c7b3(0xa0a)]=function(){const _0x53dde9=_0x29c7b3,_0x2e31a3=this[_0x53dde9(0x41e)],_0x1f8538=this[_0x53dde9(0x215)];_0x2e31a3&&_0x2e31a3!==this[_0x53dde9(0xb2a)]&&_0x2e31a3[_0x53dde9(0x812)]()===_0x1f8538&&_0x2e31a3[_0x53dde9(0x3db)]('PreEndActionJS'),this['_subject']?VisuMZ[_0x53dde9(0x2e2)]['BattleManager_endAction']['call'](this):this[_0x53dde9(0x1f8)]=_0x53dde9(0x1c0),_0x2e31a3&&_0x2e31a3!==this['_lastAction']&&_0x2e31a3[_0x53dde9(0x812)]()===_0x1f8538&&_0x2e31a3[_0x53dde9(0x3db)](_0x53dde9(0x8c4)),this[_0x53dde9(0x8e2)](this[_0x53dde9(0xaf1)]()),this[_0x53dde9(0xb2a)]=this[_0x53dde9(0x41e)];},BattleManager[_0x29c7b3(0x8e2)]=function(_0xdd63c0){const _0x4a7c2c=_0x29c7b3;for(const _0x320ba9 of _0xdd63c0){if(!_0x320ba9)continue;if(!_0x320ba9[_0x4a7c2c(0xa65)]())continue;_0x320ba9[_0x4a7c2c(0xa65)]()['refreshMotion']();}},BattleManager[_0x29c7b3(0x2d5)]=function(){const _0x54f48c=_0x29c7b3;!this[_0x54f48c(0x70f)][_0x54f48c(0x980)]()&&this[_0x54f48c(0xa0a)]();},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x464)]=function(){const _0x1801fd=_0x29c7b3;this[_0x1801fd(0xbe1)]();if(Imported[_0x1801fd(0xacd)]){const _0x587264=VisuMZ[_0x1801fd(0x33e)]['Settings'][_0x1801fd(0x4d4)];_0x587264&&_0x587264['ActionEndUpdate']===![]&&this[_0x1801fd(0x499)](0x1);}else this[_0x1801fd(0x499)](0x1);this[_0x1801fd(0x394)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x1e5)]=BattleManager['invokeCounterAttack'],BattleManager[_0x29c7b3(0x70e)]=function(_0x1d9ca1,_0x51c73c){const _0xb38c30=_0x29c7b3;this[_0xb38c30(0x96f)]=!![],VisuMZ[_0xb38c30(0x2e2)][_0xb38c30(0x1e5)][_0xb38c30(0x8d6)](this,_0x1d9ca1,_0x51c73c),this[_0xb38c30(0x96f)]=undefined;},BattleManager[_0x29c7b3(0x5e5)]=function(){const _0xeaa625=_0x29c7b3;this[_0xeaa625(0xa74)]=VisuMZ[_0xeaa625(0x2e2)][_0xeaa625(0xc14)][_0xeaa625(0x9c6)][_0xeaa625(0x5f6)][_0xeaa625(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x305)]=BattleManager[_0x29c7b3(0x765)],BattleManager[_0x29c7b3(0x765)]=function(){const _0x25a536=_0x29c7b3;this[_0x25a536(0x15b)](_0x25a536(0x823)),BattleManager[_0x25a536(0x690)][_0x25a536(0xaf0)](),VisuMZ[_0x25a536(0x2e2)]['BattleManager_onEscapeSuccess'][_0x25a536(0x8d6)](this),this[_0x25a536(0x973)](_0x25a536(0x8c2));},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x281)]=BattleManager[_0x29c7b3(0xb1a)],BattleManager[_0x29c7b3(0xb1a)]=function(){const _0x211385=_0x29c7b3;this[_0x211385(0x15b)]('EscapeFailureJS');const _0x515005=this['_escapeRatio'];VisuMZ['BattleCore'][_0x211385(0x281)][_0x211385(0x8d6)](this),this['_escapeRatio']=_0x515005+VisuMZ[_0x211385(0x2e2)]['Settings'][_0x211385(0x9c6)][_0x211385(0x240)]['call'](this),this[_0x211385(0x595)]=![],this['processPostBattleCommonEvents'](_0x211385(0xaaa));},BattleManager[_0x29c7b3(0xa76)]=function(){const _0x133ea7=_0x29c7b3;let _0x55ecb9=![];if(this['isDisplayEmergedEnemies']())for(const _0x351c49 of $gameTroop[_0x133ea7(0x231)]()){this[_0x133ea7(0x70f)][_0x133ea7(0x13a)](_0x133ea7(0x289),TextManager['emerge'][_0x133ea7(0x77d)](_0x351c49)),this[_0x133ea7(0x70f)]['push'](_0x133ea7(0x60f)),_0x55ecb9=!![];}if(this['_preemptive'])this[_0x133ea7(0x70f)][_0x133ea7(0x13a)](_0x133ea7(0x289),TextManager[_0x133ea7(0x5e8)]['format']($gameParty[_0x133ea7(0x161)]())),this[_0x133ea7(0x70f)][_0x133ea7(0x13a)](_0x133ea7(0x60f));else this['_surprise']&&(this[_0x133ea7(0x70f)]['push'](_0x133ea7(0x289),TextManager['surprise'][_0x133ea7(0x77d)]($gameParty[_0x133ea7(0x161)]())),this['_logWindow']['push'](_0x133ea7(0x60f)));_0x55ecb9&&(this[_0x133ea7(0x70f)][_0x133ea7(0x13a)](_0x133ea7(0x60f)),this[_0x133ea7(0x70f)][_0x133ea7(0x13a)](_0x133ea7(0x917))),this[_0x133ea7(0xb86)]()&&this[_0x133ea7(0x8a9)]()&&(this[_0x133ea7(0x591)]=![]);},BattleManager[_0x29c7b3(0x5a2)]=function(){const _0x267234=_0x29c7b3;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x267234(0x2e2)][_0x267234(0xc14)][_0x267234(0xac6)][_0x267234(0x5de)];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x2b1)]=BattleManager[_0x29c7b3(0x843)],BattleManager[_0x29c7b3(0x843)]=function(){const _0x650ed=_0x29c7b3;VisuMZ[_0x650ed(0x2e2)]['BattleManager_startInput']['call'](this),this[_0x650ed(0x804)]()&&this[_0x650ed(0x8a9)]()&&!this[_0x650ed(0x140)]&&$gameParty['canInput']()&&this[_0x650ed(0xbb0)]();},BattleManager[_0x29c7b3(0x8a9)]=function(){const _0x3b0ddb=_0x29c7b3;return VisuMZ[_0x3b0ddb(0x2e2)][_0x3b0ddb(0xc14)][_0x3b0ddb(0xa04)][_0x3b0ddb(0x753)];},BattleManager[_0x29c7b3(0x3ac)]=function(){const _0x4628ea=_0x29c7b3;this[_0x4628ea(0x1d2)]()&&this[_0x4628ea(0xbb0)]();},VisuMZ['BattleCore'][_0x29c7b3(0x2b0)]=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x66f)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x66f)]=function(){const _0x1fcf32=_0x29c7b3;VisuMZ['BattleCore']['Scene_Battle_startActorCommandSelection'][_0x1fcf32(0x8d6)](this),BattleManager[_0x1fcf32(0xb86)]()&&BattleManager[_0x1fcf32(0x591)]&&(BattleManager[_0x1fcf32(0x591)]=![],this[_0x1fcf32(0x282)]());},BattleManager[_0x29c7b3(0x5c2)]=function(_0x16f445,_0x33b263,_0x1c4f70){const _0x27240a=_0x29c7b3;if(!_0x1c4f70)return;if(!_0x16f445)return;if(!_0x33b263)return;const _0x55a5d4=this[_0x27240a(0x41e)];this[_0x27240a(0x41e)]=new Game_Action(_0x16f445);if(DataManager[_0x27240a(0x9ce)](_0x1c4f70))this[_0x27240a(0x41e)]['setItem'](_0x1c4f70['id']);if(DataManager[_0x27240a(0x94d)](_0x1c4f70))this[_0x27240a(0x41e)][_0x27240a(0x4a7)](_0x1c4f70['id']);if(this[_0x27240a(0x41e)]['item']())BattleManager[_0x27240a(0xc28)](_0x16f445,_0x33b263);this['_action']=_0x55a5d4;},BattleManager[_0x29c7b3(0xb08)]=function(_0x3b8c6f,_0x419498){const _0x1e9ebb=_0x29c7b3;this[_0x1e9ebb(0x41e)]['_reflectionTarget']=_0x419498,this['_logWindow'][_0x1e9ebb(0x323)](_0x419498),this[_0x1e9ebb(0x70f)][_0x1e9ebb(0xae6)](_0x3b8c6f,this[_0x1e9ebb(0x41e)]),this[_0x1e9ebb(0x41e)][_0x1e9ebb(0x5ed)](_0x3b8c6f),this['_logWindow'][_0x1e9ebb(0x7b0)](_0x3b8c6f,_0x3b8c6f);},VisuMZ['BattleCore']['BattleManager_makeActionOrders']=BattleManager[_0x29c7b3(0xb31)],BattleManager['makeActionOrders']=function(){const _0xcabc19=_0x29c7b3;VisuMZ[_0xcabc19(0x2e2)]['BattleManager_makeActionOrders'][_0xcabc19(0x8d6)](this),this[_0xcabc19(0x43e)]=this[_0xcabc19(0x43e)][_0xcabc19(0x55e)](_0x2f9744=>_0x2f9744&&_0x2f9744[_0xcabc19(0xb5b)]());},VisuMZ[_0x29c7b3(0x2e2)]['BattleManager_updatePhase']=BattleManager[_0x29c7b3(0x9e2)],BattleManager[_0x29c7b3(0x9e2)]=function(_0xaca13a){const _0x535524=_0x29c7b3;if(this[_0x535524(0x1f8)]===_0x535524(0x5dc))this[_0x535524(0x548)]();else this['_phase']===_0x535524(0x728)?this['updateForceAction']():VisuMZ['BattleCore']['BattleManager_updatePhase']['call'](this,_0xaca13a);},BattleManager[_0x29c7b3(0xb97)]=function(){const _0x2341eb=_0x29c7b3;this[_0x2341eb(0x5e1)]=this['_targets'][_0x2341eb(0x14e)](0x0),this['_targetIndex']=0x0,this['_target']=this['_allTargets'][0x0]||null,this[_0x2341eb(0x1f8)]=_0x2341eb(0x5dc);},BattleManager[_0x29c7b3(0x548)]=function(){const _0x23b798=_0x29c7b3;!this['updateEventMain']()&&!this[_0x23b798(0x70f)][_0x23b798(0x980)]()&&(this[_0x23b798(0x1f8)]='action');},BattleManager[_0x29c7b3(0x728)]=function(_0xa8adfe){const _0x2569c9=_0x29c7b3;this['_actionBattlers'][_0x2569c9(0x5e2)](_0xa8adfe);if(_0xa8adfe===this[_0x2569c9(0x215)])return;const _0x2ae5f9=JsonEx[_0x2569c9(0xa87)](_0xa8adfe['currentAction']());this['_forcedBattlers']['push']([_0xa8adfe,_0x2ae5f9]);},BattleManager[_0x29c7b3(0x2b2)]=function(){},BattleManager[_0x29c7b3(0x6eb)]=function(){const _0x3dd3c4=_0x29c7b3;if(this['isTpb']())this[_0x3dd3c4(0x1f8)]=_0x3dd3c4(0x1c0);else this[_0x3dd3c4(0xb12)][_0x3dd3c4(0xba7)]>0x0?this[_0x3dd3c4(0x1f8)]=_0x3dd3c4(0x1c0):this[_0x3dd3c4(0x843)]();},BattleManager[_0x29c7b3(0x5a8)]=function(){const _0x33d656=_0x29c7b3,_0x21c5a6=this[_0x33d656(0x215)];_0x21c5a6&&this[_0x33d656(0xb86)]()&&_0x21c5a6[_0x33d656(0x4cd)](_0x33d656(0x91e));for(;;){const _0x2067e1=this['getNextSubjectFromPool']();if(!_0x2067e1)return null;if(_0x2067e1['isBattleMember']()&&_0x2067e1[_0x33d656(0x475)]())return _0x2067e1;}},BattleManager[_0x29c7b3(0x4ef)]=function(){const _0x208532=_0x29c7b3;if(this['_forcedBattlers'][_0x208532(0xba7)]>0x0){const _0x9ab102=this[_0x208532(0xb12)][_0x208532(0x43d)](),_0x49a111=_0x9ab102[0x0];return _0x49a111['_actions']=_0x49a111['_actions']||[],_0x49a111[_0x208532(0x8f1)][0x0]=_0x9ab102[0x1],_0x49a111;}else return this[_0x208532(0x43e)][_0x208532(0x43d)]();},VisuMZ['BattleCore']['Game_Battler_forceAction']=Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x728)],Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x728)]=function(_0xb83322,_0x126527){const _0x466e3b=_0x29c7b3;VisuMZ['BattleCore'][_0x466e3b(0x51b)][_0x466e3b(0x8d6)](this,_0xb83322,_0x126527),this[_0x466e3b(0x8f1)][this[_0x466e3b(0x8f1)][_0x466e3b(0xba7)]-0x1][_0x466e3b(0x80a)]=!![];},Game_Interpreter[_0x29c7b3(0xc03)][_0x29c7b3(0xa68)]=function(_0xf81e40){return this['iterateBattler'](_0xf81e40[0x0],_0xf81e40[0x1],_0xff778b=>{const _0x5c4f73=_0x16cb;!_0xff778b['isDeathStateAffected']()&&(_0xff778b[_0x5c4f73(0x728)](_0xf81e40[0x2],_0xf81e40[0x3]),BattleManager[_0x5c4f73(0x728)](_0xff778b));}),!![];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xbe8)]=Game_Battler[_0x29c7b3(0xc03)]['makeSpeed'],Game_Battler['prototype'][_0x29c7b3(0x82b)]=function(){const _0x5388a1=_0x29c7b3;VisuMZ[_0x5388a1(0x2e2)]['Game_Battler_makeSpeed'][_0x5388a1(0x8d6)](this),this['_actions']['length']<=0x0&&(this['_speed']=Number[_0x5388a1(0x4f6)]);},BattleManager[_0x29c7b3(0x440)]=function(){const _0x459d42=_0x29c7b3;if(VisuMZ[_0x459d42(0x2e2)]['Settings']['Damage'][_0x459d42(0x578)]??!![])return![];return SceneManager['isSceneBattle']()&&this['_endingBattle'];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x818)]=BattleManager['selectNextCommand'],BattleManager[_0x29c7b3(0xbb0)]=function(){const _0x3581a6=_0x29c7b3;this[_0x3581a6(0xb86)]()?this[_0x3581a6(0x76f)]():VisuMZ[_0x3581a6(0x2e2)]['BattleManager_selectNextCommand'][_0x3581a6(0x8d6)](this);},BattleManager['selectNextCommandTpb']=function(){const _0x52ec30=_0x29c7b3;if(this[_0x52ec30(0x1d3)]){if(this['_currentActor'][_0x52ec30(0xbb0)]())return;this['finishActorInput'](),this[_0x52ec30(0x181)](),!this[_0x52ec30(0x215)]&&!this['_currentActor']&&SceneManager[_0x52ec30(0x364)]['updateBattleProcess']();}else!this['_subject']&&this[_0x52ec30(0x38b)]();},BattleManager[_0x29c7b3(0x181)]=function(){const _0x3e6c24=_0x29c7b3;(!this[_0x3e6c24(0x1d2)]()||this['needsActorInputCancel']())&&(this[_0x3e6c24(0x871)]&&(!$gameParty[_0x3e6c24(0xaad)]()[_0x3e6c24(0xba2)](this['_tpbSceneChangeCacheActor'])&&(this[_0x3e6c24(0x871)]=null)),!this[_0x3e6c24(0x871)]?(this['cancelActorInput'](),this[_0x3e6c24(0x1d3)]=null,this[_0x3e6c24(0x595)]=![]):this['revertTpbCachedActor']());},BattleManager[_0x29c7b3(0x739)]=function(){const _0x5a03bf=_0x29c7b3;!$gameParty['battleMembers']()[_0x5a03bf(0xba2)](this['_tpbSceneChangeCacheActor'])&&(this[_0x5a03bf(0x871)]=null),this[_0x5a03bf(0x871)]?(this[_0x5a03bf(0x1d3)]=this['_tpbSceneChangeCacheActor'],this[_0x5a03bf(0x1d3)][_0x5a03bf(0x72b)]='charged',this[_0x5a03bf(0x595)]=!![],this[_0x5a03bf(0x871)]=null):(this[_0x5a03bf(0x2f9)](),this[_0x5a03bf(0x1d3)]=null,this['_inputting']=![]);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xb0d)]=BattleManager['isTpbMainPhase'],BattleManager[_0x29c7b3(0x9c4)]=function(){const _0x5af764=_0x29c7b3;return this[_0x5af764(0x1f8)]==='custom'?this[_0x5af764(0x35d)]():VisuMZ['BattleCore'][_0x5af764(0xb0d)]['call'](this);},BattleManager[_0x29c7b3(0x35d)]=function(){const _0x5dd8a8=_0x29c7b3;return this[_0x5dd8a8(0x43a)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x47b)]=BattleManager[_0x29c7b3(0x2f9)],BattleManager['cancelActorInput']=function(){const _0x574726=_0x29c7b3;this[_0x574726(0xb86)]()&&this[_0x574726(0x1f8)]===_0x574726(0x8e6)&&(this[_0x574726(0x1d3)]=null),VisuMZ[_0x574726(0x2e2)][_0x574726(0x47b)][_0x574726(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)]['BattleManager_inputtingAction']=BattleManager['inputtingAction'],BattleManager[_0x29c7b3(0x83c)]=function(){const _0x27b6b1=_0x29c7b3,_0x4bef36=this[_0x27b6b1(0x1d3)];if(_0x4bef36&&!_0x4bef36[_0x27b6b1(0x83c)]()){const _0x10173f=_0x4bef36[_0x27b6b1(0x2ff)];_0x4bef36[_0x27b6b1(0x8f1)][_0x10173f]=new Game_Action(_0x4bef36);}return VisuMZ[_0x27b6b1(0x2e2)][_0x27b6b1(0x541)][_0x27b6b1(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)]['BattleManager_checkSubstitute']=BattleManager[_0x29c7b3(0x656)],BattleManager['checkSubstitute']=function(_0x5641ec){const _0x124564=_0x29c7b3;if(this[_0x124564(0x41e)]['isForFriend']())return![];return VisuMZ['BattleCore'][_0x124564(0xb6a)]['call'](this,_0x5641ec);},SceneManager[_0x29c7b3(0x429)]=function(){const _0x4007cc=_0x29c7b3;return this['_scene']&&this[_0x4007cc(0x364)][_0x4007cc(0xba3)]===Scene_Battle;},SceneManager[_0x29c7b3(0xa4a)]=function(){const _0x284d2b=_0x29c7b3;return Spriteset_Battle['prototype'][_0x284d2b(0x66c)]();},SceneManager[_0x29c7b3(0xa84)]=function(){const _0x47dbcd=_0x29c7b3;if(SceneManager[_0x47dbcd(0x45e)](Scene_Options))return!![];return![];},SceneManager[_0x29c7b3(0xa26)]=function(){const _0x45f19b=_0x29c7b3;if(SceneManager[_0x45f19b(0x8fb)](Scene_Options))return!![];return![];},SceneManager[_0x29c7b3(0x94a)]=function(_0x276d88){const _0x4747fd=_0x29c7b3;if(!SceneManager[_0x4747fd(0x429)]())return!![];const _0x1aa555=[_0x4747fd(0x5c5),_0x4747fd(0x7c6),'Scene_QuickLoad'];return _0x1aa555[_0x4747fd(0xba2)](_0x276d88['name']);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x51a)]=SceneManager[_0x29c7b3(0x13a)],SceneManager[_0x29c7b3(0x13a)]=function(_0x9566d2){const _0x1f5bca=_0x29c7b3;if(!SceneManager[_0x1f5bca(0x94a)](_0x9566d2))return this[_0x1f5bca(0x574)](_0x9566d2);VisuMZ[_0x1f5bca(0x2e2)][_0x1f5bca(0x51a)][_0x1f5bca(0x8d6)](this,_0x9566d2);},SceneManager[_0x29c7b3(0x574)]=function(_0x25820d){const _0x35052a=_0x29c7b3;if(!$gameTemp[_0x35052a(0x472)]())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this[_0x35052a(0xac2)]=!![];let _0x4cd901='';_0x4cd901+=_0x35052a(0xb9c),_0x4cd901+=_0x35052a(0xb36)['format'](_0x25820d[_0x35052a(0x161)]),alert(_0x4cd901);},VisuMZ[_0x29c7b3(0x2e2)]['Game_Temp_initialize']=Game_Temp['prototype'][_0x29c7b3(0x1a0)],Game_Temp['prototype'][_0x29c7b3(0x1a0)]=function(){const _0x13305c=_0x29c7b3;VisuMZ[_0x13305c(0x2e2)]['Game_Temp_initialize'][_0x13305c(0x8d6)](this),this[_0x13305c(0x727)]=[];},VisuMZ['BattleCore'][_0x29c7b3(0xaea)]=Game_Temp[_0x29c7b3(0xc03)]['requestAnimation'],Game_Temp[_0x29c7b3(0xc03)][_0x29c7b3(0x2fa)]=function(_0x5219cb,_0x1c1053,_0x2d4d87){const _0x3364a3=_0x29c7b3;_0x5219cb['remove'](null)[_0x3364a3(0x5e2)](undefined),_0x5219cb=_0x5219cb[_0x3364a3(0x55e)]((_0x2ee1aa,_0x52545f,_0xf4f1f6)=>_0xf4f1f6[_0x3364a3(0x617)](_0x2ee1aa)===_0x52545f);SceneManager[_0x3364a3(0x429)]()&&SceneManager[_0x3364a3(0xa4a)]()&&(_0x2d4d87=!_0x2d4d87);VisuMZ[_0x3364a3(0x2e2)][_0x3364a3(0xaea)][_0x3364a3(0x8d6)](this,_0x5219cb,_0x1c1053,_0x2d4d87);SceneManager['isSceneBattle']()&&BattleManager[_0x3364a3(0x690)][_0x3364a3(0x790)]();for(const _0x531d46 of _0x5219cb){_0x531d46&&_0x531d46[_0x3364a3(0xb3d)]&&_0x531d46['isEnemy']()&&_0x531d46[_0x3364a3(0xc25)]();}},Game_Temp['prototype']['setLastPluginCommandInterpreter']=function(_0x2f5000){this['_lastPluginCommandInterpreter']=_0x2f5000;},Game_Temp[_0x29c7b3(0xc03)]['getLastPluginCommandInterpreter']=function(){const _0x327afa=_0x29c7b3;return this[_0x327afa(0x467)];},Game_Temp[_0x29c7b3(0xc03)][_0x29c7b3(0x746)]=function(){const _0x3ce121=_0x29c7b3;this[_0x3ce121(0x46e)]=undefined;},Game_Temp[_0x29c7b3(0xc03)]['applyForcedGameTroopSettingsBattleCore']=function(_0x41a0c5){const _0x642eec=_0x29c7b3;$gameMap&&$dataMap&&$dataMap[_0x642eec(0x124)]&&this[_0x642eec(0x409)]($dataMap[_0x642eec(0x124)]);const _0x343bf8=$dataTroops[_0x41a0c5];if(_0x343bf8){let _0x4882a9=DataManager[_0x642eec(0x4ac)](_0x343bf8['id']);this[_0x642eec(0x409)](_0x4882a9);}},Game_Temp[_0x29c7b3(0xc03)][_0x29c7b3(0x409)]=function(_0x4a7e77){const _0x37b7b3=_0x29c7b3;if(!_0x4a7e77)return;if(_0x4a7e77[_0x37b7b3(0x290)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x54777e=String(RegExp['$1']);if(_0x54777e[_0x37b7b3(0x290)](/DEFAULT/i))this['_forcedBattleLayout']=_0x37b7b3(0x959);else{if(_0x54777e['match'](/LIST/i))this[_0x37b7b3(0x46e)]=_0x37b7b3(0x72f);else{if(_0x54777e['match'](/XP/i))this[_0x37b7b3(0x46e)]='xp';else{if(_0x54777e['match'](/PORTRAIT/i))this['_forcedBattleLayout']=_0x37b7b3(0xa7c);else{if(_0x54777e[_0x37b7b3(0x290)](/BORDER/i))this[_0x37b7b3(0x46e)]=_0x37b7b3(0x5d2);else{if(_0x54777e[_0x37b7b3(0x290)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x37b7b3(0x2df)]?this[_0x37b7b3(0x46e)]=_0x37b7b3(0x93f):this[_0x37b7b3(0x46e)]=_0x37b7b3(0x959);else _0x54777e[_0x37b7b3(0x290)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x37b7b3(0x7b5)]?this[_0x37b7b3(0x46e)]=_0x37b7b3(0x286):this[_0x37b7b3(0x46e)]='default');}}}}}}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x40b)]=Game_Temp[_0x29c7b3(0xc03)]['requestBalloon'],Game_Temp[_0x29c7b3(0xc03)][_0x29c7b3(0x9c2)]=function(_0x5bb3da,_0x3e5502){const _0x192f7f=_0x29c7b3;SceneManager['isSceneBattle']()?this[_0x192f7f(0x834)](_0x5bb3da,_0x3e5502):VisuMZ[_0x192f7f(0x2e2)]['Game_Temp_requestBalloon'][_0x192f7f(0x8d6)](this,_0x5bb3da,_0x3e5502);},Game_Temp[_0x29c7b3(0xc03)]['requestBattleBalloon']=function(_0x3604a2,_0x409a05){const _0x5de2da=_0x29c7b3,_0x142df2={'target':_0x3604a2,'balloonId':_0x409a05};this[_0x5de2da(0x727)]=this[_0x5de2da(0x727)]||[],this['_battleBalloonQueue'][_0x5de2da(0x13a)](_0x142df2);},Game_Temp[_0x29c7b3(0xc03)][_0x29c7b3(0x77f)]=function(){const _0x2094da=_0x29c7b3;return this[_0x2094da(0x727)]=this[_0x2094da(0x727)]||[],this[_0x2094da(0x727)][_0x2094da(0x43d)]();},Game_Temp[_0x29c7b3(0xc03)][_0x29c7b3(0xaa5)]=function(){this['_battleBalloonQueue']=[];},Spriteset_Battle['prototype'][_0x29c7b3(0x8fd)]=function(){const _0x455394=_0x29c7b3;this[_0x455394(0x49f)]===undefined&&(this[_0x455394(0x49f)]=[]);for(const _0x276609 of this[_0x455394(0x49f)]){!_0x276609[_0x455394(0x4d8)]()&&this[_0x455394(0x9dd)](_0x276609);}this[_0x455394(0x6a0)]();},Spriteset_Battle[_0x29c7b3(0xc03)]['processBattleBalloonRequests']=function(){const _0x3124b3=_0x29c7b3;for(;;){const _0x49fb32=$gameTemp[_0x3124b3(0x77f)]();if(_0x49fb32)this['createBattleBalloon'](_0x49fb32);else break;}},Spriteset_Battle[_0x29c7b3(0xc03)]['createBattleBalloon']=function(_0x31c334){const _0x599cc7=_0x29c7b3,_0x160581=this[_0x599cc7(0x7dd)](_0x31c334[_0x599cc7(0x1c4)]);if(_0x160581){let _0x20d654=null;Imported[_0x599cc7(0x482)]&&Array[_0x599cc7(0x447)](_0x31c334[_0x599cc7(0xa32)])?_0x20d654=new Sprite_IconBalloon():_0x20d654=new Sprite_Balloon(),_0x20d654[_0x599cc7(0x653)]=_0x31c334['target'],_0x20d654[_0x599cc7(0x424)]=_0x160581,_0x20d654[_0x599cc7(0x424)][_0x599cc7(0x3f2)]=_0x160581,_0x20d654[_0x599cc7(0xb10)](_0x160581,_0x31c334[_0x599cc7(0xa32)]),BattleManager['addChildToUiContainer'](_0x20d654),this[_0x599cc7(0x49f)]['push'](_0x20d654);}},Spriteset_Battle['prototype'][_0x29c7b3(0x9dd)]=function(_0x5c13fc){const _0x311d63=_0x29c7b3;this[_0x311d63(0x49f)][_0x311d63(0x5e2)](_0x5c13fc),BattleManager[_0x311d63(0x51c)](_0x5c13fc),_0x5c13fc[_0x311d63(0x314)]();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x76d)]=function(_0x11cc20,_0x5617b6){},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x671)]=function(){return![];},Spriteset_Battle['prototype'][_0x29c7b3(0x841)]=function(){const _0x6ecdf=_0x29c7b3;return this[_0x6ecdf(0x49f)]=this[_0x6ecdf(0x49f)]||[],this[_0x6ecdf(0x49f)][_0x6ecdf(0xba7)]>0x0;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x532)]=Game_System['prototype']['initialize'],Game_System[_0x29c7b3(0xc03)][_0x29c7b3(0x1a0)]=function(){const _0x6bc8ba=_0x29c7b3;VisuMZ[_0x6bc8ba(0x2e2)][_0x6bc8ba(0x532)][_0x6bc8ba(0x8d6)](this),this[_0x6bc8ba(0x7be)]();},Game_System[_0x29c7b3(0xc03)][_0x29c7b3(0x7be)]=function(){const _0x16af67=_0x29c7b3;this[_0x16af67(0x852)]=this[_0x16af67(0x852)]||[];},Game_System[_0x29c7b3(0xc03)]['getDefeatedEnemies']=function(){const _0xcdba79=_0x29c7b3;if(this[_0xcdba79(0x852)]===undefined)this[_0xcdba79(0x7be)]();return this[_0xcdba79(0x852)];},Game_System[_0x29c7b3(0xc03)][_0x29c7b3(0x4aa)]=function(_0x422f07){const _0xc4ba60=_0x29c7b3;if(this[_0xc4ba60(0x852)]===undefined)this[_0xc4ba60(0x7be)]();if(!_0x422f07)return;if(this[_0xc4ba60(0x852)][_0xc4ba60(0xba2)](_0x422f07))return;this[_0xc4ba60(0x852)][_0xc4ba60(0x13a)](_0x422f07),this[_0xc4ba60(0x852)][_0xc4ba60(0x3ae)]((_0x43bc1f,_0x4aecb1)=>_0x43bc1f-_0x4aecb1);},VisuMZ[_0x29c7b3(0x2e2)]['Game_BattlerBase_addNewState']=Game_BattlerBase['prototype'][_0x29c7b3(0x224)],Game_BattlerBase[_0x29c7b3(0xc03)]['addNewState']=function(_0x3c129c){const _0x947e88=_0x29c7b3,_0x283585=this[_0x947e88(0x475)](),_0x4f3896=this[_0x947e88(0x170)]();VisuMZ[_0x947e88(0x2e2)][_0x947e88(0x8c5)]['call'](this,_0x3c129c),this[_0x947e88(0xb3d)]()&&_0x283585&&this[_0x947e88(0x7cd)]()&&(this[_0x947e88(0x913)]=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x947e88(0x4aa)](this[_0x947e88(0x2fe)]())),SceneManager[_0x947e88(0x429)]()&&_0x4f3896!==this[_0x947e88(0x170)]()&&(this['battler']()&&this[_0x947e88(0xa65)]()['refreshMotion']());},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x3fa)]=function(){const _0x4309eb=_0x29c7b3;return $gameSystem[_0x4309eb(0x40e)]()[_0x4309eb(0xba2)](this['_enemyId']);},VisuMZ[_0x29c7b3(0x2e2)]['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x899)],Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x899)]=function(_0x180437){const _0x1a49c0=_0x29c7b3,_0xb266d8=this['_states']['includes'](_0x180437),_0x1e8c1e=this[_0x1a49c0(0x170)]();VisuMZ[_0x1a49c0(0x2e2)][_0x1a49c0(0x388)]['call'](this,_0x180437),this[_0x1a49c0(0xb3d)]()&&_0x180437===this['deathStateId']()&&this['isAlive']()&&(this[_0x1a49c0(0x913)]=![]),!this[_0x1a49c0(0x536)]&&!this[_0x1a49c0(0x463)]&&SceneManager[_0x1a49c0(0x429)]()&&(_0xb266d8&&!this[_0x1a49c0(0x756)][_0x1a49c0(0xba2)](_0x180437)&&this[_0x1a49c0(0x3b5)](),_0x1e8c1e!==this['stateMotionIndex']()&&(this['battler']()&&this['battler']()[_0x1a49c0(0x3c5)]()));},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x40f)]=Game_Action['prototype'][_0x29c7b3(0x917)],Game_Action['prototype'][_0x29c7b3(0x917)]=function(){const _0xf0dcfa=_0x29c7b3;VisuMZ[_0xf0dcfa(0x2e2)][_0xf0dcfa(0x40f)][_0xf0dcfa(0x8d6)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0xf0dcfa(0x65d)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0xf0dcfa(0x415)]='default',this['clearTargetBattlerKey']();},Game_Action['prototype']['clearTargetBattlerKey']=function(){const _0x1ba7c7=_0x29c7b3;this[_0x1ba7c7(0xadb)]='';},VisuMZ[_0x29c7b3(0x2e2)]['Game_Action_setSubject']=Game_Action['prototype'][_0x29c7b3(0x2bd)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x2bd)]=function(_0x36762f){const _0x2dbc8c=_0x29c7b3;VisuMZ[_0x2dbc8c(0x2e2)][_0x2dbc8c(0x897)][_0x2dbc8c(0x8d6)](this,_0x36762f),this['clearTargetBattlerKey']();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xb5e)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x4a7)],Game_Action['prototype'][_0x29c7b3(0x4a7)]=function(_0x5467ea){const _0x2cc6c0=_0x29c7b3;VisuMZ[_0x2cc6c0(0x2e2)][_0x2cc6c0(0xb5e)][_0x2cc6c0(0x8d6)](this,_0x5467ea),this[_0x2cc6c0(0x80b)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x2c3)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x45b)],Game_Action[_0x29c7b3(0xc03)]['setItem']=function(_0x519763){const _0x47265d=_0x29c7b3;VisuMZ[_0x47265d(0x2e2)][_0x47265d(0x2c3)][_0x47265d(0x8d6)](this,_0x519763),this[_0x47265d(0x80b)]();},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x1d4)]=function(_0x303412,_0x436ecd){const _0x3b9568=_0x29c7b3;return VisuMZ[_0x3b9568(0x2e2)][_0x3b9568(0xc14)][_0x3b9568(0x9c7)][_0x3b9568(0xb4f)][_0x3b9568(0x8d6)](this,_0x303412,_0x436ecd);},Game_Action['prototype'][_0x29c7b3(0x78c)]=function(_0x41617f,_0xf2b3e0){const _0x2dde73=_0x29c7b3;return VisuMZ[_0x2dde73(0x2e2)][_0x2dde73(0xc14)]['Damage'][_0x2dde73(0xad0)]['call'](this,_0x41617f,_0xf2b3e0);},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xc27)]=function(_0x4071b1,_0x28e890){const _0x5a77ba=_0x29c7b3;return VisuMZ[_0x5a77ba(0x2e2)][_0x5a77ba(0xc14)]['Damage'][_0x5a77ba(0x110)]['call'](this,_0x4071b1,_0x28e890);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x408)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x243)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x243)]=function(_0x18291){const _0x5e739e=_0x29c7b3,_0x38dbaf=this[_0x5e739e(0x7cc)]()[_0x5e739e(0x124)];if(_0x38dbaf[_0x5e739e(0x290)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x38dbaf[_0x5e739e(0x290)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x35e9c3=VisuMZ[_0x5e739e(0x2e2)][_0x5e739e(0x408)][_0x5e739e(0x8d6)](this,_0x18291);return _0x35e9c3=this['_multipliers'][_0x5e739e(0xafa)]*_0x35e9c3+this[_0x5e739e(0x65d)][_0x5e739e(0x313)],$gameParty[_0x5e739e(0x316)]()&&(_0x35e9c3=this[_0x5e739e(0xa80)](_0x35e9c3,_0x18291)),_0x35e9c3;}}},VisuMZ['BattleCore'][_0x29c7b3(0x837)]=Game_Action['prototype'][_0x29c7b3(0x880)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x880)]=function(_0xc755db){const _0xa57ad6=_0x29c7b3;this['_bypass_applyBattleCoreHitRateJS']=!![],VisuMZ[_0xa57ad6(0x2e2)][_0xa57ad6(0x837)][_0xa57ad6(0x8d6)](this,_0xc755db),this[_0xa57ad6(0x457)]=undefined;},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x569)]=function(_0x3c2961){const _0x286568=_0x29c7b3;window[_0x286568(0x54d)]=this,window['a']=this[_0x286568(0x812)](),window['b']=_0x3c2961,window[_0x286568(0xb09)]=this[_0x286568(0x812)](),window['target']=_0x3c2961,window[_0x286568(0x735)]=this[_0x286568(0x7cc)](),window[_0x286568(0xa1a)]=this[_0x286568(0x7cc)](),window[_0x286568(0x7cc)]=this[_0x286568(0x7cc)]();},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x2dc)]=function(_0x2f601b){const _0xe9ee52=_0x29c7b3;window['action']=undefined,window['a']=undefined,window['b']=undefined,window[_0xe9ee52(0xb09)]=undefined,window[_0xe9ee52(0x1c4)]=undefined,window[_0xe9ee52(0x735)]=undefined,window['skill']=undefined,window['item']=undefined;},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xa80)]=function(_0x5285b4,_0xf159f){const _0x413320=_0x29c7b3;if(this[_0x413320(0x457)])return _0x5285b4;this[_0x413320(0x569)](_0xf159f),window[_0x413320(0x393)]=_0x5285b4;const _0x7fc4cb=VisuMZ[_0x413320(0x2e2)][_0x413320(0x1f2)];if(this[_0x413320(0x7cc)]()){if(this[_0x413320(0x7cc)]()[_0x413320(0x124)][_0x413320(0x290)](_0x7fc4cb[_0x413320(0x2bf)])){const _0x1f09b1=String(RegExp['$1']);try{eval(_0x1f09b1);}catch(_0x122191){if($gameTemp[_0x413320(0x472)]())console[_0x413320(0x22d)](_0x122191);}}}{const _0x686481=this[_0x413320(0x812)]()['traitObjects']();for(const _0x943161 of _0x686481){if(!_0x943161)continue;if(_0x943161['note'][_0x413320(0x290)](_0x7fc4cb[_0x413320(0x418)])){const _0x5cff44=String(RegExp['$1']);try{eval(_0x5cff44);}catch(_0x14831f){if($gameTemp[_0x413320(0x472)]())console[_0x413320(0x22d)](_0x14831f);}}}}{const _0x1212b0=_0xf159f[_0x413320(0xa6d)]();for(const _0x385a39 of _0x1212b0){if(!_0x385a39)continue;if(_0x385a39[_0x413320(0x124)]['match'](_0x7fc4cb['jsAccuracyAsTarget'])){const _0x359982=String(RegExp['$1']);try{eval(_0x359982);}catch(_0x55454c){if($gameTemp['isPlaytest']())console[_0x413320(0x22d)](_0x55454c);}}}}return _0x5285b4=window[_0x413320(0x393)],this[_0x413320(0x2dc)](_0xf159f),_0x5285b4;},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x7f6)]=function(_0x5679ba){const _0x21e0ab=_0x29c7b3;if(!this[_0x21e0ab(0x7cc)]()['damage'][_0x21e0ab(0x6ad)])return 0x0;let _0x33c483=VisuMZ[_0x21e0ab(0x2e2)][_0x21e0ab(0xc14)][_0x21e0ab(0x9c7)][_0x21e0ab(0x859)][_0x21e0ab(0x8d6)](this,_0x5679ba);return _0x33c483=this[_0x21e0ab(0x65d)][_0x21e0ab(0x17d)]*_0x33c483+this['_multipliers'][_0x21e0ab(0x3b7)],$gameParty[_0x21e0ab(0x316)]()&&(_0x33c483=this[_0x21e0ab(0x6cf)](_0x33c483,_0x5679ba)),_0x33c483;},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x6cf)]=function(_0x5af749,_0xf07e54){const _0x4b3cdc=_0x29c7b3;this[_0x4b3cdc(0x569)](_0xf07e54),window['rate']=_0x5af749;const _0x2d5154=VisuMZ[_0x4b3cdc(0x2e2)][_0x4b3cdc(0x1f2)];{const _0x4a6ae8=this[_0x4b3cdc(0x812)]()[_0x4b3cdc(0xa6d)]();for(const _0x137c6b of _0x4a6ae8){if(!_0x137c6b)continue;if(_0x137c6b['note'][_0x4b3cdc(0x290)](_0x2d5154[_0x4b3cdc(0x24b)])){const _0x18a70b=String(RegExp['$1']);try{eval(_0x18a70b);}catch(_0x4540cf){if($gameTemp[_0x4b3cdc(0x472)]())console[_0x4b3cdc(0x22d)](_0x4540cf);}}}}{const _0x24c818=_0xf07e54[_0x4b3cdc(0xa6d)]();for(const _0xc4e980 of _0x24c818){if(!_0xc4e980)continue;if(_0xc4e980[_0x4b3cdc(0x124)][_0x4b3cdc(0x290)](_0x2d5154[_0x4b3cdc(0x849)])){const _0x47bcb7=String(RegExp['$1']);try{eval(_0x47bcb7);}catch(_0x492d6d){if($gameTemp['isPlaytest']())console[_0x4b3cdc(0x22d)](_0x492d6d);}}}}return _0x5af749=window['rate'],this[_0x4b3cdc(0x2dc)](_0xf07e54),_0x5af749;},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x6cf)]=function(_0x2989de,_0x30f5df){const _0x18904c=_0x29c7b3;this[_0x18904c(0x569)](_0x30f5df);for(const _0x374e72 of this['subject']()[_0x18904c(0xa6d)]()){if(!_0x374e72)continue;key=VisuMZ[_0x18904c(0x2e2)]['createKeyJS'](_0x374e72,_0x18904c(0x24b)),VisuMZ['BattleCore']['JS'][key]&&(_0x2989de=VisuMZ[_0x18904c(0x2e2)]['JS'][key]['call'](this,this[_0x18904c(0x812)](),_0x30f5df,this[_0x18904c(0x7cc)](),_0x2989de));}for(const _0x19c66c of _0x30f5df[_0x18904c(0xa6d)]()){if(!_0x19c66c)continue;key=VisuMZ['BattleCore'][_0x18904c(0x978)](_0x19c66c,_0x18904c(0x849)),VisuMZ[_0x18904c(0x2e2)]['JS'][key]&&(_0x2989de=VisuMZ[_0x18904c(0x2e2)]['JS'][key][_0x18904c(0x8d6)](this,this[_0x18904c(0x812)](),_0x30f5df,this[_0x18904c(0x7cc)](),_0x2989de));}return this[_0x18904c(0x2dc)](_0x30f5df),_0x2989de;},Game_Action[_0x29c7b3(0xc03)]['applyCritical']=function(_0x577ef7){const _0x4ab4ad=_0x29c7b3;return _0x577ef7=VisuMZ['BattleCore'][_0x4ab4ad(0xc14)][_0x4ab4ad(0x9c7)][_0x4ab4ad(0x473)][_0x4ab4ad(0x8d6)](this,_0x577ef7),_0x577ef7=this[_0x4ab4ad(0x65d)][_0x4ab4ad(0x454)]*_0x577ef7+this[_0x4ab4ad(0x65d)][_0x4ab4ad(0x3c0)],_0x577ef7;},VisuMZ[_0x29c7b3(0x2e2)]['Game_Action_evalDamageFormula']=Game_Action[_0x29c7b3(0xc03)]['evalDamageFormula'],Game_Action['prototype'][_0x29c7b3(0xb6e)]=function(_0x4852d4){const _0x32b8fd=_0x29c7b3;if(this['_customDamageFormula']!=='default')return this['customDamageFormula'](_0x4852d4);else return DataManager['getDamageStyle'](this[_0x32b8fd(0x7cc)]())===_0x32b8fd(0x61d)?VisuMZ[_0x32b8fd(0x2e2)]['Game_Action_evalDamageFormula']['call'](this,_0x4852d4):this['evalDamageFormulaBattleCore'](_0x4852d4);},Game_Action['prototype'][_0x29c7b3(0xb91)]=function(_0x3f3f98){const _0x4b6361=_0x29c7b3;this[_0x4b6361(0x415)]=_0x3f3f98;},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xbac)]=function(_0x118938){const _0x8a88f0=_0x29c7b3,_0x373cfb=this[_0x8a88f0(0x7cc)](),_0x31cfd9=_0x373cfb[_0x8a88f0(0x969)][_0x8a88f0(0x697)];_0x373cfb[_0x8a88f0(0x969)][_0x8a88f0(0x697)]=this['_customDamageFormula'];let _0x39107b=VisuMZ[_0x8a88f0(0x2e2)][_0x8a88f0(0x293)][_0x8a88f0(0x8d6)](this,_0x118938);return _0x373cfb[_0x8a88f0(0x969)]['formula']=_0x31cfd9,_0x39107b;},Game_Action[_0x29c7b3(0xc03)]['damageStyle']=function(){const _0x26c5ee=_0x29c7b3;if(this['item']()[_0x26c5ee(0x124)][_0x26c5ee(0x290)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x20fbea=String(RegExp['$1'])[_0x26c5ee(0x36b)]()[_0x26c5ee(0x89a)]();return _0x20fbea;}return _0x26c5ee(0x61d);},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x7ff)]=function(_0x419e98){const _0xb2bcd2=_0x29c7b3,_0xa6ba5e=DataManager[_0xb2bcd2(0x7c4)](this[_0xb2bcd2(0x7cc)]()),_0x498d3f=VisuMZ['DamageStyles'][_0xa6ba5e];try{return _0x498d3f[_0xb2bcd2(0x9df)]['call'](this,_0x419e98);}catch(_0x576202){if($gameTemp['isPlaytest']())console[_0xb2bcd2(0x22d)](_0x576202);return VisuMZ[_0xb2bcd2(0x2e2)][_0xb2bcd2(0x293)][_0xb2bcd2(0x8d6)](this);}},Game_Action['prototype'][_0x29c7b3(0x5c7)]=function(_0x1969bf,_0x140e3a){const _0x354cb2=_0x29c7b3;if(this[_0x354cb2(0x8ca)]())return _0x140e3a;const _0x116ab8=this[_0x354cb2(0x812)](),_0x1182ed=_0x1969bf;let _0x1f5fb0=[],_0x297edc=[];_0x1f5fb0[_0x354cb2(0x13a)](this[_0x354cb2(0x18e)][_0x354cb2(0x9f0)],this[_0x354cb2(0x18e)][_0x354cb2(0x2d1)]),_0x297edc[_0x354cb2(0x13a)](this[_0x354cb2(0x18e)][_0x354cb2(0x1c5)],this[_0x354cb2(0x18e)][_0x354cb2(0x189)]);const _0x57a040=this[_0x354cb2(0xa1f)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x552579=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x77e33e=this[_0x354cb2(0xa1f)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x340395=this[_0x354cb2(0xa1f)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x1f5fb0=_0x1f5fb0[_0x354cb2(0xaaf)](_0x1182ed['traitObjects']()['map'](_0x56eed7=>_0x56eed7&&_0x56eed7['note'][_0x354cb2(0x290)](_0x57a040)?Number(RegExp['$1']):0x0)),_0x297edc=_0x297edc[_0x354cb2(0xaaf)](_0x1182ed[_0x354cb2(0xa6d)]()[_0x354cb2(0x8ea)](_0x3600c8=>_0x3600c8&&_0x3600c8['note'][_0x354cb2(0x290)](_0x552579)?Number(RegExp['$1'])/0x64:0x0)),_0x1f5fb0=_0x1f5fb0[_0x354cb2(0xaaf)](_0x116ab8[_0x354cb2(0xa6d)]()[_0x354cb2(0x8ea)](_0x4e950c=>_0x4e950c&&_0x4e950c[_0x354cb2(0x124)][_0x354cb2(0x290)](_0x77e33e)?Number(RegExp['$1']):0x0)),_0x297edc=_0x297edc['concat'](_0x116ab8['traitObjects']()[_0x354cb2(0x8ea)](_0x1e8d0d=>_0x1e8d0d&&_0x1e8d0d[_0x354cb2(0x124)][_0x354cb2(0x290)](_0x340395)?Number(RegExp['$1'])/0x64:0x0)),this[_0x354cb2(0x7cc)]()[_0x354cb2(0x124)][_0x354cb2(0x290)](_0x77e33e)&&_0x1f5fb0[_0x354cb2(0x13a)](Number(RegExp['$1'])),this[_0x354cb2(0x7cc)]()[_0x354cb2(0x124)][_0x354cb2(0x290)](_0x340395)&&_0x297edc[_0x354cb2(0x13a)](Number(RegExp['$1'])),_0x140e3a=_0x1f5fb0['reduce']((_0x1cb00a,_0x2e1776)=>_0x1cb00a-_0x2e1776,_0x140e3a),_0x140e3a>0x0&&(_0x140e3a=_0x297edc[_0x354cb2(0xa1e)]((_0x4c56bf,_0x569673)=>_0x4c56bf*(0x1-_0x569673),_0x140e3a)),_0x140e3a;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x44a)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x6ef)],Game_Action['prototype'][_0x29c7b3(0x6ef)]=function(_0x162e13,_0x47eea9){const _0x39de2d=_0x29c7b3;_0x47eea9=_0x47eea9*this['_multipliers']['damageRate'],_0x47eea9+=this['_multipliers'][_0x39de2d(0xa15)]*(_0x47eea9>=0x0?0x1:-0x1),_0x47eea9=this[_0x39de2d(0x2d4)]('PreDamage%1JS',_0x162e13,_0x47eea9,![]),_0x47eea9=this['applyDamageCaps'](_0x47eea9),_0x47eea9>0x0?_0x47eea9=Math['ceil'](_0x47eea9):_0x47eea9=Math['floor'](_0x47eea9),this[_0x39de2d(0x483)]=_0x47eea9,this[_0x39de2d(0x10f)]=this[_0x39de2d(0x10f)]||0x0,this['_totalValue']+=_0x47eea9,VisuMZ[_0x39de2d(0x2e2)]['Game_Action_executeDamage']['call'](this,_0x162e13,_0x47eea9),this['applyBattleCoreJS'](_0x39de2d(0xc1c),_0x162e13,_0x47eea9,!![]);},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x56a)]=function(_0x5ae35a){const _0xf4e8dd=_0x29c7b3;if(this['isBypassDamageCap']())return _0x5ae35a;return _0x5ae35a=this['applySoftDamageCap'](_0x5ae35a),_0x5ae35a=this[_0xf4e8dd(0x315)](_0x5ae35a),_0x5ae35a;},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xa16)]=function(){const _0xd8f1bb=_0x29c7b3,_0x259f04=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0xd8f1bb(0x124)][_0xd8f1bb(0x290)](_0x259f04))return!![];if(this[_0xd8f1bb(0x812)]()['traitObjects']()[_0xd8f1bb(0x5af)](_0x10fd84=>_0x10fd84&&_0x10fd84['note']['match'](_0x259f04)))return!![];return!VisuMZ[_0xd8f1bb(0x2e2)][_0xd8f1bb(0xc14)][_0xd8f1bb(0x9c7)][_0xd8f1bb(0xb93)];},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x648)]=function(_0x2437fc){const _0x5e39bb=_0x29c7b3;if(!VisuMZ['BattleCore'][_0x5e39bb(0xc14)][_0x5e39bb(0x9c7)]['EnableSoftCap'])return _0x2437fc;const _0x10f678=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x5e39bb(0x7cc)]()[_0x5e39bb(0x124)]['match'](_0x10f678))return _0x2437fc;if(this[_0x5e39bb(0x812)]()[_0x5e39bb(0xa6d)]()['some'](_0x6a7c93=>_0x6a7c93&&_0x6a7c93['note'][_0x5e39bb(0x290)](_0x10f678)))return _0x2437fc;const _0x3393f7=_0x2437fc<0x0?-0x1:0x1;_0x2437fc=Math[_0x5e39bb(0x355)](_0x2437fc);let _0xadab0=this[_0x5e39bb(0x812)]()[_0x5e39bb(0x95e)]();this[_0x5e39bb(0x7cc)]()[_0x5e39bb(0x124)][_0x5e39bb(0x290)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0xadab0+=Number(RegExp['$1'])/0x64);_0xadab0=_0xadab0[_0x5e39bb(0x582)](0.01,0x1);const _0x47e197=this['getHardDamageCap'](),_0xf5ecfe=_0xadab0*_0x47e197;if(_0x2437fc>_0xf5ecfe&&_0x47e197>_0xf5ecfe){_0x2437fc-=_0xf5ecfe;const _0xabe531=VisuMZ[_0x5e39bb(0x2e2)]['Settings'][_0x5e39bb(0x9c7)]['DefaultSoftScaler'],_0x15e081=Math[_0x5e39bb(0xbaf)](0x1-_0x2437fc/((_0x47e197-_0xf5ecfe)*_0xabe531+_0x2437fc),0.01);_0x2437fc*=_0x15e081,_0x2437fc+=_0xf5ecfe;}return _0x2437fc*_0x3393f7;},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x23c)]=function(){const _0x3fb0e0=_0x29c7b3;return this[_0x3fb0e0(0x7cc)]()[_0x3fb0e0(0x124)][_0x3fb0e0(0x290)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this['subject']()['hardDamageCap']();},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x315)]=function(_0x2dd193){const _0x3b77fa=_0x29c7b3;let _0x2ddd0f=this['getHardDamageCap']();return _0x2dd193[_0x3b77fa(0x582)](-_0x2ddd0f,_0x2ddd0f);},Game_Action[_0x29c7b3(0xc03)]['shouldDisperseDamage']=function(){const _0x5e7ca9=_0x29c7b3;if(!this[_0x5e7ca9(0x7cc)]())return![];if(!$gameParty[_0x5e7ca9(0x316)]())return![];return(this[_0x5e7ca9(0x7cc)]()[_0x5e7ca9(0x124)]||'')['match'](/<DISPERSE DAMAGE>/i);},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x347)]=function(_0x29bc11){const _0x2a4e38=_0x29c7b3;if(this[_0x2a4e38(0x5c8)]()){let _0x4c28c0=BattleManager[_0x2a4e38(0x48a)];_0x29bc11/=_0x4c28c0[_0x2a4e38(0xba7)],this[_0x2a4e38(0x6ea)]()&&(_0x29bc11*=this[_0x2a4e38(0x812)]()['attackTimesAdd']()+0x1),_0x29bc11=_0x29bc11>0x0?Math[_0x2a4e38(0xc1a)](_0x29bc11):Math[_0x2a4e38(0x1ec)](_0x29bc11);}return _0x29bc11;},VisuMZ['BattleCore'][_0x29c7b3(0xb82)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x1d4)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x1d4)]=function(_0x303186,_0x10af63){const _0x23ea27=_0x29c7b3;let _0x34eb77=VisuMZ[_0x23ea27(0x2e2)]['Game_Action_makeDamageValueDisperse'][_0x23ea27(0x8d6)](this,_0x303186,_0x10af63);return this[_0x23ea27(0x347)](_0x34eb77);},Game_Action[_0x29c7b3(0xc03)]['itemEffectRecoverHp']=function(_0x1269ef,_0x38f0b7){const _0x3dc50e=_0x29c7b3;let _0x76fd23=(_0x1269ef[_0x3dc50e(0x1e9)]*_0x38f0b7[_0x3dc50e(0x232)]+_0x38f0b7[_0x3dc50e(0x4e7)])*_0x1269ef[_0x3dc50e(0x12b)];_0x76fd23=this[_0x3dc50e(0x347)](_0x76fd23),this['isItem']()&&(_0x76fd23*=this[_0x3dc50e(0x812)]()[_0x3dc50e(0x8a4)]),_0x76fd23=Math[_0x3dc50e(0x1ec)](_0x76fd23),_0x76fd23!==0x0&&(_0x1269ef['gainHp'](_0x76fd23),this[_0x3dc50e(0x52b)](_0x1269ef));},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x466)]=function(_0x3f01df,_0x2e2ca0){const _0x4ab2e1=_0x29c7b3;let _0x5dd551=(_0x3f01df[_0x4ab2e1(0x47f)]*_0x2e2ca0[_0x4ab2e1(0x232)]+_0x2e2ca0[_0x4ab2e1(0x4e7)])*_0x3f01df[_0x4ab2e1(0x12b)];_0x5dd551=this['disperseDamage'](_0x5dd551),this[_0x4ab2e1(0x9ce)]()&&(_0x5dd551*=this[_0x4ab2e1(0x812)]()[_0x4ab2e1(0x8a4)]),_0x5dd551=Math[_0x4ab2e1(0x1ec)](_0x5dd551),_0x5dd551!==0x0&&(_0x3f01df['gainMp'](_0x5dd551),this[_0x4ab2e1(0x52b)](_0x3f01df));},Game_Action[_0x29c7b3(0xc03)]['itemEffectGainTp']=function(_0x315b5f,_0x555554){const _0xd4871b=_0x29c7b3;let _0x374a18=Math[_0xd4871b(0x1ec)](_0x555554['value1']);_0x374a18=this[_0xd4871b(0x347)](_0x374a18),_0x374a18!==0x0&&(_0x315b5f[_0xd4871b(0x29c)](_0x374a18),this['makeSuccess'](_0x315b5f));},VisuMZ['BattleCore'][_0x29c7b3(0x8f6)]=Game_Action['prototype'][_0x29c7b3(0x5ed)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x5ed)]=function(_0x530674){const _0xf89da1=_0x29c7b3;if(_0x530674&&_0x530674['isEnemy']())_0x530674['resetNameTempVisibility']();this[_0xf89da1(0x2d4)]('PreApply%1JS',_0x530674,0x0,!![]),VisuMZ[_0xf89da1(0x2e2)][_0xf89da1(0x8f6)]['call'](this,_0x530674),this[_0xf89da1(0x2d4)](_0xf89da1(0x7eb),_0x530674,this[_0xf89da1(0x483)]||0x0,!![]),this[_0xf89da1(0x3fe)](_0x530674);},Game_Action[_0x29c7b3(0xc03)]['applyBattleCoreJS']=function(_0x1653d5,_0x3c7b99,_0x2fce6e,_0x5ce214){const _0x490618=_0x29c7b3;if(this[_0x490618(0x463)]||this[_0x490618(0x536)])return;_0x2fce6e=_0x2fce6e||0x0;const _0x3f7ea0=_0x2fce6e,_0x51fa90=VisuMZ[_0x490618(0x2e2)]['Settings'][_0x490618(0x9c6)],_0x428590=_0x1653d5[_0x490618(0x77d)]('');if(_0x51fa90[_0x428590]){_0x2fce6e=_0x51fa90[_0x428590][_0x490618(0x8d6)](this,_0x2fce6e,_0x3c7b99);if(_0x5ce214)_0x2fce6e=_0x3f7ea0;}let _0x576427=VisuMZ[_0x490618(0x2e2)]['createKeyJS'](this[_0x490618(0x7cc)](),_0x1653d5[_0x490618(0x77d)](''));if(VisuMZ[_0x490618(0x2e2)]['JS'][_0x576427]){_0x2fce6e=VisuMZ[_0x490618(0x2e2)]['JS'][_0x576427]['call'](this,this[_0x490618(0x812)](),_0x3c7b99,this[_0x490618(0x7cc)](),_0x2fce6e);if(_0x5ce214)_0x2fce6e=_0x3f7ea0;}for(const _0x3bcf7f of this[_0x490618(0x812)]()[_0x490618(0xa6d)]()){if(!_0x3bcf7f)continue;_0x576427=VisuMZ['BattleCore']['createKeyJS'](_0x3bcf7f,_0x1653d5[_0x490618(0x77d)](_0x490618(0x10a)));if(VisuMZ['BattleCore']['JS'][_0x576427]){_0x2fce6e=VisuMZ[_0x490618(0x2e2)]['JS'][_0x576427][_0x490618(0x8d6)](this,this['subject'](),_0x3c7b99,_0x3bcf7f,_0x2fce6e);if(_0x5ce214)_0x2fce6e=_0x3f7ea0;}}for(const _0x500192 of _0x3c7b99[_0x490618(0xa6d)]()){if(!_0x500192)continue;_0x576427=VisuMZ[_0x490618(0x2e2)][_0x490618(0x978)](_0x500192,_0x1653d5[_0x490618(0x77d)]('AsTarget'));if(VisuMZ[_0x490618(0x2e2)]['JS'][_0x576427]){_0x2fce6e=VisuMZ[_0x490618(0x2e2)]['JS'][_0x576427]['call'](this,this[_0x490618(0x812)](),_0x3c7b99,_0x500192,_0x2fce6e);if(_0x5ce214)_0x2fce6e=_0x3f7ea0;}}return _0x2fce6e;},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x3db)]=function(_0x46cc99){const _0x40ed47=_0x29c7b3,_0x1fc2c9=this[_0x40ed47(0x10f)]||0x0,_0x4c8f31=VisuMZ[_0x40ed47(0x2e2)][_0x40ed47(0xc14)][_0x40ed47(0x9c6)],_0x42a02b=_0x46cc99[_0x40ed47(0x77d)]('');_0x4c8f31[_0x42a02b]&&_0x4c8f31[_0x42a02b][_0x40ed47(0x8d6)](this,_0x1fc2c9);let _0x3870aa=VisuMZ[_0x40ed47(0x2e2)][_0x40ed47(0x978)](this['item'](),_0x46cc99);VisuMZ[_0x40ed47(0x2e2)]['JS'][_0x3870aa]&&VisuMZ[_0x40ed47(0x2e2)]['JS'][_0x3870aa][_0x40ed47(0x8d6)](this,this['subject'](),this[_0x40ed47(0x812)](),this[_0x40ed47(0x7cc)](),_0x1fc2c9);for(const _0x4623e9 of this[_0x40ed47(0x812)]()[_0x40ed47(0xa6d)]()){if(!_0x4623e9)continue;_0x3870aa=VisuMZ[_0x40ed47(0x2e2)]['createKeyJS'](_0x4623e9,_0x46cc99),VisuMZ[_0x40ed47(0x2e2)]['JS'][_0x3870aa]&&VisuMZ['BattleCore']['JS'][_0x3870aa][_0x40ed47(0x8d6)](this,this[_0x40ed47(0x812)](),this[_0x40ed47(0x812)](),_0x4623e9,_0x1fc2c9);}},Game_Action[_0x29c7b3(0xc03)]['speed']=function(){const _0x4af7b8=_0x29c7b3;return VisuMZ['BattleCore'][_0x4af7b8(0xc14)]['Mechanics'][_0x4af7b8(0xa23)][_0x4af7b8(0x8d6)](this);},Game_Action['prototype'][_0x29c7b3(0x53c)]=function(){const _0x39291b=_0x29c7b3;return VisuMZ[_0x39291b(0x2e2)][_0x39291b(0xc14)]['Mechanics'][_0x39291b(0x952)];},Game_Action['prototype']['isCustomBattleScope']=function(){const _0xd96fe5=_0x29c7b3;if(this[_0xd96fe5(0xadb)]===_0xd96fe5(0x605))return![];if(this['_targetBattlerKey']===_0xd96fe5(0x7d9))return![];if(!this[_0xd96fe5(0x7cc)]())return![];return this[_0xd96fe5(0x7cc)]()[_0xd96fe5(0x124)][_0xd96fe5(0x290)](/<JS TARGETS>/i);},Game_Action['prototype'][_0x29c7b3(0x8ed)]=function(){const _0x4bbd88=_0x29c7b3;if(this[_0x4bbd88(0xadb)]===_0x4bbd88(0x605))return![];if(this[_0x4bbd88(0xadb)]==='all\x20enemies')return![];if(!this['_forcing']&&this[_0x4bbd88(0x812)]()[_0x4bbd88(0x661)]())return![];if(this['isCustomBattleScope']())return!![];if(!this[_0x4bbd88(0x7cc)]())return![];return typeof this['item']()[_0x4bbd88(0x791)]===_0x4bbd88(0x6d8);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xa7d)]=Game_Action[_0x29c7b3(0xc03)]['isForOpponent'],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x1a3)]=function(){const _0x4e2d0e=_0x29c7b3;if(this['_targetBattlerKey']==='all\x20actors')return![];if(this[_0x4e2d0e(0xadb)]===_0x4e2d0e(0x7d9))return!![];return this[_0x4e2d0e(0x8ed)]()&&!this[_0x4e2d0e(0xa48)]()?this[_0x4e2d0e(0x70d)]():VisuMZ[_0x4e2d0e(0x2e2)][_0x4e2d0e(0xa7d)]['call'](this);},Game_Action['prototype']['isForOpponentBattleCore']=function(){const _0x4a4a9d=_0x29c7b3,_0x538158=String(this[_0x4a4a9d(0x7cc)]()['scope']);if(_0x538158['match'](/ANY/i))return!![];return _0x538158[_0x4a4a9d(0x290)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x3ee)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x55d)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x55d)]=function(){const _0x447137=_0x29c7b3;if(this[_0x447137(0xadb)]==='all\x20actors')return!![];if(this['_targetBattlerKey']===_0x447137(0x7d9))return![];return this['isBattleCoreTargetScope']()&&!this[_0x447137(0xa48)]()?this[_0x447137(0x2bb)]():VisuMZ[_0x447137(0x2e2)][_0x447137(0x3ee)][_0x447137(0x8d6)](this);},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x2bb)]=function(){const _0x172ae8=_0x29c7b3,_0x5d278f=String(this[_0x172ae8(0x7cc)]()[_0x172ae8(0x791)]);return _0x5d278f[_0x172ae8(0x290)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x29c7b3(0xc03)]['isForAnyone']=function(){const _0x348740=_0x29c7b3;if(this[_0x348740(0x8ed)]()&&!this['isCustomBattleScope']()){const _0x530968=String(this[_0x348740(0x7cc)]()[_0x348740(0x791)]);return _0x530968[_0x348740(0x290)](/(?:ENEMY|FOE)/i)&&_0x530968[_0x348740(0x290)](/OR/i)&&_0x530968['match'](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action['prototype'][_0x29c7b3(0x876)]=function(){const _0x26990f=_0x29c7b3;if(this[_0x26990f(0x50d)]()){const _0x2e4302=String(this['item']()[_0x26990f(0x791)]);if(_0x2e4302[_0x26990f(0x290)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action['prototype'][_0x29c7b3(0x695)]=function(){const _0x382790=_0x29c7b3;if(this['isForAnyone']()){const _0x2b865b=String(this[_0x382790(0x7cc)]()['scope']);if(_0x2b865b[_0x382790(0x290)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x929)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x98b)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x98b)]=function(){const _0x1e6284=_0x29c7b3;if(this[_0x1e6284(0xadb)]===_0x1e6284(0x605))return!![];return this[_0x1e6284(0x8ed)]()&&!this[_0x1e6284(0xa48)]()?this[_0x1e6284(0x153)]():VisuMZ[_0x1e6284(0x2e2)]['Game_Action_isForAliveFriend'][_0x1e6284(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x188)]=Game_Action['prototype'][_0x29c7b3(0x9c5)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x9c5)]=function(){const _0x28e1aa=_0x29c7b3;if(this['_targetBattlerKey']===_0x28e1aa(0x605))return VisuMZ[_0x28e1aa(0x2e2)][_0x28e1aa(0x188)][_0x28e1aa(0x8d6)](this);return VisuMZ['BattleCore'][_0x28e1aa(0x188)][_0x28e1aa(0x8d6)](this);},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x153)]=function(){const _0x412850=_0x29c7b3;if(this[_0x412850(0x50d)]())return!![];return![];},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xa63)]=function(){const _0x598f2b=_0x29c7b3;return this[_0x598f2b(0x7cc)]()&&this['item']()[_0x598f2b(0x124)][_0x598f2b(0x290)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x27b)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xa78)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xa78)]=function(){const _0x2e567d=_0x29c7b3;if(this[_0x2e567d(0xadb)]===_0x2e567d(0x605))return![];if(this['_targetBattlerKey']===_0x2e567d(0x7d9))return![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x2e567d(0x480)]():VisuMZ[_0x2e567d(0x2e2)][_0x2e567d(0x27b)]['call'](this);},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x480)]=function(){const _0x5ad9ef=_0x29c7b3;if(this[_0x5ad9ef(0x50d)]())return!![];return![];},VisuMZ['BattleCore'][_0x29c7b3(0x6dc)]=Game_Action['prototype']['isForRandom'],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x331)]=function(){const _0x3eb4b4=_0x29c7b3;if(this['_targetBattlerKey']===_0x3eb4b4(0x605))return![];if(this[_0x3eb4b4(0xadb)]==='all\x20enemies')return![];return this[_0x3eb4b4(0x8ed)]()&&!this[_0x3eb4b4(0xa48)]()?this['isForRandomBattleCore']():VisuMZ[_0x3eb4b4(0x2e2)][_0x3eb4b4(0x6dc)][_0x3eb4b4(0x8d6)](this);},Game_Action['prototype'][_0x29c7b3(0x137)]=function(){const _0x1f60e4=_0x29c7b3,_0x2ae830=String(this[_0x1f60e4(0x7cc)]()[_0x1f60e4(0x791)]);return _0x2ae830[_0x1f60e4(0x290)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x29c7b3(0x2e2)]['Game_Action_isForAll']=Game_Action[_0x29c7b3(0xc03)]['isForAll'],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xa4b)]=function(){const _0x2dd7f0=_0x29c7b3;if(this[_0x2dd7f0(0xadb)]===_0x2dd7f0(0x605))return!![];if(this[_0x2dd7f0(0xadb)]==='all\x20enemies')return!![];return VisuMZ[_0x2dd7f0(0x2e2)][_0x2dd7f0(0x2d0)][_0x2dd7f0(0x8d6)](this);},Game_Action['prototype']['canSingleOrMultipleSelect']=function(){const _0x298edd=_0x29c7b3;if(!this[_0x298edd(0x7cc)]())return![];if(this['isForDeadFriend']())return![];return(this[_0x298edd(0x7cc)]()[_0x298edd(0x124)]||'')['match'](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x80f)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x6f7)],Game_Action['prototype']['testApply']=function(_0x4fa8f2){const _0x2f7225=_0x29c7b3;if(this[_0x2f7225(0xa63)]()&&_0x4fa8f2===this[_0x2f7225(0x812)]())return![];return VisuMZ[_0x2f7225(0x2e2)][_0x2f7225(0x80f)][_0x2f7225(0x8d6)](this,_0x4fa8f2);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x741)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xb4b)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xb4b)]=function(){const _0x11b575=_0x29c7b3,_0x132d51=VisuMZ['BattleCore'][_0x11b575(0x741)][_0x11b575(0x8d6)](this);if(this[_0x11b575(0xa63)]())_0x132d51['remove'](this[_0x11b575(0x812)]());return _0x132d51;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x4b0)]=Game_Action['prototype'][_0x29c7b3(0x78b)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x78b)]=function(){const _0x68af55=_0x29c7b3;return this[_0x68af55(0x8ed)]()&&!this['isCustomBattleScope']()?this[_0x68af55(0x2a0)]():VisuMZ[_0x68af55(0x2e2)][_0x68af55(0x4b0)]['call'](this);},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x2a0)]=function(){const _0x5814ed=_0x29c7b3,_0x525534=String(this[_0x5814ed(0x7cc)]()['scope']);if(_0x525534[_0x5814ed(0x290)](/RANDOM/i))return![];if(_0x525534['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x525534[_0x5814ed(0x290)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x525534[_0x5814ed(0x290)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x525534[_0x5814ed(0x290)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x5814ed(0x2e2)][_0x5814ed(0x4b0)][_0x5814ed(0x8d6)](this);},VisuMZ['BattleCore']['Game_Action_makeTargets']=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xb34)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xb34)]=function(){const _0x264d54=_0x29c7b3;let _0x287339=[];return this[_0x264d54(0x8ed)]()?this[_0x264d54(0xa48)]()?_0x287339=this[_0x264d54(0x85c)]():_0x287339=this[_0x264d54(0x416)]():_0x287339=VisuMZ[_0x264d54(0x2e2)][_0x264d54(0x651)]['call'](this),_0x287339=this[_0x264d54(0x725)](_0x287339),_0x287339;},Game_Action['prototype'][_0x29c7b3(0x69d)]=function(){const _0x2471c3=_0x29c7b3;return this[_0x2471c3(0x812)]()[_0x2471c3(0xa27)]()&&!this['subject']()[_0x2471c3(0x3c8)]();},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x85c)]=function(){const _0x4c7b7b=_0x29c7b3,_0x1fc585=VisuMZ[_0x4c7b7b(0x2e2)][_0x4c7b7b(0x978)](this['item'](),_0x4c7b7b(0x264));if(VisuMZ[_0x4c7b7b(0x2e2)]['JS'][_0x1fc585]){targets=VisuMZ[_0x4c7b7b(0x2e2)][_0x4c7b7b(0x651)][_0x4c7b7b(0x8d6)](this);const _0x3323c2=VisuMZ[_0x4c7b7b(0x2e2)][_0x4c7b7b(0x978)](this[_0x4c7b7b(0x7cc)](),_0x4c7b7b(0x264));return targets=VisuMZ['BattleCore']['JS'][_0x3323c2]['call'](this,this['subject'](),targets),this[_0x4c7b7b(0xaab)](targets);}return this[_0x4c7b7b(0x416)]();},Game_Action['prototype'][_0x29c7b3(0x416)]=function(){const _0x34759b=_0x29c7b3;let _0x5bf7f2=[];const _0x39dc97=String(this[_0x34759b(0x7cc)]()[_0x34759b(0x791)]);if(this['isForAnyoneFocusOpponents']())return this[_0x34759b(0x69d)]()?(_0x5bf7f2=this[_0x34759b(0x80e)](),this['repeatTargets'](_0x5bf7f2)):(this[_0x34759b(0x717)]=-0x1,_0x5bf7f2[_0x34759b(0x13a)](...this[_0x34759b(0x44b)]()),this['repeatTargets'](_0x5bf7f2));if(this['isForAnyoneFocusFriends']()){if(this['isSubjectValidForAnyoneSelect']())return _0x5bf7f2=this[_0x34759b(0x80e)](),this[_0x34759b(0xaab)](_0x5bf7f2);else{if(Imported[_0x34759b(0x508)]){if(VisuMZ[_0x34759b(0x2c7)][_0x34759b(0x65e)]<1.19){let _0x6d2f20='';_0x6d2f20+=_0x34759b(0x51f),_0x6d2f20+=_0x34759b(0x699),_0x6d2f20+=_0x34759b(0x4bc),alert(_0x6d2f20),SceneManager[_0x34759b(0x99d)]();}}return this[_0x34759b(0x717)]=-0x1,_0x5bf7f2[_0x34759b(0x13a)](...this[_0x34759b(0x27e)]()),this[_0x34759b(0xaab)](_0x5bf7f2);}}if(_0x39dc97[_0x34759b(0x290)](/(\d+) RANDOM ANY/i)){let _0x288d7b=Number(RegExp['$1']);while(_0x288d7b--){const _0x58dcee=Math[_0x34759b(0x7d2)](0x2)===0x0?this['opponentsUnit']():this[_0x34759b(0x922)]();_0x5bf7f2['push'](_0x58dcee[_0x34759b(0x108)]());}return this[_0x34759b(0xaab)](_0x5bf7f2);}if(_0x39dc97[_0x34759b(0x290)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x501fa2=Number(RegExp['$1']);while(_0x501fa2--){_0x5bf7f2[_0x34759b(0x13a)](this[_0x34759b(0x773)]()[_0x34759b(0x108)]());}return this[_0x34759b(0xaab)](_0x5bf7f2);}if(_0x39dc97[_0x34759b(0x290)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x8e1db2=Number(RegExp['$1']);while(_0x8e1db2--){_0x5bf7f2['push'](this[_0x34759b(0x922)]()['trueRandomTarget']());}return this[_0x34759b(0xaab)](_0x5bf7f2);}if(_0x39dc97[_0x34759b(0x290)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x5bf7f2[_0x34759b(0x13a)](...this[_0x34759b(0x922)]()[_0x34759b(0x89d)]()[_0x34759b(0x55e)](_0x1a78db=>_0x1a78db!==this['subject']())),this[_0x34759b(0xaab)](_0x5bf7f2);return VisuMZ[_0x34759b(0x2e2)][_0x34759b(0x651)][_0x34759b(0x8d6)](this);},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xbf7)]=function(_0x4a5321){const _0x309731=_0x29c7b3,_0x22e030=[];for(let _0x26c9c4=0x0;_0x26c9c4<this['numTargets']();_0x26c9c4++){_0x22e030[_0x309731(0x13a)](_0x4a5321[_0x309731(0x108)]());}return _0x22e030;},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x725)]=function(_0x30c22d){const _0x1795dc=_0x29c7b3;if(!this['item']())return _0x30c22d;const _0x52bb9e=this[_0x1795dc(0x7cc)]()[_0x1795dc(0x124)];if(this['isForNotUser']()){this['isForAll']()&&_0x30c22d[_0x1795dc(0x5e2)](this['subject']());if(_0x30c22d['includes'](this[_0x1795dc(0x812)]())){const _0x4a4c99=this[_0x1795dc(0x922)]()[_0x1795dc(0x89d)]()['remove'](this[_0x1795dc(0x812)]());if(_0x4a4c99['length']>0x0){_0x4a4c99[_0x1795dc(0x3ae)]((_0x42b128,_0x18dc55)=>_0x42b128[_0x1795dc(0x36a)]()-_0x18dc55['hpRate']());while(_0x30c22d[_0x1795dc(0xba2)](this[_0x1795dc(0x812)]())){const _0x5a1874=_0x30c22d[_0x1795dc(0x617)](this[_0x1795dc(0x812)]());_0x30c22d[_0x5a1874]=_0x4a4c99[Math[_0x1795dc(0x7d2)](_0x4a4c99[_0x1795dc(0xba7)])];}}else _0x30c22d['remove'](this[_0x1795dc(0x812)]());}}return _0x30c22d;},VisuMZ[_0x29c7b3(0x2e2)]['Game_Action_itemEffectAddAttackState']=Game_Action[_0x29c7b3(0xc03)]['itemEffectAddAttackState'],Game_Action['prototype']['itemEffectAddAttackState']=function(_0x3e38b9,_0x3f21ff){const _0x833719=_0x29c7b3;VisuMZ[_0x833719(0x2e2)]['Game_Action_itemEffectAddAttackState'][_0x833719(0x8d6)](this,_0x3e38b9,_0x3f21ff);if(!_0x3e38b9['isImmortal']())return;for(const _0x4a6125 of this[_0x833719(0x812)]()['attackStates']()){if(_0x4a6125===_0x3e38b9[_0x833719(0xbec)]()){let _0x5a5f05=_0x3f21ff[_0x833719(0x232)];_0x5a5f05*=_0x3e38b9[_0x833719(0x28e)](_0x4a6125),_0x5a5f05*=this[_0x833719(0x812)]()['attackStatesRate'](_0x4a6125),_0x5a5f05*=this['lukEffectRate'](_0x3e38b9),Math[_0x833719(0x85d)]()<_0x5a5f05&&(_0x3e38b9[_0x833719(0x73c)]=!![],this[_0x833719(0x52b)](_0x3e38b9));}}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x8a1)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x35c)],Game_Action['prototype'][_0x29c7b3(0x35c)]=function(_0x5edd32,_0x17b9b5){const _0x1ddb32=_0x29c7b3;VisuMZ[_0x1ddb32(0x2e2)]['Game_Action_itemEffectAddNormalState']['call'](this,_0x5edd32,_0x17b9b5);if(!_0x5edd32[_0x1ddb32(0x7d3)]())return;if(_0x17b9b5[_0x1ddb32(0xbf8)]!==_0x5edd32[_0x1ddb32(0xbec)]())return;let _0xa72371=_0x17b9b5[_0x1ddb32(0x232)];!this[_0x1ddb32(0x8ca)]()&&(_0xa72371*=_0x5edd32['stateRate'](_0x17b9b5[_0x1ddb32(0xbf8)]),_0xa72371*=this[_0x1ddb32(0xb15)](_0x5edd32)),Math[_0x1ddb32(0x85d)]()<_0xa72371&&(_0x5edd32['_deathStateApplied']=!![],this[_0x1ddb32(0x52b)](_0x5edd32));},VisuMZ['BattleCore'][_0x29c7b3(0xc1f)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x6e3)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x6e3)]=function(){const _0x2f268f=_0x29c7b3;VisuMZ[_0x2f268f(0x2e2)][_0x2f268f(0xc1f)]['call'](this),this[_0x2f268f(0x498)](),this[_0x2f268f(0xb04)]();},Game_Action['prototype'][_0x29c7b3(0x498)]=function(){const _0xfb4a1d=_0x29c7b3;if(!SceneManager[_0xfb4a1d(0x429)]())return;const _0x2d6d4d=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x4a7318=this['item']()[_0xfb4a1d(0x124)][_0xfb4a1d(0x290)](_0x2d6d4d);if(_0x4a7318)for(const _0xe0a779 of _0x4a7318){if(!_0xe0a779)continue;_0xe0a779[_0xfb4a1d(0x290)](_0x2d6d4d);const _0x23039d=String(RegExp['$1'])[_0xfb4a1d(0xb3b)](',')['map'](_0x7f7c43=>String(_0x7f7c43)['trim']()),_0xef7e12=_0x23039d[_0xfb4a1d(0x8ea)](_0x3c56af=>DataManager[_0xfb4a1d(0x7e2)](_0x3c56af));for(const _0x272e3c of _0xef7e12){const _0x6863f0=$dataCommonEvents[_0x272e3c];_0x6863f0&&$gameTemp[_0xfb4a1d(0xa6e)](_0x272e3c);}}},DataManager['getCommonEventIdWithName']=function(_0x43f5dc){const _0x3c3416=_0x29c7b3;_0x43f5dc=_0x43f5dc[_0x3c3416(0x36b)]()[_0x3c3416(0x89a)](),this[_0x3c3416(0x977)]=this['_commonEventIDs']||{};if(this[_0x3c3416(0x977)][_0x43f5dc])return this[_0x3c3416(0x977)][_0x43f5dc];for(const _0x10bdbb of $dataCommonEvents){if(!_0x10bdbb)continue;let _0x5dda3e=_0x10bdbb[_0x3c3416(0x161)];_0x5dda3e=_0x5dda3e[_0x3c3416(0xa2c)](/\x1I\[(\d+)\]/gi,''),_0x5dda3e=_0x5dda3e[_0x3c3416(0xa2c)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x5dda3e[_0x3c3416(0x36b)]()[_0x3c3416(0x89a)]()]=_0x10bdbb['id'];}return this[_0x3c3416(0x977)][_0x43f5dc]||0x0;},Game_Action['prototype'][_0x29c7b3(0xb04)]=function(){const _0x5d64e5=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;const _0x1996a1=VisuMZ[_0x5d64e5(0x2e2)][_0x5d64e5(0xc14)][_0x5d64e5(0x9c6)];_0x1996a1[_0x5d64e5(0x2d8)]&&$gameSwitches[_0x5d64e5(0xbd6)](_0x1996a1['SwitchCritical'],![]),_0x1996a1['SwitchMissEvade']&&$gameSwitches[_0x5d64e5(0xbd6)](_0x1996a1[_0x5d64e5(0x5fa)],![]),_0x1996a1[_0x5d64e5(0x77a)]&&$gameVariables[_0x5d64e5(0xbd6)](_0x1996a1[_0x5d64e5(0x77a)],0x0),_0x1996a1[_0x5d64e5(0x6e4)]&&$gameVariables['setValue'](_0x1996a1[_0x5d64e5(0x6e4)],0x0);},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x3fe)]=function(_0x312c97){const _0x57edfc=_0x29c7b3;if(!SceneManager[_0x57edfc(0x429)]())return;if(!_0x312c97)return;const _0x216d5c=_0x312c97[_0x57edfc(0x5ee)](),_0xe8d646=VisuMZ[_0x57edfc(0x2e2)][_0x57edfc(0xc14)][_0x57edfc(0x9c6)];_0xe8d646[_0x57edfc(0x2d8)]&&_0x216d5c['critical']&&$gameSwitches['setValue'](_0xe8d646['SwitchCritical'],!![]);_0xe8d646[_0x57edfc(0x5fa)]&&(_0x216d5c[_0x57edfc(0xbd2)]||_0x216d5c[_0x57edfc(0x35a)])&&$gameSwitches[_0x57edfc(0xbd6)](_0xe8d646['SwitchMissEvade'],!![]);if(_0xe8d646[_0x57edfc(0x77a)]){let _0x58cb90=$gameVariables[_0x57edfc(0x8b1)](_0xe8d646[_0x57edfc(0x77a)]);_0x216d5c[_0x57edfc(0x93a)]>0x0&&(_0x58cb90+=Math[_0x57edfc(0x355)](_0x216d5c[_0x57edfc(0x93a)])),$gameVariables[_0x57edfc(0xbd6)](_0xe8d646['VariableDmg'],_0x58cb90);}if(_0xe8d646[_0x57edfc(0x6e4)]){let _0x189d9b=$gameVariables[_0x57edfc(0x8b1)](_0xe8d646[_0x57edfc(0x6e4)]);_0x216d5c['hpDamage']<0x0&&(_0x189d9b+=Math[_0x57edfc(0x355)](_0x216d5c[_0x57edfc(0x93a)])),$gameVariables[_0x57edfc(0xbd6)](_0xe8d646[_0x57edfc(0x6e4)],_0x189d9b);}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x829)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x523)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x60e)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x60e)]=function(_0x58838a,_0x546f90){const _0x18dfff=_0x29c7b3;VisuMZ[_0x18dfff(0x2e2)][_0x18dfff(0x523)][_0x18dfff(0x8d6)](this,_0x58838a,_0x546f90);!this[_0x18dfff(0x69f)]()&&_0x58838a&&_0x58838a[_0x18dfff(0x5ee)]()[_0x18dfff(0x93a)]>0x0&&this[_0x18dfff(0x5d9)]('HP',_0x58838a,_0x58838a['result']()[_0x18dfff(0x93a)]);if(_0x58838a){this[_0x18dfff(0x226)]=this[_0x18dfff(0x226)]||{};const _0x1de792=_0x58838a[_0x18dfff(0x6db)]();this['_executeHpDamage'][_0x1de792]=_0x546f90;}},Game_Action['prototype'][_0x29c7b3(0x8b4)]=function(_0xbfa057){const _0x4910d7=_0x29c7b3;this[_0x4910d7(0x226)]=this['_executeHpDamage']||{};const _0x583a98=_0xbfa057[_0x4910d7(0x6db)]();return this[_0x4910d7(0x226)][_0x583a98]||0x0;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x7a1)]=Game_Action['prototype']['executeMpDamage'],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xb60)]=function(_0x23b877,_0x2f889d){const _0x325f08=_0x29c7b3;VisuMZ[_0x325f08(0x2e2)][_0x325f08(0x7a1)][_0x325f08(0x8d6)](this,_0x23b877,_0x2f889d),!this[_0x325f08(0x69f)]()&&_0x23b877&&_0x23b877['result']()[_0x325f08(0x526)]>0x0&&this[_0x325f08(0x5d9)]('MP',_0x23b877,_0x23b877[_0x325f08(0x5ee)]()[_0x325f08(0x526)]);},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x5d9)]=function(_0x240499,_0x5edb24,_0x5155ce){const _0x1dc754=_0x29c7b3;_0x240499=_0x240499[_0x1dc754(0x36b)]()[_0x1dc754(0x89a)]();const _0x234e5c=this[_0x1dc754(0x55c)](_0x240499,_0x5edb24);if(_0x234e5c<=0x0)return;const _0x31871a=Math[_0x1dc754(0x50f)](_0x5155ce*_0x234e5c);if(_0x31871a<=0x0)return;let _0x460795=this[_0x1dc754(0x812)]();if(this[_0x1dc754(0x9f7)])_0x460795=this[_0x1dc754(0x9f7)];const _0x467ec3=_0x5edb24[_0x1dc754(0x613)](_0x240499)?-0x1:0x1;if(_0x240499==='HP')_0x460795[_0x1dc754(0x8ba)](_0x467ec3*_0x31871a);if(_0x240499==='MP')_0x460795[_0x1dc754(0xaca)](_0x467ec3*_0x31871a);},Game_Action[_0x29c7b3(0xc03)]['lifeStealRate']=function(_0x46280f,_0x4828b2){const _0x296722=_0x29c7b3;if(this[_0x296722(0x31f)](_0x46280f))return 0x0;if(this['subject']()[_0x296722(0x58e)](_0x46280f))return 0x0;if(_0x4828b2[_0x296722(0x9a4)](_0x46280f))return 0x0;let _0x320db6=0x0;return _0x320db6+=this[_0x296722(0x93d)](_0x46280f),_0x320db6+=this['subject']()[_0x296722(0x55c)](_0x46280f,this[_0x296722(0x7cc)]()[_0x296722(0xa77)]),_0x320db6[_0x296722(0x582)](0x0,0x1);},Game_Action[_0x29c7b3(0xc03)]['isCancelLifeSteal']=function(_0x2e69b0){const _0xd9895b=_0x29c7b3;_0x2e69b0=_0x2e69b0[_0xd9895b(0x36b)]()['trim']();const _0x155554=VisuMZ['BattleCore'][_0xd9895b(0x829)],_0x56ab2e=this['item']()['note']||'';if(_0x56ab2e[_0xd9895b(0x290)](_0x155554['cancelLifeSteal']))return!![];if(_0x2e69b0==='HP'&&_0x56ab2e[_0xd9895b(0x290)](_0x155554[_0xd9895b(0x9a9)]))return!![];if(_0x2e69b0==='MP'&&_0x56ab2e['match'](_0x155554[_0xd9895b(0x873)]))return!![];return![];},Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x93d)]=function(_0xe7b474){const _0x1d7663=_0x29c7b3,_0x34c3b1=VisuMZ[_0x1d7663(0x2e2)][_0x1d7663(0x829)],_0x27ef56=this[_0x1d7663(0x7cc)]()[_0x1d7663(0x124)]||'';_0xe7b474=_0xe7b474['toUpperCase']()[_0x1d7663(0x89a)]();const _0x1618ce=_0x27ef56['match'](_0x34c3b1[_0x1d7663(0xbc4)]);if(_0x1618ce)for(const _0x2aea1a of _0x1618ce){_0x2aea1a[_0x1d7663(0x290)](_0x34c3b1['lifeSteaItem']);const _0x337dc0=String(RegExp['$1'])[_0x1d7663(0x36b)]()[_0x1d7663(0x89a)](),_0x3067bb=Number(RegExp['$2'])*0.01;if(_0x337dc0!==_0xe7b474)continue;return _0x3067bb;}return 0x0;},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x55c)]=function(_0x886f50,_0x411957){const _0x2de25c=_0x29c7b3,_0x133db7=VisuMZ['BattleCore']['LifeStealRegExp'];let _0x45452d=0x0;_0x886f50=_0x886f50[_0x2de25c(0x36b)]()['trim']();for(const _0xe8c5ba of this['traitObjects']()){if(!_0xe8c5ba)continue;const _0x3cf204=_0xe8c5ba['note']||'',_0x3b0986=_0x3cf204[_0x2de25c(0x290)](_0x133db7[_0x2de25c(0xbb6)]);if(_0x3b0986)for(const _0xa96bd3 of _0x3b0986){_0xa96bd3[_0x2de25c(0x290)](_0x133db7[_0x2de25c(0xbb6)]);const _0xbbb29e=String(RegExp['$1'])[_0x2de25c(0x36b)]()[_0x2de25c(0x89a)](),_0x55bd71=String(RegExp['$2']),_0x1bd356=Number(RegExp['$3'])*0.01;if(_0xbbb29e!==_0x886f50)continue;if(_0x411957===Game_Action[_0x2de25c(0x3ef)]&&_0x55bd71['match'](/CERTAIN/i))_0x45452d+=_0x1bd356;else{if(_0x411957===Game_Action[_0x2de25c(0xbda)]&&_0x55bd71[_0x2de25c(0x290)](/PHYS/i))_0x45452d+=_0x1bd356;else _0x411957===Game_Action[_0x2de25c(0xbaa)]&&_0x55bd71[_0x2de25c(0x290)](/MAGIC/i)&&(_0x45452d+=_0x1bd356);}}}return _0x45452d;},Game_BattlerBase[_0x29c7b3(0xc03)]['isDisarmLifeSteal']=function(_0x281e1e){const _0x13025a=_0x29c7b3;_0x281e1e=_0x281e1e[_0x13025a(0x36b)]()['trim']();const _0x4300aa=VisuMZ[_0x13025a(0x2e2)][_0x13025a(0x829)];for(const _0x566751 of this['traitObjects']()){if(!_0x566751)continue;const _0x5bad1e=_0x566751[_0x13025a(0x124)]||'';if(_0x5bad1e[_0x13025a(0x290)](_0x4300aa['disarmLifeSteal']))return!![];if(_0x281e1e==='HP'&&_0x5bad1e[_0x13025a(0x290)](_0x4300aa[_0x13025a(0x60a)]))return!![];if(_0x281e1e==='MP'&&_0x5bad1e[_0x13025a(0x290)](_0x4300aa[_0x13025a(0x160)]))return!![];}return![];},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x613)]=function(_0x295e39){const _0x55772d=_0x29c7b3;_0x295e39=_0x295e39[_0x55772d(0x36b)]()['trim']();const _0x376d4a=VisuMZ[_0x55772d(0x2e2)]['LifeStealRegExp'];for(const _0x5dc3ff of this[_0x55772d(0xa6d)]()){if(!_0x5dc3ff)continue;const _0x49e8df=_0x5dc3ff[_0x55772d(0x124)]||'';if(_0x49e8df[_0x55772d(0x290)](_0x376d4a['negativeLifeSteal']))return!![];if(_0x295e39==='HP'&&_0x49e8df[_0x55772d(0x290)](_0x376d4a[_0x55772d(0x5d7)]))return!![];if(_0x295e39==='MP'&&_0x49e8df[_0x55772d(0x290)](_0x376d4a[_0x55772d(0xa22)]))return!![];}return![];},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x9a4)]=function(_0x92d477){const _0x58aa7e=_0x29c7b3;_0x92d477=_0x92d477['toUpperCase']()['trim']();const _0x48b3c3=VisuMZ[_0x58aa7e(0x2e2)]['LifeStealRegExp'];for(const _0x4691eb of this[_0x58aa7e(0xa6d)]()){if(!_0x4691eb)continue;const _0x4e9d71=_0x4691eb[_0x58aa7e(0x124)]||'';if(_0x4e9d71[_0x58aa7e(0x290)](_0x48b3c3[_0x58aa7e(0x9d9)]))return!![];if(_0x92d477==='HP'&&_0x4e9d71[_0x58aa7e(0x290)](_0x48b3c3[_0x58aa7e(0x1e8)]))return!![];if(_0x92d477==='MP'&&_0x4e9d71[_0x58aa7e(0x290)](_0x48b3c3[_0x58aa7e(0x42b)]))return!![];}return![];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x97a)]=Game_BattlerBase[_0x29c7b3(0xc03)]['initMembers'],Game_BattlerBase['prototype'][_0x29c7b3(0x2e9)]=function(){const _0x38abca=_0x29c7b3;VisuMZ[_0x38abca(0x2e2)][_0x38abca(0x97a)]['call'](this),this[_0x38abca(0x162)]();},Game_BattlerBase['prototype'][_0x29c7b3(0x162)]=function(){this['_immortal']=![];},VisuMZ['BattleCore']['Game_BattlerBase_refresh']=Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x842)],Game_BattlerBase[_0x29c7b3(0xc03)]['refresh']=function(){const _0x368c20=_0x29c7b3;this[_0x368c20(0x6b7)]={},VisuMZ['BattleCore'][_0x368c20(0xadf)][_0x368c20(0x8d6)](this);},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x5cf)]=function(_0x5bce66){const _0x514f17=_0x29c7b3;return this['_cache']=this[_0x514f17(0x6b7)]||{},this[_0x514f17(0x6b7)][_0x5bce66]!==undefined;},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x9e9)]=function(){const _0x32e7a4=_0x29c7b3;if(this[_0x32e7a4(0x6b7)][_0x32e7a4(0x9e9)]!==undefined)return this['_cache'][_0x32e7a4(0x9e9)];const _0x2812ab=/<DAMAGE CAP:[ ](\d+)>/i,_0x146fac=this[_0x32e7a4(0xa6d)]()['map'](_0x3e444c=>_0x3e444c&&_0x3e444c[_0x32e7a4(0x124)][_0x32e7a4(0x290)](_0x2812ab)?Number(RegExp['$1']):0x0);let _0x2a6c9e=_0x146fac[_0x32e7a4(0xba7)]>0x0?Math['max'](..._0x146fac):0x0;if(_0x2a6c9e<=0x0)_0x2a6c9e=VisuMZ[_0x32e7a4(0x2e2)][_0x32e7a4(0xc14)]['Damage']['DefaultHardCap'];return this[_0x32e7a4(0x6b7)]['hardDamageCap']=_0x2a6c9e,this['_cache'][_0x32e7a4(0x9e9)];},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x95e)]=function(){const _0x450496=_0x29c7b3;if(this[_0x450496(0x6b7)][_0x450496(0x279)]!==undefined)return this[_0x450496(0x6b7)][_0x450496(0x279)];let _0xd6935c=VisuMZ['BattleCore'][_0x450496(0xc14)][_0x450496(0x9c7)]['DefaultSoftCap'];const _0x437eef=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x52f6aa=this[_0x450496(0xa6d)]()[_0x450496(0x8ea)](_0x196f51=>_0x196f51&&_0x196f51['note'][_0x450496(0x290)](_0x437eef)?Number(RegExp['$1'])/0x64:0x0);return _0xd6935c=_0x52f6aa[_0x450496(0xa1e)]((_0x2f56d8,_0x36c07b)=>_0x2f56d8+_0x36c07b,_0xd6935c),this[_0x450496(0x6b7)][_0x450496(0x279)]=_0xd6935c,this[_0x450496(0x6b7)][_0x450496(0x279)]['clamp'](0.01,0x1);},VisuMZ[_0x29c7b3(0x2e2)]['Game_BattlerBase_die']=Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0xbdf)],Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0xbdf)]=function(){const _0x2d6543=_0x29c7b3;VisuMZ[_0x2d6543(0x2e2)][_0x2d6543(0x5dd)][_0x2d6543(0x8d6)](this),SceneManager[_0x2d6543(0x429)]()&&(this[_0x2d6543(0x635)](_0x2d6543(0x839)),this[_0x2d6543(0x490)]=undefined);},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0xa65)]=function(){const _0x1a5469=_0x29c7b3;if(!SceneManager[_0x1a5469(0x429)]())return null;if(!SceneManager[_0x1a5469(0x364)][_0x1a5469(0x690)])return null;return SceneManager['_scene'][_0x1a5469(0x690)]['findTargetSprite'](this);},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x7cf)]=function(){const _0x4aa2b7=_0x29c7b3;return VisuMZ[_0x4aa2b7(0x2e2)][_0x4aa2b7(0xc14)][_0x4aa2b7(0x953)]['AnchorX'];},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x2dd)]=function(){const _0x2f6ec9=_0x29c7b3;return VisuMZ['BattleCore'][_0x2f6ec9(0xc14)][_0x2f6ec9(0x953)][_0x2f6ec9(0x898)];},Game_BattlerBase[_0x29c7b3(0xc03)]['svBattlerShadowVisible']=function(){const _0x516808=_0x29c7b3;return this[_0x516808(0xa27)]&&this[_0x516808(0xa27)]()?VisuMZ[_0x516808(0x2e2)][_0x516808(0xc14)][_0x516808(0x953)][_0x516808(0x2ed)]:VisuMZ[_0x516808(0x2e2)][_0x516808(0xc14)][_0x516808(0xac6)][_0x516808(0x2ed)];},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0xa2a)]=function(){return!![];},Game_BattlerBase['prototype']['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x820)]=function(){return 0x0;},Game_BattlerBase[_0x29c7b3(0xc03)]['createBattleUIOffsetX']=function(_0x4fbbe7){const _0x14f896=_0x29c7b3;if(!_0x4fbbe7)return 0x0;let _0x3e6324=0x0;const _0x168786=_0x4fbbe7[_0x14f896(0x124)];return _0x168786[_0x14f896(0x290)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x3e6324+=Number(RegExp['$1'])),_0x168786[_0x14f896(0x290)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x3e6324+=Number(RegExp['$1'])),_0x3e6324;},Game_BattlerBase['prototype']['createBattleUIOffsetY']=function(_0x163117){const _0x2c0ab5=_0x29c7b3;if(!_0x163117)return 0x0;let _0x5aac69=0x0;const _0x32c795=_0x163117[_0x2c0ab5(0x124)];return _0x32c795[_0x2c0ab5(0x290)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x5aac69+=Number(RegExp['$1'])),_0x32c795['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x5aac69+=Number(RegExp['$2'])),_0x5aac69;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x190)]=Game_BattlerBase[_0x29c7b3(0xc03)]['isStateResist'],Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0xc07)]=function(_0x6e21fc){const _0x14c37a=_0x29c7b3;if(_0x6e21fc===this[_0x14c37a(0xbec)]()&&this[_0x14c37a(0x7d3)]())return!![];return VisuMZ['BattleCore']['Game_BattlerBase_isStateResist']['call'](this,_0x6e21fc);},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x7d3)]=function(){const _0x228603=_0x29c7b3;return this[_0x228603(0x950)];},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0xbb9)]=function(_0x18ed4d){const _0x1a53d9=_0x29c7b3;_0x18ed4d?this[_0x1a53d9(0x8ac)]():this[_0x1a53d9(0x88a)]();},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x8ac)]=function(){const _0x58cd7d=_0x29c7b3;if(this[_0x58cd7d(0x7cd)]())return;this[_0x58cd7d(0x950)]=!![],this[_0x58cd7d(0x73c)]=![];},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x88a)]=function(){const _0x22a221=_0x29c7b3,_0x4be7f7=this[_0x22a221(0x475)]();this['_immortal']=![],_0x4be7f7&&this['_deathStateApplied']&&this['die'](),this[_0x22a221(0x73c)]=![],this[_0x22a221(0x842)](),this[_0x22a221(0x7cd)]()&&_0x4be7f7&&(this[_0x22a221(0xa13)](),this[_0x22a221(0x3b5)]());},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x9cd)]=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x935)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x935)]=function(){const _0x5a237c=_0x29c7b3;return this[_0x5a237c(0x7cc)]()?VisuMZ['BattleCore'][_0x5a237c(0x9cd)]['call'](this):0x0;},VisuMZ[_0x29c7b3(0x2e2)]['Game_Action_setAttack']=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xa37)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0xa37)]=function(){const _0x360509=_0x29c7b3;if(this['subject']()&&this[_0x360509(0x812)]()[_0x360509(0x48b)]())VisuMZ[_0x360509(0x2e2)][_0x360509(0x6ae)][_0x360509(0x8d6)](this);else BattleManager[_0x360509(0x96f)]?VisuMZ['BattleCore'][_0x360509(0x6ae)]['call'](this):this[_0x360509(0x917)]();},VisuMZ['BattleCore'][_0x29c7b3(0x6ff)]=Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x48b)],Game_BattlerBase['prototype'][_0x29c7b3(0x48b)]=function(){const _0x4efc74=_0x29c7b3;if(!this['canAttackBattleCore']())return![];return VisuMZ[_0x4efc74(0x2e2)][_0x4efc74(0x6ff)][_0x4efc74(0x8d6)](this);},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x31c)]=function(){const _0x30352a=_0x29c7b3;for(const _0x5d5c3e of this[_0x30352a(0xa6d)]()){if(!_0x5d5c3e)continue;if(_0x5d5c3e[_0x30352a(0x124)][_0x30352a(0x290)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ['BattleCore']['Game_Action_setGuard']=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x4bb)],Game_Action['prototype'][_0x29c7b3(0x4bb)]=function(){const _0x539632=_0x29c7b3;this[_0x539632(0x812)]()[_0x539632(0x1e6)]()&&VisuMZ[_0x539632(0x2e2)][_0x539632(0x50e)][_0x539632(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xa9f)]=Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x1e6)],Game_BattlerBase[_0x29c7b3(0xc03)]['canGuard']=function(){const _0x47ec1d=_0x29c7b3;if(!this[_0x47ec1d(0x797)]())return![];return VisuMZ['BattleCore']['Game_BattlerBase_canGuard']['call'](this);},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x797)]=function(){const _0x12e2fd=_0x29c7b3;for(const _0x5b58a9 of this[_0x12e2fd(0xa6d)]()){if(!_0x5b58a9)continue;if(_0x5b58a9[_0x12e2fd(0x124)][_0x12e2fd(0x290)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x29c7b3(0xc03)]['canUseItemCommand']=function(){const _0x2fd153=_0x29c7b3;for(const _0x24e7c3 of this[_0x2fd153(0xa6d)]()){if(!_0x24e7c3)continue;if(_0x24e7c3[_0x2fd153(0x124)][_0x2fd153(0x290)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x46b)]=Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x919)],Game_BattlerBase[_0x29c7b3(0xc03)]['meetsUsableItemConditions']=function(_0xd2a82b){const _0x21d6b6=_0x29c7b3;if(_0xd2a82b&&_0xd2a82b['note'][_0x21d6b6(0x290)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x4da00e=this[_0x21d6b6(0x922)]()[_0x21d6b6(0x89d)]();if(_0x4da00e['length']===0x1&&_0x4da00e[0x0]===this)return![];}return VisuMZ['BattleCore'][_0x21d6b6(0x46b)]['call'](this,_0xd2a82b);},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x53c)]=function(){const _0x39df07=_0x29c7b3;return VisuMZ[_0x39df07(0x2e2)][_0x39df07(0xc14)][_0x39df07(0x9c6)][_0x39df07(0x952)];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x8fe)]=Game_Battler[_0x29c7b3(0xc03)]['regenerateAll'],Game_Battler[_0x29c7b3(0xc03)]['regenerateAll']=function(){const _0x12c7b8=_0x29c7b3;if(SceneManager[_0x12c7b8(0x429)]()){if(BattleManager['isTpb']()){if(this[_0x12c7b8(0x9ef)]()<=0x0)return;}else{if($gameTroop[_0x12c7b8(0x9ef)]()<=0x0)return;}}if(SceneManager[_0x12c7b8(0x429)]()&&BattleManager[_0x12c7b8(0xb86)]()&&this[_0x12c7b8(0x3d4)]===Graphics['frameCount'])return;this[_0x12c7b8(0x3d4)]=Graphics[_0x12c7b8(0x795)],SceneManager[_0x12c7b8(0x429)]()&&this[_0x12c7b8(0x15b)](_0x12c7b8(0x553)),VisuMZ[_0x12c7b8(0x2e2)][_0x12c7b8(0x8fe)][_0x12c7b8(0x8d6)](this),SceneManager[_0x12c7b8(0x429)]()&&(this[_0x12c7b8(0xb9d)](),this[_0x12c7b8(0x15b)](_0x12c7b8(0x9cc)));},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xb9d)]=function(){const _0x32b268=_0x29c7b3;if(SceneManager[_0x32b268(0x429)]())for(const _0x3a390e of this[_0x32b268(0xa6d)]()){if(!_0x3a390e)continue;this[_0x32b268(0x2f7)](_0x3a390e);}},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x2f7)]=function(_0xa61b6b){const _0xbe1d2=_0x29c7b3;if(!Imported[_0xbe1d2(0x50c)])return;if(!SceneManager[_0xbe1d2(0x429)]())return;if(this[_0xbe1d2(0x7cd)]())return;if(this[_0xbe1d2(0x48f)]())return;if(_0xa61b6b[_0xbe1d2(0x124)][_0xbe1d2(0x290)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x51b9cb=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x51b9cb,![],![]);}},VisuMZ['BattleCore'][_0x29c7b3(0x4d3)]=Game_Battler['prototype'][_0x29c7b3(0x3d6)],Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x3d6)]=function(){const _0x2de034=_0x29c7b3;this[_0x2de034(0x15b)]('PreStartTurnJS'),VisuMZ[_0x2de034(0x2e2)]['Game_Battler_startTpbTurn'][_0x2de034(0x8d6)](this),this[_0x2de034(0x15b)]('PostStartTurnJS');},VisuMZ['BattleCore'][_0x29c7b3(0x883)]=Game_Battler[_0x29c7b3(0xc03)]['onTurnEnd'],Game_Battler[_0x29c7b3(0xc03)]['onTurnEnd']=function(){const _0x7791f4=_0x29c7b3;this[_0x7791f4(0x15b)](_0x7791f4(0x157)),VisuMZ[_0x7791f4(0x2e2)][_0x7791f4(0x883)]['call'](this),VisuMZ['BattleCore']['Settings'][_0x7791f4(0x9c6)][_0x7791f4(0x4df)]&&this[_0x7791f4(0x394)](),this[_0x7791f4(0x15b)](_0x7791f4(0x519));},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x15b)]=function(_0x4571da){const _0x3356cb=_0x29c7b3;if(this[_0x3356cb(0x463)]||this[_0x3356cb(0x536)])return;const _0x411b0a=VisuMZ[_0x3356cb(0x2e2)][_0x3356cb(0xc14)][_0x3356cb(0x9c6)];if(_0x411b0a[_0x4571da])_0x411b0a[_0x4571da][_0x3356cb(0x8d6)](this);for(const _0x2fc9ea of this['traitObjects']()){if(!_0x2fc9ea)continue;key=VisuMZ[_0x3356cb(0x2e2)][_0x3356cb(0x978)](_0x2fc9ea,_0x4571da),VisuMZ[_0x3356cb(0x2e2)]['JS'][key]&&VisuMZ[_0x3356cb(0x2e2)]['JS'][key]['call'](this,this,this,_0x2fc9ea,0x0);}},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x769)]=function(){const _0x2dd933=_0x29c7b3;return VisuMZ[_0x2dd933(0x2e2)][_0x2dd933(0xc14)]['Actor']['ChantStyle']||![];},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xa6b)]=function(){const _0x7bba6a=_0x29c7b3;if(this[_0x7bba6a(0xa81)]()){if(this[_0x7bba6a(0x769)]()){if(this[_0x7bba6a(0x8f1)][_0x7bba6a(0x5af)](_0x44230d=>_0x44230d[_0x7bba6a(0x7cc)]()&&_0x44230d[_0x7bba6a(0x9c0)]()))return!![];}else{if(this[_0x7bba6a(0x8f1)][_0x7bba6a(0x5af)](_0x110ee2=>_0x110ee2[_0x7bba6a(0x7cc)]()&&_0x110ee2[_0x7bba6a(0x2a2)]()))return!![];}}if(BattleManager['isTpb']()&&this[_0x7bba6a(0x72b)]===_0x7bba6a(0xbfa))return this[_0x7bba6a(0x769)]()?this[_0x7bba6a(0x248)]()&&this[_0x7bba6a(0x248)]()[_0x7bba6a(0x7cc)]()&&this[_0x7bba6a(0x248)]()[_0x7bba6a(0x9c0)]():this['currentAction']()&&this[_0x7bba6a(0x248)]()[_0x7bba6a(0x7cc)]()&&this[_0x7bba6a(0x248)]()[_0x7bba6a(0x2a2)]();return![];},Game_Battler[_0x29c7b3(0xc03)]['isCharging']=function(){const _0x100741=_0x29c7b3;if(BattleManager[_0x100741(0xb86)]()&&this[_0x100741(0x72b)]==='casting')return this[_0x100741(0x769)]()?this[_0x100741(0x248)]()&&this['currentAction']()[_0x100741(0x7cc)]()&&!this['currentAction']()['isMagical']():this[_0x100741(0x248)]()&&this['currentAction']()[_0x100741(0x7cc)]()&&!this[_0x100741(0x248)]()[_0x100741(0x2a2)]();return![];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x3d5)]=Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xb83)],Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xb83)]=function(){const _0x2e2cba=_0x29c7b3;VisuMZ[_0x2e2cba(0x2e2)][_0x2e2cba(0x3d5)]['call'](this),this[_0x2e2cba(0x8da)]=[];},Game_Battler[_0x29c7b3(0xc03)]['isDamagePopupRequested']=function(){const _0x1bdd4b=_0x29c7b3;if(!this[_0x1bdd4b(0x8da)])this['clearDamagePopup']();return this[_0x1bdd4b(0x8da)][_0x1bdd4b(0xba7)]>0x0;},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x5be)]=function(){const _0xb38c79=_0x29c7b3;if(!SceneManager[_0xb38c79(0x429)]())return;if(BattleManager[_0xb38c79(0x440)]())return;if(!this['_damagePopupArray'])this[_0xb38c79(0xb83)]();this[_0xb38c79(0x73d)]();const _0x5d0534=this[_0xb38c79(0xa65)]();if(_0x5d0534)_0x5d0534['setupDamagePopup']();},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x73d)]=function(){const _0x764bfa=_0x29c7b3,_0x169007=this[_0x764bfa(0x5ee)]();if(_0x169007[_0x764bfa(0xbd2)]||_0x169007[_0x764bfa(0x35a)]){const _0x120d02=JsonEx[_0x764bfa(0xa87)](_0x169007);_0x120d02[_0x764bfa(0x299)]=![],_0x120d02['mpDamage']=0x0,this[_0x764bfa(0x8da)][_0x764bfa(0x13a)](_0x120d02);if(!_0x169007[_0x764bfa(0x93a)]&&!_0x169007['mpDamage'])return;}if(_0x169007[_0x764bfa(0x299)]){const _0x3e17ab=JsonEx[_0x764bfa(0xa87)](_0x169007);_0x3e17ab[_0x764bfa(0xbd2)]=![],_0x3e17ab['evaded']=![],_0x3e17ab[_0x764bfa(0x526)]=0x0,this[_0x764bfa(0x8da)][_0x764bfa(0x13a)](_0x3e17ab);}if(_0x169007[_0x764bfa(0x526)]!==0x0){const _0x21e571=JsonEx[_0x764bfa(0xa87)](_0x169007);_0x21e571[_0x764bfa(0xbd2)]=![],_0x21e571[_0x764bfa(0x35a)]=![],_0x21e571[_0x764bfa(0x299)]=![],this[_0x764bfa(0x8da)][_0x764bfa(0x13a)](_0x21e571);}},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x530)]=function(){const _0x1aecd4=_0x29c7b3;if(!this[_0x1aecd4(0x8da)])this[_0x1aecd4(0xb83)]();return VisuMZ[_0x1aecd4(0x2e2)][_0x1aecd4(0xc14)][_0x1aecd4(0x9c7)][_0x1aecd4(0x2ac)]?this[_0x1aecd4(0x8da)][_0x1aecd4(0x43d)]():this[_0x1aecd4(0x8da)][_0x1aecd4(0x7bc)]();},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x612)]=function(_0x1b52bf,_0x497072){const _0x5befd4=_0x29c7b3;if(!SceneManager[_0x5befd4(0x429)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this['battler']())return;if(_0x1b52bf['length']<=0x0)return;_0x497072=_0x497072||{},_0x497072[_0x5befd4(0x16d)]=_0x497072['textColor']||'#ffffff',_0x497072[_0x5befd4(0x6c9)]=_0x497072[_0x5befd4(0x6c9)]||[0x0,0x0,0x0,0x0],_0x497072[_0x5befd4(0x745)]=_0x497072[_0x5befd4(0x745)]||0x0,this[_0x5befd4(0xa65)]()['setupTextPopup'](_0x1b52bf,_0x497072);},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x55a)]=function(_0xbf0abe,_0x12c28a,_0x5cfcfa){const _0x3be4e3=_0x29c7b3;if(!SceneManager[_0x3be4e3(0x429)]())return;if(BattleManager[_0x3be4e3(0x440)]())return;if(!this[_0x3be4e3(0xa65)]())return;if(_0x12c28a[_0x3be4e3(0xba7)]<=0x0)return;_0x5cfcfa=_0x5cfcfa||{},_0x5cfcfa[_0x3be4e3(0x16d)]=_0x5cfcfa['textColor']||_0x3be4e3(0x5cc),_0x5cfcfa['flashColor']=_0x5cfcfa[_0x3be4e3(0x6c9)]||[0x0,0x0,0x0,0x0],_0x5cfcfa[_0x3be4e3(0x745)]=_0x5cfcfa[_0x3be4e3(0x745)]||0x0,this[_0x3be4e3(0xa65)]()['setupIconTextPopup'](_0xbf0abe,_0x12c28a,_0x5cfcfa);},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x9e3)]=function(){const _0x5f26b=_0x29c7b3;if(this[_0x5f26b(0x48f)]())return![];if(this[_0x5f26b(0x475)]()&&this[_0x5f26b(0xb5b)]())return!![];if(this[_0x5f26b(0xb3d)]()&&this[_0x5f26b(0x20b)]()){if(this[_0x5f26b(0x7cd)]()&&this[_0x5f26b(0xb77)]())return![];}else{if(this[_0x5f26b(0x7cd)]())return![];}return!![];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x7a0)]=Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x515)],Game_Battler[_0x29c7b3(0xc03)]['clearMotion']=function(){const _0x9e6d74=_0x29c7b3;VisuMZ['BattleCore'][_0x9e6d74(0x7a0)][_0x9e6d74(0x8d6)](this),this[_0x9e6d74(0x407)]();},Game_Battler['prototype'][_0x29c7b3(0x500)]=function(){return!![];},Game_Battler['prototype']['isBattlerGrounded']=function(){return![];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x71b)]=Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x327)],Game_Battler['prototype']['onBattleStart']=function(_0x11964a){const _0x2b67b5=_0x29c7b3;VisuMZ[_0x2b67b5(0x2e2)][_0x2b67b5(0x71b)][_0x2b67b5(0x8d6)](this,_0x11964a),this[_0x2b67b5(0x3fd)](_0x11964a),this[_0x2b67b5(0xb83)]();},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x3fd)]=function(_0x599e68){const _0x276c8c=_0x29c7b3;this[_0x276c8c(0x4cf)](![]),this[_0x276c8c(0x6ed)]=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x29b)]=Game_Battler[_0x29c7b3(0xc03)]['onBattleEnd'],Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x349)]=function(){const _0x59cc8c=_0x29c7b3;VisuMZ[_0x59cc8c(0x2e2)][_0x59cc8c(0x29b)]['call'](this),this[_0x59cc8c(0x630)]();},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x630)]=function(){const _0xc3532=_0x29c7b3;this[_0xc3532(0x6ed)]=undefined,this[_0xc3532(0x11b)]=undefined;},VisuMZ['BattleCore'][_0x29c7b3(0xb8a)]=Game_Battler[_0x29c7b3(0xc03)]['performActionStart'],Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xa85)]=function(_0x190528){const _0x961ad4=_0x29c7b3;VisuMZ['BattleCore'][_0x961ad4(0xb8a)][_0x961ad4(0x8d6)](this,_0x190528);if(!_0x190528[_0x961ad4(0x16e)]()){const _0x47e018=this['battler']();_0x47e018&&_0x47e018[_0x961ad4(0x7fe)]();}this['setBattlerFlip'](![]);},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x336)]=function(){const _0x162037=_0x29c7b3;this[_0x162037(0x490)]=undefined;const _0x2bfb5b=this[_0x162037(0x22e)];this[_0x162037(0x22e)]=![];if(BattleManager[_0x162037(0x43a)]()&&this['isInputting']()){const _0x7d73db=this[_0x162037(0xa65)]();if(_0x7d73db&&_0x2bfb5b)_0x7d73db[_0x162037(0x7fe)]();return;}const _0x2ea8d3=this[_0x162037(0xa65)]();if(_0x2ea8d3)_0x2ea8d3[_0x162037(0x32b)]();this[_0x162037(0x4cf)](![]),this[_0x162037(0x3b5)]();},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x5c9)]=function(_0x54d28e){const _0x21076c=_0x29c7b3;if(_0x54d28e['isAttack']())this[_0x21076c(0xa70)]();else{if(_0x54d28e['isGuard']())this[_0x21076c(0x635)](_0x21076c(0x9b0));else{if(_0x54d28e[_0x21076c(0x9c0)]())this[_0x21076c(0x635)](_0x21076c(0x5bd));else{if(_0x54d28e[_0x21076c(0x94d)]())[0x1,0x2,0x5,0x6][_0x21076c(0xba2)](_0x54d28e[_0x21076c(0x7cc)]()[_0x21076c(0x969)][_0x21076c(0x65f)])?this['performAttack']():this['requestMotion'](_0x21076c(0xa1a));else _0x54d28e[_0x21076c(0x9ce)]()&&this[_0x21076c(0x635)](_0x21076c(0x7cc));}}}},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x912)]=function(){const _0x18d892=_0x29c7b3;return $dataSystem[_0x18d892(0x9e0)][0x0];},Game_Battler['prototype'][_0x29c7b3(0x209)]=function(){const _0x33fe3a=_0x29c7b3,_0x14aad7=this[_0x33fe3a(0x912)]();return _0x14aad7?_0x14aad7['weaponImageId']:0x0;},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x944)]=function(_0x6af3b0){const _0x52b3f6=_0x29c7b3;if(!$gameSystem[_0x52b3f6(0x204)]())return;const _0x28951a=this[_0x52b3f6(0xa65)](),_0x24077a=_0x6af3b0[_0x52b3f6(0xa65)]();if(!_0x28951a||!_0x24077a)return;const _0x345c77=_0x24077a[_0x52b3f6(0xa3a)],_0x1836d5=_0x24077a[_0x52b3f6(0x488)];this[_0x52b3f6(0x43c)](_0x345c77,_0x1836d5,0x0,![],'Linear',-0x1),_0x28951a[_0x52b3f6(0x975)]();const _0xbcfbff=VisuMZ[_0x52b3f6(0x2e2)]['Settings']['ActionSequence'];let _0x2e555a=(_0x24077a[_0x52b3f6(0x580)]+_0x28951a['width'])/0x2;_0x2e555a*=this['isActor']()?0x1:-0x1;let _0x2eaa80=_0xbcfbff[_0x52b3f6(0x24e)]*(this['isActor']()?0x1:-0x1);_0x6af3b0[_0x52b3f6(0x40d)](_0x2e555a,_0x2eaa80,0x0,![],_0x52b3f6(0x2da)),_0x24077a[_0x52b3f6(0x975)]();},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x635)]=function(_0x1de6ea){const _0x2fd606=_0x29c7b3;if(SceneManager['isSceneBattle']()){const _0x496711=this[_0x2fd606(0xa65)]();_0x496711&&(_0x496711['forceMotion'](_0x1de6ea),['swing',_0x2fd606(0xa91),_0x2fd606(0x856)][_0x2fd606(0xba2)](_0x1de6ea)&&this[_0x2fd606(0x5f9)]());}this['clearFreezeMotion']();},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x5f9)]=function(){},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x85f)]=function(_0x1daf34){const _0x47ae7f=_0x29c7b3;if(SceneManager[_0x47ae7f(0x429)]()){const _0x591f2c=this[_0x47ae7f(0xa65)]();if(_0x591f2c)_0x591f2c[_0x47ae7f(0x7dc)](_0x1daf34);}},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x301)]=function(){const _0xd402ce=_0x29c7b3;if(SceneManager['isSceneBattle']()){const _0x374d01=this[_0xd402ce(0x209)]();this[_0xd402ce(0x85f)](_0x374d01);}},Game_Battler[_0x29c7b3(0xc03)]['performCastAnimation']=function(_0x587b01,_0x59cff1){const _0x3bc771=_0x29c7b3;if(!_0x587b01)return;if(!_0x587b01[_0x3bc771(0x7cc)]())return;if(_0x587b01['isAttack']())return;if(_0x587b01[_0x3bc771(0x16e)]())return;if(_0x587b01[_0x3bc771(0x9ce)]())return;if($gameTemp[_0x3bc771(0xb30)])return;let _0x2451bc=0x0;const _0x59c115=VisuMZ[_0x3bc771(0x2e2)][_0x3bc771(0xc14)][_0x3bc771(0x54f)],_0x261838=_0x587b01[_0x3bc771(0x7cc)]()['note'];if(_0x261838[_0x3bc771(0x290)](/<CAST ANIMATION: (\d+)>/i))_0x2451bc=Number(RegExp['$1']);else{if(_0x261838[_0x3bc771(0x290)](/<NO CAST ANIMATION>/i))return;else{if(_0x587b01['isCertainHit']())_0x2451bc=_0x59c115[_0x3bc771(0xaa1)];else{if(_0x587b01['isPhysical']())_0x2451bc=_0x59c115[_0x3bc771(0x353)];else _0x587b01['isMagical']()&&(_0x2451bc=_0x59c115[_0x3bc771(0x45a)]);}}}_0x2451bc>0x0&&$gameTemp[_0x3bc771(0x2fa)]([this],_0x2451bc,!!_0x59cff1);},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x63e)]=function(){const _0x921928=_0x29c7b3;SoundManager[_0x921928(0x139)]();let _0x404758=VisuMZ['BattleCore'][_0x921928(0xc14)]['ActionSequence'][_0x921928(0x585)];_0x404758>0x0&&(Imported[_0x921928(0x50c)]?$gameTemp[_0x921928(0x57d)]([this],_0x404758):$gameTemp[_0x921928(0x2fa)]([this],_0x404758));},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xb96)]=function(){const _0xda21a4=_0x29c7b3;if(!$gameSystem[_0xda21a4(0x204)]())return![];if(!BattleManager[_0xda21a4(0x43a)]())return![];if(!this[_0xda21a4(0x475)]())return![];if(this['isInputting']())return!![];if(this[_0xda21a4(0x7f8)]())return!![];if(this[_0xda21a4(0x1e2)]>=0x1)return!![];return![];},VisuMZ['BattleCore'][_0x29c7b3(0xb88)]=Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x83b)],Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x83b)]=function(){const _0xfa23a1=_0x29c7b3;this[_0xfa23a1(0xb96)]()&&(this[_0xfa23a1(0x490)]=!![]),VisuMZ['BattleCore']['Game_Battler_performDamage'][_0xfa23a1(0x8d6)](this),this[_0xfa23a1(0x41d)](),this[_0xfa23a1(0xa99)]();},VisuMZ[_0x29c7b3(0x2e2)]['Game_Battler_performMiss']=Game_Battler['prototype']['performMiss'],Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x12f)]=function(){const _0x5441b9=_0x29c7b3;this['isActiveTpbReady']()&&(this[_0x5441b9(0x490)]=!![]),VisuMZ[_0x5441b9(0x2e2)]['Game_Battler_performMiss'][_0x5441b9(0x8d6)](this),this[_0x5441b9(0x41d)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xae7)]=Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x53e)],Game_Battler['prototype'][_0x29c7b3(0x53e)]=function(){const _0x183413=_0x29c7b3;this[_0x183413(0xb96)]()&&(this[_0x183413(0x490)]=!![]),VisuMZ[_0x183413(0x2e2)][_0x183413(0xae7)][_0x183413(0x8d6)](this),this[_0x183413(0x41d)]();},Game_Battler['prototype'][_0x29c7b3(0x41d)]=function(){const _0x30ff5e=_0x29c7b3;if(!$gameSystem[_0x30ff5e(0x204)]())return;if(this['_flinched'])return;this[_0x30ff5e(0x22e)]=!![];const _0x315a63=this[_0x30ff5e(0xa65)]();if(_0x315a63)_0x315a63[_0x30ff5e(0x560)]();},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xa99)]=function(){const _0x49745b=_0x29c7b3;if(!this[_0x49745b(0x500)]())return;const _0x189383=VisuMZ['BattleCore'][_0x49745b(0xc14)][_0x49745b(0x953)];if(!(_0x189383['ShakeFlinch']??![]))return;if(this[_0x49745b(0x4b9)]<=0x0)return;const _0x178a41=this['battler']();if(_0x178a41){const _0x8e9a0e=this[_0x49745b(0x4b9)],_0x472eed=(_0x8e9a0e/this[_0x49745b(0x1e9)])[_0x49745b(0x582)](0.8,0x1),_0x59aa5c=_0x189383[_0x49745b(0x6a2)]??0x30,_0x4fe622=_0x472eed*_0x59aa5c;_0x178a41[_0x49745b(0x9f8)](_0x4fe622,_0x472eed);}},Game_Battler[_0x29c7b3(0xc03)]['requestMotionRefresh']=function(){const _0x5ee1d4=_0x29c7b3;if(this['isDead']()&&this[_0x5ee1d4(0x3b1)]!=='dead'){this['requestMotion'](_0x5ee1d4(0x839));return;}if(this[_0x5ee1d4(0x7cd)]()&&this['_motionType']===_0x5ee1d4(0x839))return;if(!!this['_freezeMotionData'])return;if(this[_0x5ee1d4(0xb3d)]()){if(!this[_0x5ee1d4(0xafd)]()&&this!==BattleManager[_0x5ee1d4(0x215)]){if(this[_0x5ee1d4(0xa65)]())this['battler']()[_0x5ee1d4(0x3c5)]();}this[_0x5ee1d4(0x407)]();return;}if(this['_motionType']===_0x5ee1d4(0xabc))return;if(this[_0x5ee1d4(0x3b1)]===_0x5ee1d4(0x3a2)&&!BattleManager[_0x5ee1d4(0x7f1)]())return;if(this[_0x5ee1d4(0x3b1)]===_0x5ee1d4(0x9b0)&&!BattleManager[_0x5ee1d4(0x7f1)]())return;this[_0x5ee1d4(0x515)]();if(BattleManager[_0x5ee1d4(0x43a)]()&&this===BattleManager['_subject'])return;if(this[_0x5ee1d4(0xa65)]()&&BattleManager[_0x5ee1d4(0x7f1)]()){this['battler']()[_0x5ee1d4(0x3c5)](),this['clearFreezeMotion']();return;}},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xafd)]=function(){const _0x1b618a=_0x29c7b3;if(!this[_0x1b618a(0x20b)]())return![];const _0x1fddcd=this['battler']();if(!_0x1fddcd)return![];const _0x4dddd5=_0x1fddcd['_svBattlerSprite'];if(!_0x4dddd5)return![];const _0x5b9816=_0x4dddd5[_0x1b618a(0x2f1)];return _0x5b9816&&!_0x5b9816[_0x1b618a(0x8eb)];},Game_Battler[_0x29c7b3(0xc03)]['isBattlerFlipped']=function(){const _0x41f21f=_0x29c7b3;return this[_0x41f21f(0x470)];},Game_Battler[_0x29c7b3(0xc03)]['setBattlerFlip']=function(_0x23ca84){const _0x57c3de=_0x29c7b3;if(!$gameSystem[_0x57c3de(0x204)]())return;this[_0x57c3de(0x470)]=_0x23ca84;const _0x2006c9=this[_0x57c3de(0xa65)]();if(_0x2006c9)_0x2006c9[_0x57c3de(0x89e)]();},Game_Battler['prototype'][_0x29c7b3(0x32c)]=function(_0xbac4c9,_0x15ef6f,_0x39e583){const _0x1a4c0b=_0x29c7b3;if(!$gameSystem[_0x1a4c0b(0x204)]())return;const _0x8d2d1=this[_0x1a4c0b(0xa65)]();if(!_0x8d2d1)return;if(_0xbac4c9===_0x8d2d1['_baseX'])return;let _0x2567e7=![];if(this[_0x1a4c0b(0xa27)]()){if(_0xbac4c9>_0x8d2d1[_0x1a4c0b(0xa3a)])_0x2567e7=!![];if(_0xbac4c9<_0x8d2d1[_0x1a4c0b(0xa3a)])_0x2567e7=![];}else{if(this[_0x1a4c0b(0xb3d)]()){if(_0xbac4c9>_0x8d2d1['_baseX'])_0x2567e7=![];if(_0xbac4c9<_0x8d2d1[_0x1a4c0b(0xa3a)])_0x2567e7=!![];}};this['setBattlerFlip'](_0x39e583?!_0x2567e7:_0x2567e7),_0x8d2d1[_0x1a4c0b(0x89e)]();},Game_Battler['prototype']['moveBattlerDistance']=function(_0x373260,_0x2c5568,_0x840878,_0x53c8d6,_0xc53dc){const _0x9ded9a=_0x29c7b3;if(!$gameSystem[_0x9ded9a(0x204)]())return;const _0x24f8de=this['battler']();if(!_0x24f8de)return;if(_0x53c8d6)this[_0x9ded9a(0x32c)](_0x373260+_0x24f8de[_0x9ded9a(0xa3a)],_0x2c5568+_0x24f8de['_baseY'],![]);_0x373260+=_0x24f8de[_0x9ded9a(0xa3a)]-_0x24f8de['_homeX'],_0x2c5568+=_0x24f8de['_baseY']-_0x24f8de[_0x9ded9a(0x76e)],_0x24f8de['startMove'](_0x373260,_0x2c5568,_0x840878);if(Imported['VisuMZ_0_CoreEngine'])_0x24f8de[_0x9ded9a(0x8f9)](_0xc53dc||_0x9ded9a(0x2da));},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x43c)]=function(_0x3b5a98,_0xe0d9b7,_0x15b9e7,_0x44f0f0,_0x4aea0f,_0x20461a){const _0x297b6f=_0x29c7b3;if(!$gameSystem['isSideView']())return;const _0xfe3d54=this[_0x297b6f(0xa65)]();if(!_0xfe3d54)return;if(_0x3b5a98===Infinity||_0xe0d9b7===Infinity)return;if(isNaN(_0x3b5a98)||isNaN(_0xe0d9b7))return;_0x20461a=_0x20461a||0x0;if(_0x20461a>0x0){if(_0xfe3d54['_baseX']>_0x3b5a98)_0x3b5a98+=_0xfe3d54[_0x297b6f(0x580)]/0x2+_0x20461a;if(_0xfe3d54['_baseX']<_0x3b5a98)_0x3b5a98-=_0xfe3d54['width']/0x2+_0x20461a;}if(_0x44f0f0)this[_0x297b6f(0x32c)](_0x3b5a98,_0xe0d9b7,![]);_0x3b5a98-=_0xfe3d54[_0x297b6f(0x755)],_0xe0d9b7-=_0xfe3d54['_homeY'],_0xfe3d54[_0x297b6f(0xab3)](_0x3b5a98,_0xe0d9b7,_0x15b9e7);if(Imported[_0x297b6f(0x50c)])_0xfe3d54[_0x297b6f(0x8f9)](_0x4aea0f||_0x297b6f(0x2da));},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x196)]=function(_0x275919,_0x4c69ed,_0x49bce4,_0x39ec7e,_0x5d8a56){const _0x5391ad=_0x29c7b3;if(!$gameSystem[_0x5391ad(0x204)]())return;const _0x397223=this[_0x5391ad(0xa65)]();if(!_0x397223)return;if(_0x39ec7e)this['setBattlerFacePoint'](_0x275919+_0x397223[_0x5391ad(0xa3a)],_0x4c69ed+_0x397223['_baseY'],![]);_0x275919+=_0x397223[_0x5391ad(0x755)],_0x4c69ed+=_0x397223[_0x5391ad(0x76e)],_0x397223[_0x5391ad(0x886)](_0x275919,_0x4c69ed,_0x49bce4,_0x5d8a56),this[_0x5391ad(0x6ed)]=_0x275919,this[_0x5391ad(0x11b)]=_0x4c69ed;},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x223)]=function(_0x24b00d,_0x20c4e7,_0x5e3adb,_0x551503,_0x192271,_0x1fbc31){const _0x58e8e6=_0x29c7b3;if(!$gameSystem['isSideView']())return;const _0x27745c=this[_0x58e8e6(0xa65)]();if(!_0x27745c)return;_0x1fbc31=_0x1fbc31||0x0;if(_0x1fbc31>0x0){if(_0x27745c[_0x58e8e6(0xa3a)]>_0x24b00d)_0x24b00d+=_0x27745c['width']/0x2+_0x1fbc31;if(_0x27745c[_0x58e8e6(0xa3a)]<_0x24b00d)_0x24b00d-=_0x27745c[_0x58e8e6(0x580)]/0x2+_0x1fbc31;}if(_0x551503)this['setBattlerFacePoint'](_0x24b00d,_0x20c4e7,![]);_0x27745c['startHomeMove'](_0x24b00d,_0x20c4e7,_0x5e3adb,_0x192271),this[_0x58e8e6(0x6ed)]=_0x24b00d,this['_forcedHomeY']=_0x20c4e7;},Game_Battler['prototype'][_0x29c7b3(0x365)]=function(_0x37e018,_0x271842,_0x298217){const _0x5ade7f=_0x29c7b3;if(!$gameSystem['isSideView']())return;const _0x997236=this[_0x5ade7f(0xa65)]();if(!_0x997236)return;_0x997236['startFloat'](_0x37e018,_0x271842,_0x298217);},Game_Battler[_0x29c7b3(0xc03)]['jumpBattler']=function(_0x2302ca,_0x499125){const _0x367185=_0x29c7b3;if(!$gameSystem['isSideView']())return;const _0xcb589d=this[_0x367185(0xa65)]();if(!_0xcb589d)return;_0xcb589d[_0x367185(0x35b)](_0x2302ca,_0x499125);},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x7a4)]=function(_0x322443,_0x1e6bc0,_0x3e328f,_0x52644f){const _0x4c4c11=_0x29c7b3;if(!$gameSystem['isSideView']())return;const _0x371eea=this[_0x4c4c11(0xa65)]();if(!_0x371eea)return;_0x371eea[_0x4c4c11(0x2e7)](_0x322443,_0x1e6bc0,_0x3e328f,_0x52644f);},Game_Battler['prototype']['skewBattler']=function(_0x305eca,_0x29ab14,_0xdae5cb,_0x419ec6){const _0xe0b420=_0x29c7b3;if(!$gameSystem[_0xe0b420(0x204)]())return;const _0x52aefc=this[_0xe0b420(0xa65)]();if(!_0x52aefc)return;this[_0xe0b420(0xa27)]()&&(_0x305eca*=-0x1,_0x29ab14*=-0x1),_0x52aefc[_0xe0b420(0x86f)](_0x305eca,_0x29ab14,_0xdae5cb,_0x419ec6);},Game_Battler[_0x29c7b3(0xc03)]['growBattler']=function(_0x36421d,_0x1462ec,_0x53ddf4,_0x308d79){const _0x295c62=_0x29c7b3;if(!$gameSystem['isSideView']())return;const _0x402ecb=this['battler']();if(!_0x402ecb)return;_0x402ecb[_0x295c62(0x7d0)](_0x36421d,_0x1462ec,_0x53ddf4,_0x308d79);},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x6a4)]=function(_0x4e5f34,_0xa6714b,_0x2c67ff){const _0x27e38d=_0x29c7b3;if(!$gameSystem[_0x27e38d(0x204)]())return;const _0x2d04ec=this[_0x27e38d(0xa65)]();if(!_0x2d04ec)return;_0x2d04ec['startOpacity'](_0x4e5f34,_0xa6714b,_0x2c67ff);},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x407)]=function(){const _0xe79809=_0x29c7b3,_0x2ad6c4=!!this['_freezeMotionData'];this['_freezeMotionData']=undefined,_0x2ad6c4&&(this[_0xe79809(0x3b5)](),this[_0xe79809(0x9b3)]());},Game_Battler['prototype'][_0x29c7b3(0x9b3)]=function(){const _0x46dee6=_0x29c7b3;if(!SceneManager[_0x46dee6(0x429)]())return;const _0x39ab0e=this[_0x46dee6(0xa65)]();if(!_0x39ab0e)return;let _0x18ea7a=this['isActor']()?_0x39ab0e[_0x46dee6(0x7ce)]:_0x39ab0e[_0x46dee6(0x6e0)][_0x46dee6(0x7ce)];_0x18ea7a&&_0x18ea7a['setup'](0x0);},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x7fb)]=function(_0x4b9909,_0x270abb,_0x47ede4){const _0x585dc0=_0x29c7b3;if(this[_0x585dc0(0xb3d)]()&&!this[_0x585dc0(0x20b)]())return;let _0x5d654d=0x0,_0x3a6dc1=0x0;_0x4b9909[_0x585dc0(0x290)](/ATTACK[ ](\d+)/i)&&(_0x3a6dc1=Number(RegExp['$1']),_0x3a6dc1--);if(this[_0x585dc0(0xa27)]()){const _0x306442=this[_0x585dc0(0x87f)]();_0x5d654d=_0x306442[_0x3a6dc1]?_0x306442[_0x3a6dc1]['wtypeId']:0x0;}else this[_0x585dc0(0xb3d)]()&&(_0x5d654d=this['svBattlerData']()[_0x585dc0(0x18c)]||0x0);const _0x52ba05=$dataSystem[_0x585dc0(0x9e0)][_0x5d654d];_0x4b9909[_0x585dc0(0x290)](/attack/i)&&(_0x4b9909=[_0x585dc0(0xa91),_0x585dc0(0xa8d),_0x585dc0(0x856)][_0x52ba05[_0x585dc0(0x65f)]]||_0x585dc0(0xa8d)),this[_0x585dc0(0x647)]={'motionType':_0x4b9909,'weaponImageId':_0x270abb?_0x52ba05['weaponImageId']:0x0,'pattern':_0x47ede4};},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x4f8)]=function(_0x2a677e){const _0x262131=_0x29c7b3;if(!_0x2a677e)return![];return _0x2a677e[_0x262131(0x922)]()===this[_0x262131(0x922)]();},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x310)]=function(_0x15db32){const _0x1c2124=_0x29c7b3;if(!_0x15db32)return![];return _0x15db32[_0x1c2124(0x773)]()===this[_0x1c2124(0x922)]();},Game_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x254)]=function(){return![];},Game_Actor[_0x29c7b3(0xc03)]['hasStaticSvBattler']=function(){const _0x34b56d=_0x29c7b3;return this[_0x34b56d(0x84c)]()[_0x34b56d(0x290)](/\$/i);},Game_Enemy[_0x29c7b3(0xc03)]['hasStaticSvBattler']=function(){const _0x4bf95a=_0x29c7b3;return this[_0x4bf95a(0x20b)]()&&this[_0x4bf95a(0x8df)]()[_0x4bf95a(0x290)](/\$/i);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x1e4)]=Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0xb10)],Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0xb10)]=function(_0x38fbb6){const _0x179ed5=_0x29c7b3;VisuMZ[_0x179ed5(0x2e2)]['Game_Actor_setup']['call'](this,_0x38fbb6),this[_0x179ed5(0x379)]();},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x379)]=function(){const _0x3f1e31=_0x29c7b3;this['_battlePortrait']='',this[_0x3f1e31(0xb4d)]()&&this[_0x3f1e31(0xb4d)]()[_0x3f1e31(0x124)][_0x3f1e31(0x290)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x3f1e31(0x976)]=String(RegExp['$1']));},Game_Actor[_0x29c7b3(0xc03)]['getBattlePortraitFilename']=function(){const _0x4d9eba=_0x29c7b3;if(this['getBattlePortrait']()!=='')return this[_0x4d9eba(0x7af)]();else{if(Imported[_0x4d9eba(0x358)]&&this[_0x4d9eba(0x6d2)]()!=='')return this[_0x4d9eba(0x6d2)]();}return'';},Game_Actor['prototype']['getBattlePortrait']=function(){const _0x1b41cc=_0x29c7b3;if(this[_0x1b41cc(0x976)]===undefined)this[_0x1b41cc(0x379)]();return this[_0x1b41cc(0x976)];},Game_Actor[_0x29c7b3(0xc03)]['setBattlePortrait']=function(_0x368fca){const _0x325f1d=_0x29c7b3;if(this[_0x325f1d(0x976)]===undefined)this['initBattlePortrait']();this['_battlePortrait']=_0x368fca;if(SceneManager[_0x325f1d(0x429)]()&&$gameParty[_0x325f1d(0xaad)]()[_0x325f1d(0xba2)](this)){const _0x2fc3c0=SceneManager[_0x325f1d(0x364)][_0x325f1d(0x92e)];_0x2fc3c0&&_0x2fc3c0['refreshActorPortrait'](this);}},Game_Actor[_0x29c7b3(0xc03)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x29c7b3(0xc03)]['isAutoBattle']=function(){const _0x5eb083=_0x29c7b3;if(!this[_0x5eb083(0x661)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler[_0x5eb083(0xc03)]['isAutoBattle']['call'](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x6d5)]=Game_Actor[_0x29c7b3(0xc03)]['makeActionList'],Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0xb54)]=function(){const _0x5125b3=_0x29c7b3;if(BattleManager['_autoBattle']&&!ConfigManager[_0x5125b3(0x154)])return this[_0x5125b3(0x3ca)]();else{return VisuMZ[_0x5125b3(0x2e2)][_0x5125b3(0x6d5)][_0x5125b3(0x8d6)](this);;}},Game_Actor[_0x29c7b3(0xc03)]['makeActionListAutoAttack']=function(){const _0x130178=_0x29c7b3,_0x1136f7=[],_0x55e33c=new Game_Action(this);return _0x55e33c['setAttack'](),_0x1136f7[_0x130178(0x13a)](_0x55e33c),_0x1136f7;},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0xa95)]=function(){const _0x45b499=_0x29c7b3;return this[_0x45b499(0x94b)]()['note'][_0x45b499(0x290)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x45b499(0xb3b)](/[\r\n]+/):VisuMZ[_0x45b499(0x2e2)][_0x45b499(0xc14)]['ActorCmd'][_0x45b499(0x7d6)];},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x7cf)]=function(){const _0x3cc28e=_0x29c7b3;if(this['_cache']['svAnchorX']!==undefined)return this['_cache']['svAnchorX'];return this[_0x3cc28e(0xb4d)]()[_0x3cc28e(0x124)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x3cc28e(0x6b7)][_0x3cc28e(0x74f)]=eval(RegExp['$1']),this[_0x3cc28e(0x6b7)][_0x3cc28e(0xa29)]=eval(RegExp['$2'])):this[_0x3cc28e(0x6b7)][_0x3cc28e(0x74f)]=Game_Battler[_0x3cc28e(0xc03)]['svBattlerAnchorX']['call'](this),this['_cache'][_0x3cc28e(0x74f)];},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x2dd)]=function(){const _0x2698fe=_0x29c7b3;if(this[_0x2698fe(0x6b7)]['svAnchorY']!==undefined)return this[_0x2698fe(0x6b7)]['svAnchorY'];return this[_0x2698fe(0xb4d)]()[_0x2698fe(0x124)][_0x2698fe(0x290)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x2698fe(0x6b7)]['svAnchorX']=eval(RegExp['$1']),this[_0x2698fe(0x6b7)]['svAnchorY']=eval(RegExp['$2'])):this[_0x2698fe(0x6b7)]['svAnchorY']=Game_Battler['prototype'][_0x2698fe(0x2dd)]['call'](this),this[_0x2698fe(0x6b7)]['svAnchorY'];},Game_Actor['prototype']['svBattlerShadowVisible']=function(){const _0x24cac8=_0x29c7b3;if(this[_0x24cac8(0x6b7)][_0x24cac8(0x1e3)]!==undefined)return this[_0x24cac8(0x6b7)]['svShadow'];if(this[_0x24cac8(0xb4d)]()['note'][_0x24cac8(0x290)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x24cac8(0x6b7)][_0x24cac8(0x1e3)]=!![];else this[_0x24cac8(0xb4d)]()[_0x24cac8(0x124)][_0x24cac8(0x290)](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache'][_0x24cac8(0x1e3)]=![]:this['_cache'][_0x24cac8(0x1e3)]=Game_Battler['prototype'][_0x24cac8(0x15d)]['call'](this);return this[_0x24cac8(0x6b7)][_0x24cac8(0x1e3)];},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0xa2a)]=function(){const _0x1c5cb9=_0x29c7b3;return VisuMZ['BattleCore'][_0x1c5cb9(0xc14)][_0x1c5cb9(0x953)][_0x1c5cb9(0x8a0)];},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x5f9)]=function(){const _0x2a9f42=_0x29c7b3,_0x297a6f=this[_0x2a9f42(0x87f)](),_0x2bef21=_0x297a6f[0x0]?_0x297a6f[0x0][_0x2a9f42(0x18c)]:0x0,_0x1a56c5=$dataSystem['attackMotions'][_0x2bef21];_0x1a56c5&&this[_0x2a9f42(0x85f)](_0x1a56c5[_0x2a9f42(0x21a)]);},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x6bf)]=function(_0x2fa5ac){const _0x2f61c6=_0x29c7b3;Game_Battler[_0x2f61c6(0xc03)]['performAction'][_0x2f61c6(0x8d6)](this,_0x2fa5ac),this[_0x2f61c6(0x5c9)](_0x2fa5ac);},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x912)]=function(){const _0x12a1af=_0x29c7b3,_0x1d95b3=this[_0x12a1af(0x87f)](),_0x3ad754=_0x1d95b3[0x0]?_0x1d95b3[0x0]['wtypeId']:0x0;return $dataSystem['attackMotions'][_0x3ad754];},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x614)]=function(_0x1d56d1){const _0x3fec2e=_0x29c7b3;_0x1d56d1=_0x1d56d1||0x1,_0x1d56d1--;const _0xf39fa8=this['weapons']();return _0xf39fa8[_0x1d56d1]?_0xf39fa8[_0x1d56d1][_0x3fec2e(0x2d9)]:0x0;},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0xb58)]=function(_0x11152b){const _0xf970fa=_0x29c7b3;_0x11152b=_0x11152b||0x1,_0x11152b--;const _0x2fee01=this[_0xf970fa(0x87f)](),_0x880a5a=_0x2fee01[_0x11152b]?_0x2fee01[_0x11152b]['wtypeId']:0x0;return $dataSystem[_0xf970fa(0x9e0)][_0x880a5a];},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x5a6)]=function(_0x2ad9b3){const _0x3fae85=_0x29c7b3;_0x2ad9b3=_0x2ad9b3||0x1,_0x2ad9b3--;const _0x203e3c=this['weapons'](),_0xce19ef=_0x203e3c[_0x2ad9b3]?_0x203e3c[_0x2ad9b3][_0x3fae85(0x18c)]:0x0,_0x36b4a3=$dataSystem[_0x3fae85(0x9e0)][_0xce19ef];if(_0x36b4a3){if(_0x36b4a3[_0x3fae85(0x65f)]===0x0)this['requestMotion'](_0x3fae85(0xa91));else{if(_0x36b4a3[_0x3fae85(0x65f)]===0x1)this['requestMotion'](_0x3fae85(0xa8d));else _0x36b4a3[_0x3fae85(0x65f)]===0x2&&this['requestMotion'](_0x3fae85(0x856));}this[_0x3fae85(0x85f)](_0x36b4a3[_0x3fae85(0x21a)]);}},Game_Battler['prototype']['setActiveWeaponSlot']=function(_0x1314ac){const _0x81ded0=_0x29c7b3;if(this[_0x81ded0(0xa27)]()){const _0x4fbf84=this[_0x81ded0(0x87f)]();if(_0x4fbf84['length']>0x0){const _0x506428=_0x4fbf84[_0x1314ac];if(_0x506428)_0x1314ac=this['equips']()['indexOf'](_0x506428);}}this[_0x81ded0(0x34e)]=_0x1314ac||0x0,this['_cache']={};},Game_Battler[_0x29c7b3(0xc03)]['nextActiveWeaponSlot']=function(){const _0x9853c0=_0x29c7b3;this[_0x9853c0(0x34e)]=this[_0x9853c0(0x34e)]||0x0,this[_0x9853c0(0x34e)]++,this[_0x9853c0(0x6b7)]={};},Game_Battler['prototype'][_0x29c7b3(0xad8)]=function(){const _0x343bef=_0x29c7b3;this[_0x343bef(0x34e)]=undefined,this['_cache']={};},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x5d5)]=Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x74b)],Game_Actor['prototype'][_0x29c7b3(0x74b)]=function(){const _0x308f8e=_0x29c7b3;let _0x25e8c8=VisuMZ[_0x308f8e(0x2e2)]['Game_Actor_equips'][_0x308f8e(0x8d6)](this);if(this[_0x308f8e(0x317)])return _0x25e8c8;if(this[_0x308f8e(0x34e)]!==undefined){this['_tempEquipCheck']=!![];const _0x134654=this[_0x308f8e(0x534)]();for(let _0x302f70=0x0;_0x302f70<_0x134654[_0x308f8e(0xba7)];_0x302f70++){_0x134654[_0x302f70]===0x1&&this[_0x308f8e(0x34e)]!==_0x302f70&&(_0x25e8c8[_0x302f70]=null);}this[_0x308f8e(0x317)]=undefined;}return _0x25e8c8;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x1eb)]=Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x8fa)],Game_BattlerBase['prototype'][_0x29c7b3(0x8fa)]=function(_0x5542db){const _0x56263f=_0x29c7b3;this[_0x56263f(0x34e)]!==undefined&&[0x0,0x1][_0x56263f(0xba2)](_0x5542db)&&(this['_tempEquipCheck']=!![]);const _0x8df086=VisuMZ[_0x56263f(0x2e2)]['Game_BattlerBase_param'][_0x56263f(0x8d6)](this,_0x5542db);return this[_0x56263f(0x34e)]!==undefined&&[0x0,0x1][_0x56263f(0xba2)](_0x5542db)&&(this[_0x56263f(0x317)]=![]),_0x8df086;},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x9e4)]=function(_0x5e94f9){const _0x23ea55=_0x29c7b3;return _0x5e94f9['isActor']()?_0x5e94f9['weapons']()[_0x23ea55(0xba7)]||0x1:0x1;},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x306)]=function(_0x2bac2d,_0x479c86){const _0xa989cf=_0x29c7b3;_0x2bac2d&&_0x2bac2d[_0xa989cf(0xa27)]()&&_0x2bac2d['setActiveWeaponSlot'](_0x479c86),this[_0xa989cf(0x931)]();},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x19b)]=function(_0x3c331e){const _0x47af41=_0x29c7b3;_0x3c331e&&_0x3c331e[_0x47af41(0xa27)]()&&_0x3c331e[_0x47af41(0xad8)](),this['callNextMethod']();},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0xa9d)]=function(){const _0x410e8a=_0x29c7b3;let _0x51e6a7=_0x410e8a(0xa9d);if(this[_0x410e8a(0x5cf)](_0x51e6a7))return this[_0x410e8a(0x6b7)][_0x51e6a7];return this[_0x410e8a(0x6b7)][_0x51e6a7]=this[_0x410e8a(0x96c)](this[_0x410e8a(0xb4d)]()),this['_cache'][_0x51e6a7];},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x820)]=function(){const _0x3d3332=_0x29c7b3;let _0x50f7b6='battleUIOffsetY';if(this[_0x3d3332(0x5cf)](_0x50f7b6))return this[_0x3d3332(0x6b7)][_0x50f7b6];return this[_0x3d3332(0x6b7)][_0x50f7b6]=this[_0x3d3332(0x709)](this[_0x3d3332(0xb4d)]()),this[_0x3d3332(0x6b7)][_0x50f7b6];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x13d)]=Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xb10)],Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xb10)]=function(_0x10e2a2,_0x55ced2,_0x3ee351){const _0x4fac19=_0x29c7b3;_0x10e2a2=DataManager[_0x4fac19(0x8ff)](_0x10e2a2),VisuMZ[_0x4fac19(0x2e2)][_0x4fac19(0x13d)][_0x4fac19(0x8d6)](this,_0x10e2a2,_0x55ced2,_0x3ee351),Imported[_0x4fac19(0x26b)]&&this[_0x4fac19(0x489)](),this[_0x4fac19(0xa0c)](),this[_0x4fac19(0xbb8)](),this[_0x4fac19(0x59b)](),Imported['VisuMZ_1_ElementStatusCore']&&this['recoverAll']();},Game_Enemy['prototype']['clearBattleCoreData']=function(){const _0x3d1d29=_0x29c7b3,_0x1816f9=VisuMZ[_0x3d1d29(0x2e2)][_0x3d1d29(0xc14)][_0x3d1d29(0xac6)];this['_attackAnimationId']=_0x1816f9[_0x3d1d29(0x527)],this[_0x3d1d29(0x26d)]={},this[_0x3d1d29(0xc25)]();},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xbb8)]=function(){const _0x132b76=_0x29c7b3,_0x273c6e=VisuMZ[_0x132b76(0x2e2)][_0x132b76(0xc14)][_0x132b76(0xac6)],_0x404961=this['enemy']()[_0x132b76(0x124)];this['_svBattlerData']={'name':'','wtypeId':_0x273c6e[_0x132b76(0x1a4)],'collapse':_0x273c6e[_0x132b76(0x604)],'motionIdle':_0x273c6e['MotionIdle'],'width':_0x273c6e['Width']||0x40,'height':_0x273c6e['Height']||0x40,'anchorX':_0x273c6e[_0x132b76(0x48c)]||0x0,'anchorY':_0x273c6e[_0x132b76(0x898)]||0x0,'shadow':_0x273c6e[_0x132b76(0x2ed)]};_0x404961['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x132b76(0xa3e)]=Number(RegExp['$1']));const _0x38a221=this['_svBattlerData'];if(_0x404961[_0x132b76(0x290)](/<SIDEVIEW BATTLER: (.*)>/i))_0x38a221['name']=String(RegExp['$1']);else{if(_0x404961[_0x132b76(0x290)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0xa744fe=String(RegExp['$1'])[_0x132b76(0xb3b)](/[\r\n]+/)['remove']('');_0x38a221[_0x132b76(0x161)]=DataManager[_0x132b76(0x67e)](_0xa744fe);}}_0x404961['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x38a221['anchorX']=eval(RegExp['$1']),_0x38a221[_0x132b76(0xb02)]=eval(RegExp['$2']));if(_0x404961['match'](/<SIDEVIEW COLLAPSE>/i))_0x38a221['collapse']=!![];else _0x404961[_0x132b76(0x290)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x38a221[_0x132b76(0xb78)]=![]);if(_0x404961['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x38a221[_0x132b76(0x82a)]=!![];else _0x404961[_0x132b76(0x290)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x38a221[_0x132b76(0x82a)]=![]);if(_0x404961[_0x132b76(0x290)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x38a221[_0x132b76(0x90b)]=String(RegExp['$1'])[_0x132b76(0x6fd)]()[_0x132b76(0x89a)]();else{if(_0x404961['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x1c6704=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x132b76(0x5e2)]('');_0x38a221['motionIdle']=DataManager[_0x132b76(0x67e)](_0x1c6704);}}_0x404961[_0x132b76(0x290)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x38a221[_0x132b76(0x580)]=Number(RegExp['$1']),_0x38a221[_0x132b76(0x719)]=Number(RegExp['$2']));if(_0x404961['match'](/<SIDEVIEW WEAPON: (.*)>/i))_0x38a221[_0x132b76(0x18c)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x404961[_0x132b76(0x290)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x459d76=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x132b76(0x5e2)](''),_0x520e0d=DataManager[_0x132b76(0x67e)](_0x459d76);_0x38a221[_0x132b76(0x18c)]=DataManager[_0x132b76(0x3bb)](_0x520e0d);}}if(Imported[_0x132b76(0x26b)]){const _0x4045be=this['getTraitSetKeys']();for(const _0x20cea1 of _0x4045be){const _0x4d0e41=this[_0x132b76(0x107)](_0x20cea1)[_0x132b76(0x846)][_0x132b76(0x36b)]()[_0x132b76(0x89a)](),_0x368038=_0x20cea1[_0x132b76(0x36b)]()['trim']();if(_0x404961[_0x132b76(0x290)](VisuMZ['ElementStatusCore'][_0x132b76(0x1f2)][_0x132b76(0x229)[_0x132b76(0x77d)](_0x368038,_0x4d0e41)]))_0x38a221[_0x132b76(0x161)]=String(RegExp['$1']);else{if(_0x404961[_0x132b76(0x290)](VisuMZ[_0x132b76(0x24c)][_0x132b76(0x1f2)][_0x132b76(0x679)['format'](_0x368038,_0x4d0e41)])){const _0x4e6e0f=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x38a221[_0x132b76(0x161)]=DataManager['processRandomizedData'](_0x4e6e0f);}}if(_0x404961[_0x132b76(0x290)](VisuMZ['ElementStatusCore'][_0x132b76(0x1f2)]['SvWeaponSolo-%1-%2'[_0x132b76(0x77d)](_0x368038,_0x4d0e41)]))_0x38a221[_0x132b76(0x18c)]=DataManager[_0x132b76(0x3bb)](RegExp['$1']);else{if(_0x404961[_0x132b76(0x290)](VisuMZ[_0x132b76(0x24c)][_0x132b76(0x1f2)][_0x132b76(0x5db)[_0x132b76(0x77d)](_0x368038,_0x4d0e41)])){const _0x3fb893=String(RegExp['$1'])[_0x132b76(0xb3b)](/[\r\n]+/)[_0x132b76(0x5e2)](''),_0x2795fe=DataManager[_0x132b76(0x67e)](_0x3fb893);_0x38a221[_0x132b76(0x18c)]=DataManager[_0x132b76(0x3bb)](_0x2795fe);}}if(_0x404961['match'](VisuMZ[_0x132b76(0x24c)]['RegExp'][_0x132b76(0xbfb)[_0x132b76(0x77d)](_0x368038,_0x4d0e41)]))_0x38a221[_0x132b76(0x90b)]=String(RegExp['$1'])['toLowerCase']()['trim']();else{if(_0x404961[_0x132b76(0x290)](VisuMZ[_0x132b76(0x24c)][_0x132b76(0x1f2)]['SvMotionIdleMass-%1-%2'[_0x132b76(0x77d)](_0x368038,_0x4d0e41)])){const _0x3a40c5=String(RegExp['$1'])[_0x132b76(0xb3b)](/[\r\n]+/)[_0x132b76(0x5e2)]('');_0x38a221[_0x132b76(0x90b)]=DataManager[_0x132b76(0x67e)](_0x3a40c5);}}}}},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x916)]=function(){const _0x141e0a=_0x29c7b3;return this[_0x141e0a(0xa3e)]||0x0;},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xa44)]=function(){return this['attackAnimationId1']();},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x614)]=function(_0x5b03c5){const _0x5a993b=_0x29c7b3;return this[_0x5a993b(0x916)]();},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x500)]=function(){const _0x23f2ca=_0x29c7b3;if(this[_0x23f2ca(0x662)]()['note'][_0x23f2ca(0x290)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x23f2ca(0xc03)][_0x23f2ca(0x500)][_0x23f2ca(0x8d6)](this);},Game_Enemy[_0x29c7b3(0xc03)]['isBattlerGrounded']=function(){const _0x155b70=_0x29c7b3;if(this[_0x155b70(0x662)]()['note']['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype'][_0x29c7b3(0x93c)]=function(){const _0x2395b6=_0x29c7b3,_0x5bae89=[];for(const _0x52f3b6 of this[_0x2395b6(0x662)]()[_0x2395b6(0x129)]){const _0x1db4ec=$dataSkills[_0x52f3b6[_0x2395b6(0x3a9)]];if(_0x1db4ec&&!_0x5bae89['includes'](_0x1db4ec))_0x5bae89[_0x2395b6(0x13a)](_0x1db4ec);}return _0x5bae89;},Game_Enemy[_0x29c7b3(0xc03)]['battleUIOffsetX']=function(){const _0x49ab5d=_0x29c7b3;let _0x127288='battleUIOffsetX';if(this[_0x49ab5d(0x5cf)](_0x127288))return this[_0x49ab5d(0x6b7)][_0x127288];return this[_0x49ab5d(0x6b7)][_0x127288]=this[_0x49ab5d(0x96c)](this[_0x49ab5d(0x662)]()),this['_cache'][_0x127288];},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x820)]=function(){const _0x326760=_0x29c7b3;let _0x4abaf0='battleUIOffsetY';if(this[_0x326760(0x5cf)](_0x4abaf0))return this[_0x326760(0x6b7)][_0x4abaf0];return this['_cache'][_0x4abaf0]=this['createBattleUIOffsetY'](this[_0x326760(0x662)]()),this[_0x326760(0x6b7)][_0x4abaf0];},Game_Enemy[_0x29c7b3(0xc03)]['svBattlerData']=function(){const _0x45f615=_0x29c7b3;if(this[_0x45f615(0x26d)]!==undefined)return this[_0x45f615(0x26d)];return this[_0x45f615(0xbb8)](),this[_0x45f615(0x26d)];},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x20b)]=function(){const _0x29a5f6=_0x29c7b3;return this[_0x29a5f6(0x6b5)]()[_0x29a5f6(0x161)]!=='';},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x8df)]=function(){const _0x353241=_0x29c7b3;return this[_0x353241(0x6b5)]()['name'];},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xa2a)]=function(){const _0x356292=_0x29c7b3;return this['hasSvBattler']()?VisuMZ[_0x356292(0x2e2)][_0x356292(0xc14)]['Actor'][_0x356292(0x8a0)]:VisuMZ[_0x356292(0x2e2)][_0x356292(0xc14)]['Enemy']['SmoothImage'];},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x6bf)]=function(_0xa28c0c){const _0x1ae294=_0x29c7b3;Game_Battler['prototype'][_0x1ae294(0x6bf)][_0x1ae294(0x8d6)](this,_0xa28c0c);if(this['hasSvBattler']())this[_0x1ae294(0x5c9)](_0xa28c0c);},Game_Enemy['prototype'][_0x29c7b3(0xa70)]=function(){const _0x253ac8=_0x29c7b3,_0x151f61=this['svBattlerData']()[_0x253ac8(0x18c)]||0x0,_0x4e0b53=$dataSystem['attackMotions'][_0x151f61];if(_0x4e0b53){if(_0x4e0b53[_0x253ac8(0x65f)]===0x0)this[_0x253ac8(0x635)](_0x253ac8(0xa91));else{if(_0x4e0b53[_0x253ac8(0x65f)]===0x1)this[_0x253ac8(0x635)](_0x253ac8(0xa8d));else _0x4e0b53[_0x253ac8(0x65f)]===0x2&&this[_0x253ac8(0x635)]('missile');}}},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x5f9)]=function(){const _0x2991eb=_0x29c7b3,_0xdf0fdb=this[_0x2991eb(0x6b5)]()[_0x2991eb(0x18c)]||0x0,_0x1c7a51=$dataSystem[_0x2991eb(0x9e0)][_0xdf0fdb];_0x1c7a51&&this[_0x2991eb(0x85f)](_0x1c7a51['weaponImageId']);},Game_Enemy['prototype'][_0x29c7b3(0x912)]=function(){const _0x2f6037=_0x29c7b3,_0x110ca0=this[_0x2f6037(0x6b5)]()['wtypeId']||0x0;return $dataSystem[_0x2f6037(0x9e0)][_0x110ca0];},Game_Enemy['prototype'][_0x29c7b3(0xb58)]=function(_0x548a6f){const _0x41e8b1=_0x29c7b3;return this[_0x41e8b1(0x912)]();},Game_Enemy['prototype'][_0x29c7b3(0x83b)]=function(){const _0x26fc34=_0x29c7b3;Game_Battler[_0x26fc34(0xc03)][_0x26fc34(0x83b)][_0x26fc34(0x8d6)](this),this[_0x26fc34(0xb17)]()&&this[_0x26fc34(0x20b)]()&&this[_0x26fc34(0x635)](_0x26fc34(0x969)),SoundManager[_0x26fc34(0x2cc)]();},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x53e)]=function(){const _0x261d18=_0x29c7b3;Game_Battler[_0x261d18(0xc03)][_0x261d18(0x53e)][_0x261d18(0x8d6)](this),this[_0x261d18(0x635)](_0x261d18(0x801));},Game_Enemy['prototype'][_0x29c7b3(0x6e2)]=function(){const _0x2f73eb=_0x29c7b3;Game_Battler['prototype'][_0x2f73eb(0x6e2)][_0x2f73eb(0x8d6)](this),this['requestMotion'](_0x2f73eb(0x801));},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x633)]=function(){const _0x461ade=_0x29c7b3;Game_Battler[_0x461ade(0xc03)]['performCounter'][_0x461ade(0x8d6)](this),this[_0x461ade(0xa70)]();},Game_Enemy['prototype']['allowCollapse']=function(){const _0x5ac14b=_0x29c7b3;if(this[_0x5ac14b(0x20b)]()){if(this[_0x5ac14b(0x2d2)]()>=0x1)return!![];return this[_0x5ac14b(0x6b5)]()[_0x5ac14b(0xb78)];}else return!![];},Game_Enemy['prototype'][_0x29c7b3(0x7cf)]=function(){const _0x596860=_0x29c7b3;return this[_0x596860(0x6b5)]()['anchorX'];},Game_Enemy['prototype'][_0x29c7b3(0x2dd)]=function(){const _0x2f5d0e=_0x29c7b3;return this[_0x2f5d0e(0x6b5)]()[_0x2f5d0e(0xb02)];},Game_Enemy[_0x29c7b3(0xc03)]['svBattlerShadowVisible']=function(){const _0x1a6965=_0x29c7b3;return this['svBattlerData']()[_0x1a6965(0x82a)];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x518)]=Game_Enemy['prototype']['transform'],Game_Enemy['prototype'][_0x29c7b3(0x4c7)]=function(_0x3b89c4){const _0x3181de=_0x29c7b3;VisuMZ['BattleCore'][_0x3181de(0x518)][_0x3181de(0x8d6)](this,_0x3b89c4),this['clearBattleCoreData'](),this[_0x3181de(0xbb8)]();const _0x1f8b9a=this[_0x3181de(0xa65)]();_0x1f8b9a&&(_0x1f8b9a[_0x3181de(0x95a)]=undefined,_0x1f8b9a[_0x3181de(0xbdd)](this));},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xc25)]=function(){const _0x29383a=_0x29c7b3,_0xa2d575=VisuMZ[_0x29383a(0x2e2)][_0x29383a(0xc14)][_0x29383a(0xac6)];this[_0x29383a(0x338)]=_0xa2d575[_0x29383a(0x82c)]??0x0;},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x8e0)]=function(){const _0x2c70e4=_0x29c7b3;return this[_0x2c70e4(0x338)]&&this['_nameTempVisibleDuration']>0x0;},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x191)]=function(){const _0x24578e=_0x29c7b3;this[_0x24578e(0x338)]&&this[_0x24578e(0x338)]>0x0&&this[_0x24578e(0x338)]--;},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x31e)]=function(){this['_nameTempVisibleDuration']=0x0;},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x59b)]=function(){const _0x329609=_0x29c7b3;this[_0x329609(0xaf8)]();const _0x26ac34=this[_0x329609(0x662)]()[_0x329609(0x124)]||'';if(_0x26ac34[_0x329609(0x290)](/<ASPECT NAME:[ ](.*)>/i)){const _0x63dfe6=String(RegExp['$1']);this[_0x329609(0x98d)]()[_0x329609(0x161)]=_0x63dfe6[_0x329609(0x77d)](this['originalName']());}_0x26ac34['match'](/<ASPECT ICON:[ ](\d+)>/i)&&(this[_0x329609(0x98d)]()[_0x329609(0x66d)]=Number(RegExp['$1'])),_0x26ac34[_0x329609(0x290)](/<ASPECT COLOR:[ ](.*)>/i)&&(this[_0x329609(0x98d)]()[_0x329609(0xae9)]=String(RegExp['$1'])),_0x26ac34[_0x329609(0x290)](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this[_0x329609(0x98d)]()['description']=String(RegExp['$1']));},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xaf8)]=function(){const _0x2cf8ba=_0x29c7b3,_0x4f9170=VisuMZ[_0x2cf8ba(0x2e2)][_0x2cf8ba(0xc14)][_0x2cf8ba(0xac6)]['AspectNameFmt']??_0x2cf8ba(0x7f0);this[_0x2cf8ba(0xabe)]={'name':_0x4f9170[_0x2cf8ba(0x77d)](this[_0x2cf8ba(0x1da)]()),'iconIndex':VisuMZ['BattleCore']['Settings'][_0x2cf8ba(0xac6)][_0x2cf8ba(0x2cd)]??0x1a,'nameColor':VisuMZ[_0x2cf8ba(0x2e2)][_0x2cf8ba(0xc14)][_0x2cf8ba(0xac6)][_0x2cf8ba(0xb9e)]??'2','description':''};},Game_Enemy['prototype'][_0x29c7b3(0x98d)]=function(){const _0x2595ce=_0x29c7b3;if(this[_0x2595ce(0xabe)]===undefined)this[_0x2595ce(0x59b)]();return this[_0x2595ce(0xabe)];},Game_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x611)]=function(){const _0x2ab7a5=_0x29c7b3;return(this[_0x2ab7a5(0x98d)]()[_0x2ab7a5(0xaff)]||'')['length']>0x0;},Game_BattlerBase['prototype'][_0x29c7b3(0x5ea)]=function(){const _0x212b8a=_0x29c7b3;return VisuMZ[_0x212b8a(0x2e2)][_0x212b8a(0xc14)][_0x212b8a(0x9c7)][_0x212b8a(0x13e)];},Game_Enemy['prototype'][_0x29c7b3(0x5ea)]=function(){const _0x56cb1f=_0x29c7b3,_0x15bee1=this[_0x56cb1f(0x662)]()?this['enemy']()[_0x56cb1f(0x124)]||'':'';if(_0x15bee1[_0x56cb1f(0x290)](/<POPUP POSITION: HEAD>/i))return'head';else{if(_0x15bee1[_0x56cb1f(0x290)](/<POPUP POSITION: CENTER>/i))return'center';else{if(_0x15bee1[_0x56cb1f(0x290)](/<POPUP POSITION: BASE>/i))return _0x56cb1f(0x60c);}}return Game_BattlerBase[_0x56cb1f(0xc03)]['damagePopupPosition'][_0x56cb1f(0x8d6)](this);},Game_BattlerBase[_0x29c7b3(0xc03)]['damagePopupOffsetX']=function(){return 0x0;},Game_Enemy[_0x29c7b3(0xc03)]['damagePopupOffsetX']=function(){const _0x47cc4c=_0x29c7b3,_0x41a5fb=this[_0x47cc4c(0x662)]()?this['enemy']()['note']||'':'';if(_0x41a5fb[_0x47cc4c(0x290)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x47cc4c(0xc03)][_0x47cc4c(0xaee)][_0x47cc4c(0x8d6)](this);},Game_BattlerBase[_0x29c7b3(0xc03)]['damagePopupOffsetY']=function(){return 0x0;},Game_Enemy['prototype'][_0x29c7b3(0xa94)]=function(){const _0x2ec2b9=_0x29c7b3,_0x4400c0=this[_0x2ec2b9(0x662)]()?this[_0x2ec2b9(0x662)]()[_0x2ec2b9(0x124)]||'':'';if(_0x4400c0[_0x2ec2b9(0x290)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x2ec2b9(0xc03)]['damagePopupOffsetY'][_0x2ec2b9(0x8d6)](this);},Game_Unit[_0x29c7b3(0xc03)]['processBattleCoreJS']=function(_0x580e1d){const _0x53de30=_0x29c7b3;for(const _0x2b7b23 of this[_0x53de30(0xa35)]()){if(_0x2b7b23)_0x2b7b23['processBattleCoreJS'](_0x580e1d);}},Game_Unit[_0x29c7b3(0xc03)][_0x29c7b3(0x108)]=function(){const _0xe21e11=_0x29c7b3,_0xc38aef=this[_0xe21e11(0x89d)]();return _0xc38aef[Math[_0xe21e11(0x7d2)](_0xc38aef['length'])];},VisuMZ[_0x29c7b3(0x2e2)]['Game_Party_addActor']=Game_Party[_0x29c7b3(0xc03)][_0x29c7b3(0xbd4)],Game_Party[_0x29c7b3(0xc03)][_0x29c7b3(0xbd4)]=function(_0x4fa8ff){const _0x4bde84=_0x29c7b3;VisuMZ[_0x4bde84(0x2e2)]['Game_Party_addActor']['call'](this,_0x4fa8ff),BattleManager['refreshStatusWindow']();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x988)]=Game_Party['prototype'][_0x29c7b3(0x659)],Game_Party[_0x29c7b3(0xc03)][_0x29c7b3(0x659)]=function(_0x112c63){const _0x1b1234=_0x29c7b3;VisuMZ[_0x1b1234(0x2e2)][_0x1b1234(0x988)]['call'](this,_0x112c63),BattleManager[_0x1b1234(0xa98)]();},VisuMZ['BattleCore'][_0x29c7b3(0x2b7)]=Game_Troop[_0x29c7b3(0xc03)][_0x29c7b3(0xb10)],Game_Troop[_0x29c7b3(0xc03)][_0x29c7b3(0xb10)]=function(_0x4edee2){const _0xdc600f=_0x29c7b3;$gameTemp[_0xdc600f(0x746)](),$gameTemp[_0xdc600f(0x65a)](_0x4edee2),VisuMZ[_0xdc600f(0x2e2)][_0xdc600f(0x2b7)]['call'](this,_0x4edee2),this['extendTroopMembers']();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x684)]=Game_Troop[_0x29c7b3(0xc03)]['expTotal'],Game_Troop['prototype'][_0x29c7b3(0xb8c)]=function(){const _0x8bd4dd=_0x29c7b3;let _0x3d9765=VisuMZ[_0x8bd4dd(0x2e2)][_0x8bd4dd(0x684)][_0x8bd4dd(0x8d6)](this);return this['expRate']&&(_0x3d9765*=this['expRate']()),Math[_0x8bd4dd(0xc1a)](_0x3d9765);},Game_Troop[_0x29c7b3(0xc03)]['expRate']=function(){return 0x1;},Game_Troop[_0x29c7b3(0xc03)][_0x29c7b3(0x77b)]=function(){const _0x27d73b=_0x29c7b3,_0x4c6329=DataManager['createTroopNote'](this['troop']()['id']);if(_0x4c6329['match'](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x4ce9aa=RegExp['$1'][_0x27d73b(0xb3b)](',')[_0x27d73b(0x8ea)](_0x90bd80=>Number(_0x90bd80));this[_0x27d73b(0x71c)](),this[_0x27d73b(0x1cc)](_0x4ce9aa);}},Game_Troop[_0x29c7b3(0xc03)][_0x29c7b3(0x71c)]=function(){const _0x3adf14=_0x29c7b3;let _0x25abc1='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x25abc1+=_0x3adf14(0xa8f),Imported[_0x3adf14(0x1aa)]&&(VisuMZ[_0x3adf14(0xadd)][_0x3adf14(0x65e)]<1.11&&(alert(_0x25abc1[_0x3adf14(0x77d)]('BTB')),SceneManager[_0x3adf14(0x99d)]())),Imported[_0x3adf14(0x75a)]&&(VisuMZ[_0x3adf14(0x2ef)]['version']<1.19&&(alert(_0x25abc1[_0x3adf14(0x77d)](_0x3adf14(0x320))),SceneManager[_0x3adf14(0x99d)]())),Imported[_0x3adf14(0xbb1)]&&(VisuMZ['BattleSystemSTB'][_0x3adf14(0x65e)]<1.15&&(alert(_0x25abc1[_0x3adf14(0x77d)]('STB')),SceneManager[_0x3adf14(0x99d)]()));},Game_Troop[_0x29c7b3(0xc03)][_0x29c7b3(0x1cc)]=function(_0x199ebd){const _0xfff82b=_0x29c7b3;this[_0xfff82b(0x9e8)]={};for(const _0x4bc35a of this[_0xfff82b(0xa35)]()){if(!_0x4bc35a)continue;_0x4bc35a[_0xfff82b(0x1e0)]('');}for(const _0x59e453 of _0x199ebd){const _0x4b6752=$dataTroops[_0x59e453];if(_0x4b6752)this[_0xfff82b(0x16b)](_0x4b6752);}this[_0xfff82b(0x45f)]();},Game_Troop[_0x29c7b3(0xc03)][_0x29c7b3(0x16b)]=function(_0x3c4fd8){const _0x11122f=_0x29c7b3;for(const _0x1c151b of _0x3c4fd8[_0x11122f(0xa35)]){if($dataEnemies[_0x1c151b[_0x11122f(0x2fe)]]){const _0x1a9e5b=_0x1c151b[_0x11122f(0x2fe)],_0x30cc22=_0x1c151b['x'],_0x100889=_0x1c151b['y'],_0x419088=new Game_Enemy(_0x1a9e5b,_0x30cc22,_0x100889);_0x1c151b['hidden']&&_0x419088['hide'](),this['_enemies'][_0x11122f(0x13a)](_0x419088);}}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x12c)]=Game_Map[_0x29c7b3(0xc03)]['setupBattleback'],Game_Map[_0x29c7b3(0xc03)][_0x29c7b3(0x5b2)]=function(){const _0x14d132=_0x29c7b3;VisuMZ[_0x14d132(0x2e2)][_0x14d132(0x12c)][_0x14d132(0x8d6)](this),this[_0x14d132(0x887)]();},Game_Map[_0x29c7b3(0xc03)]['setupBattlebackBattleCore']=function(){const _0x5e3ce7=_0x29c7b3;this['_regionBattleback1']={},this[_0x5e3ce7(0x64b)]={};if(!$dataMap)return;const _0x3ec38f=$dataMap[_0x5e3ce7(0x124)];if(!_0x3ec38f)return;const _0x4da3d6=_0x3ec38f['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x4da3d6)for(const _0x1ecab4 of _0x4da3d6){_0x1ecab4[_0x5e3ce7(0x290)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x1b1f3b=Number(RegExp['$1']),_0x3928fe=Number(RegExp['$2']),_0x5f060c=_0x3928fe===0x1?this[_0x5e3ce7(0x246)]:this[_0x5e3ce7(0x64b)],_0x50144c=String(RegExp['$3']);_0x5f060c[_0x1b1f3b]=_0x50144c;}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x474)]=Game_Map[_0x29c7b3(0xc03)]['battleback1Name'],Game_Map[_0x29c7b3(0xc03)][_0x29c7b3(0x67f)]=function(){const _0x1cdd2a=_0x29c7b3;if(!BattleManager[_0x1cdd2a(0x700)]()){const _0x3fa1a3=$gamePlayer[_0x1cdd2a(0x6cd)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x1cdd2a(0x246)][_0x3fa1a3])return this[_0x1cdd2a(0x246)][_0x3fa1a3];}return VisuMZ[_0x1cdd2a(0x2e2)]['Game_Map_battleback1Name'][_0x1cdd2a(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x6c0)]=Game_Map[_0x29c7b3(0xc03)][_0x29c7b3(0x729)],Game_Map['prototype'][_0x29c7b3(0x729)]=function(){const _0x1b08ec=_0x29c7b3;if(!BattleManager[_0x1b08ec(0x700)]()){const _0x37e53d=$gamePlayer[_0x1b08ec(0x6cd)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x1b08ec(0x246)]&&this[_0x1b08ec(0x64b)][_0x37e53d])return this[_0x1b08ec(0x64b)][_0x37e53d];}return VisuMZ[_0x1b08ec(0x2e2)][_0x1b08ec(0x6c0)]['call'](this);},VisuMZ['BattleCore']['Game_Map_encounterList']=Game_Map[_0x29c7b3(0xc03)][_0x29c7b3(0x4c0)],Game_Map[_0x29c7b3(0xc03)][_0x29c7b3(0x4c0)]=function(){const _0x29f184=_0x29c7b3;let _0x3cea3a=JsonEx[_0x29f184(0xa87)](VisuMZ[_0x29f184(0x2e2)]['Game_Map_encounterList'][_0x29f184(0x8d6)](this));return VisuMZ[_0x29f184(0x2e2)][_0x29f184(0x197)](_0x3cea3a);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x197)]=function(_0x13dd61){const _0x5b5958=_0x29c7b3;var _0x14be49,_0x58d122,_0x37bed1;for(_0x37bed1=_0x13dd61['length']-0x1;_0x37bed1>0x0;_0x37bed1--){_0x14be49=Math[_0x5b5958(0x1ec)](Math[_0x5b5958(0x85d)]()*(_0x37bed1+0x1)),_0x58d122=_0x13dd61[_0x37bed1],_0x13dd61[_0x37bed1]=_0x13dd61[_0x14be49],_0x13dd61[_0x14be49]=_0x58d122;}return _0x13dd61;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x268)]=Game_Interpreter[_0x29c7b3(0xc03)][_0x29c7b3(0x4e4)],Game_Interpreter[_0x29c7b3(0xc03)][_0x29c7b3(0x4e4)]=function(_0x5ad728){const _0x20aabf=_0x29c7b3;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ[_0x20aabf(0x2e2)]['Game_Interpreter_PluginCommand'][_0x20aabf(0x8d6)](this,_0x5ad728);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x3e7)]=Game_Interpreter[_0x29c7b3(0xc03)][_0x29c7b3(0xa12)],Game_Interpreter[_0x29c7b3(0xc03)][_0x29c7b3(0xa12)]=function(){const _0x2cc70c=_0x29c7b3;if(SceneManager[_0x2cc70c(0x429)]())switch(this[_0x2cc70c(0x863)]){case'battleAngle':if(Imported[_0x2cc70c(0x92c)]){if($gameScreen['battleCameraData']()[_0x2cc70c(0x375)]>0x0)return!![];this[_0x2cc70c(0x863)]='';}break;case _0x2cc70c(0x2be):if(BattleManager[_0x2cc70c(0x690)][_0x2cc70c(0x669)]())return!![];this[_0x2cc70c(0x863)]='';break;case _0x2cc70c(0x1b7):if(BattleManager['_spriteset'][_0x2cc70c(0x841)]())return!![];this['_waitMode']='';break;case _0x2cc70c(0x1d1):if(Imported[_0x2cc70c(0x92c)]){if($gameScreen[_0x2cc70c(0x2af)]()[_0x2cc70c(0x18d)]>0x0)return!![];if($gameScreen['battleCameraData']()[_0x2cc70c(0x821)]>0x0)return!![];this[_0x2cc70c(0x863)]='';}break;case _0x2cc70c(0x436):if(BattleManager[_0x2cc70c(0x690)][_0x2cc70c(0x120)]())return!![];this[_0x2cc70c(0x863)]='';break;case _0x2cc70c(0xbd3):if(BattleManager[_0x2cc70c(0x690)][_0x2cc70c(0x4e8)]())return!![];this['_waitMode']='';break;case _0x2cc70c(0x3fb):if(BattleManager['_spriteset'][_0x2cc70c(0x845)]())return!![];this[_0x2cc70c(0x863)]='';break;case _0x2cc70c(0x46d):if(BattleManager[_0x2cc70c(0x70f)][_0x2cc70c(0x980)]())return!![];this[_0x2cc70c(0x863)]='';break;case _0x2cc70c(0x2a5):if(BattleManager[_0x2cc70c(0x690)][_0x2cc70c(0x477)]())return!![];this[_0x2cc70c(0x863)]='';break;case _0x2cc70c(0x2de):if(BattleManager[_0x2cc70c(0x690)][_0x2cc70c(0x5ba)]())return!![];this[_0x2cc70c(0x863)]='';break;case _0x2cc70c(0x136):if(BattleManager['_spriteset'][_0x2cc70c(0x7d1)]())return!![];this[_0x2cc70c(0x863)]='';break;case _0x2cc70c(0xa07):if(BattleManager[_0x2cc70c(0x690)][_0x2cc70c(0x568)]())return!![];this[_0x2cc70c(0x863)]='';break;case _0x2cc70c(0x151):if(Imported[_0x2cc70c(0x176)]){if(BattleManager[_0x2cc70c(0x690)]['isAnyProjectilePresent']())return!![];this[_0x2cc70c(0x863)]='';}break;case _0x2cc70c(0x5ec):if(Imported[_0x2cc70c(0x92c)]){if($gameScreen[_0x2cc70c(0x2af)]()[_0x2cc70c(0xaae)]>0x0)return!![];this[_0x2cc70c(0x863)]='';}break;case'battleSpin':if(BattleManager['_spriteset'][_0x2cc70c(0xa73)]())return!![];this[_0x2cc70c(0x863)]='';break;case _0x2cc70c(0x760):if(Imported[_0x2cc70c(0x92c)]){if($gameScreen[_0x2cc70c(0x2af)]()[_0x2cc70c(0xb1f)]>0x0)return!![];this[_0x2cc70c(0x863)]='';}break;case _0x2cc70c(0x329):if(Imported[_0x2cc70c(0x992)]){if(BattleManager['_spriteset'][_0x2cc70c(0x6be)]){if(BattleManager[_0x2cc70c(0x690)][_0x2cc70c(0x6be)]())return!![];this[_0x2cc70c(0x863)]=_0x2cc70c(0x83e);}else this[_0x2cc70c(0x863)]='';break;}break;case'battleInjectAni':if(Imported[_0x2cc70c(0x992)]){if(BattleManager[_0x2cc70c(0x690)][_0x2cc70c(0x4dd)]())return!![];this['_waitMode']='';}break;}return VisuMZ[_0x2cc70c(0x2e2)][_0x2cc70c(0x3e7)][_0x2cc70c(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x2c1)]=Game_Interpreter[_0x29c7b3(0xc03)][_0x29c7b3(0xbab)],Game_Interpreter['prototype'][_0x29c7b3(0xbab)]=function(_0x2d821d){const _0x37d132=_0x29c7b3;return!$gameParty[_0x37d132(0x316)]()?this[_0x37d132(0xbe0)](_0x2d821d):VisuMZ[_0x37d132(0x2e2)][_0x37d132(0x2c1)][_0x37d132(0x8d6)](this,_0x2d821d);},Game_Interpreter[_0x29c7b3(0xc03)]['command3011']=function(_0x3a359c){const _0x77a81=_0x29c7b3;return VisuMZ[_0x77a81(0x2e2)][_0x77a81(0x2c1)][_0x77a81(0x8d6)](this,_0x3a359c),BattleManager[_0x77a81(0x200)](_0x5ea4d9=>{const _0x5d91dc=_0x77a81;this[_0x5d91dc(0x9ee)][this[_0x5d91dc(0x4db)]]=_0x5ea4d9;}),!![];},VisuMZ['BattleCore'][_0x29c7b3(0x915)]=function(_0x11f482){const _0xc41eb7=_0x29c7b3,_0x588e23=$dataCommonEvents[_0x11f482];if(!_0x588e23)return![];if(_0x588e23[_0xc41eb7(0x72f)][_0xc41eb7(0xba7)]<=0x1)return![];return!![];},Game_Interpreter[_0x29c7b3(0xc03)]['command301_PreBattleEvent']=function(_0x7ae98){const _0x459765=_0x29c7b3,_0x34dae8=VisuMZ[_0x459765(0x2e2)][_0x459765(0xc14)]['Mechanics'],_0x1dfc99=_0x34dae8[_0x459765(0xac9)],_0x9d123f=$dataCommonEvents[_0x1dfc99];if(_0x9d123f&&VisuMZ[_0x459765(0x2e2)][_0x459765(0x915)](_0x1dfc99)){const _0x144b27=this[_0x459765(0xb03)]()?this['_eventId']:0x0,_0x2d0592=_0x9d123f['list'];this[_0x459765(0x52a)](_0x2d0592,_0x144b27),this[_0x459765(0x3ad)]=JsonEx['makeDeepCopy'](this[_0x459765(0x3ad)]);const _0x16a6d0={'code':0xbc3,'indent':this[_0x459765(0x4db)],'parameters':JsonEx[_0x459765(0xa87)](_0x7ae98)};return this[_0x459765(0x3ad)][_0x459765(0x36c)](this[_0x459765(0x6bb)]+0x1,0x0,_0x16a6d0),!![];}else return VisuMZ['BattleCore']['Game_Interpreter_command301']['call'](this,_0x7ae98);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x402)]=BattleManager['onEncounter'],BattleManager[_0x29c7b3(0x737)]=function(){const _0x6dd60a=_0x29c7b3;VisuMZ[_0x6dd60a(0x2e2)][_0x6dd60a(0x402)][_0x6dd60a(0x8d6)](this),this[_0x6dd60a(0x326)]();},BattleManager[_0x29c7b3(0x326)]=function(){const _0x23ab45=_0x29c7b3,_0x58e47b=VisuMZ[_0x23ab45(0x2e2)][_0x23ab45(0xc14)][_0x23ab45(0x9c6)],_0x1c7794=_0x58e47b[_0x23ab45(0xac9)];_0x1c7794&&VisuMZ[_0x23ab45(0x2e2)]['CheckMapBattleEventValid'](_0x1c7794)&&(this[_0x23ab45(0x5d0)]=!![],$gameTemp[_0x23ab45(0xa6e)](_0x58e47b[_0x23ab45(0xac9)]),$gameMap[_0x23ab45(0xb94)](),$gameMap[_0x23ab45(0xa10)][_0x23ab45(0x3f6)]=!![]),_0x58e47b[_0x23ab45(0xa5b)]>0x0&&(this['_canLose']=!![]);},VisuMZ['BattleCore'][_0x29c7b3(0x8f2)]=Scene_Map[_0x29c7b3(0xc03)][_0x29c7b3(0xc0a)],Scene_Map[_0x29c7b3(0xc03)]['updateCallMenu']=function(){const _0x2aa959=_0x29c7b3;if(BattleManager[_0x2aa959(0x5d0)])return;VisuMZ['BattleCore'][_0x2aa959(0x8f2)]['call'](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x469)]=Scene_Map[_0x29c7b3(0xc03)]['launchBattle'],Scene_Map[_0x29c7b3(0xc03)][_0x29c7b3(0xb0f)]=function(){const _0x241ded=_0x29c7b3;BattleManager[_0x241ded(0x5d0)]?this[_0x241ded(0x884)]():VisuMZ['BattleCore'][_0x241ded(0x469)]['call'](this);},Scene_Map[_0x29c7b3(0xc03)][_0x29c7b3(0x884)]=function(){const _0x294cc6=_0x29c7b3;this[_0x294cc6(0x383)]=!![];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x476)]=SceneManager[_0x29c7b3(0x455)],SceneManager[_0x29c7b3(0x455)]=function(){const _0x4fc9cf=_0x29c7b3;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ[_0x4fc9cf(0x2e2)][_0x4fc9cf(0x476)]['call'](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x8a5)]=Game_Interpreter[_0x29c7b3(0xc03)][_0x29c7b3(0x298)],Game_Interpreter['prototype']['terminate']=function(){const _0x5814b9=_0x29c7b3;VisuMZ[_0x5814b9(0x2e2)][_0x5814b9(0x8a5)]['call'](this),this[_0x5814b9(0x3f6)]&&(this[_0x5814b9(0x3f6)]=undefined,SceneManager[_0x5814b9(0x364)][_0x5814b9(0x698)]());},Scene_Map[_0x29c7b3(0xc03)][_0x29c7b3(0x698)]=function(){const _0x1f8ad7=_0x29c7b3;BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager[_0x1f8ad7(0x9bf)]=!![],this['stop']();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x713)]=Scene_Map['prototype']['initialize'],Scene_Map['prototype'][_0x29c7b3(0x1a0)]=function(){const _0x413267=_0x29c7b3;VisuMZ['BattleCore']['Scene_Map_initializeAfter']['call'](this),BattleManager[_0x413267(0x9bf)]&&(this[_0x413267(0x383)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x9d5)]=Scene_Map[_0x29c7b3(0xc03)]['initialize'],Scene_Map[_0x29c7b3(0xc03)][_0x29c7b3(0x1a0)]=function(){const _0x4ba85c=_0x29c7b3;VisuMZ[_0x4ba85c(0x2e2)][_0x4ba85c(0x9d5)]['call'](this),$gameTemp[_0x4ba85c(0x746)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x799)]=Scene_ItemBase['prototype'][_0x29c7b3(0x1fb)],Scene_ItemBase[_0x29c7b3(0xc03)][_0x29c7b3(0x1fb)]=function(){const _0x552dd6=_0x29c7b3;VisuMZ[_0x552dd6(0x2e2)][_0x552dd6(0x799)]['call'](this);if(this['item']()[_0x552dd6(0x124)]['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x552dd6(0x7cc)]()['note'][_0x552dd6(0x290)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x552dd6(0x37f)]=[]),DataManager['checkAutoCustomActionSequenceNotetagEffect'](this[_0x552dd6(0x7cc)]())&&($gameTemp[_0x552dd6(0x37f)]=[]);},VisuMZ[_0x29c7b3(0x2e2)]['Scene_Options_maxCommands']=Scene_Options[_0x29c7b3(0xc03)][_0x29c7b3(0x6c8)],Scene_Options[_0x29c7b3(0xc03)]['maxCommands']=function(){const _0x5075fa=_0x29c7b3;let _0x29a2f1=VisuMZ[_0x5075fa(0x2e2)][_0x5075fa(0x97c)][_0x5075fa(0x8d6)](this);const _0x28a51a=VisuMZ['BattleCore']['Settings'];if(_0x28a51a['AutoBattle'][_0x5075fa(0xc1e)]&&_0x28a51a['AutoBattle'][_0x5075fa(0x431)])_0x29a2f1+=0x2;if(_0x28a51a[_0x5075fa(0x579)][_0x5075fa(0xc1e)]&&_0x28a51a[_0x5075fa(0x579)][_0x5075fa(0x431)])_0x29a2f1+=0x1;return _0x29a2f1;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x390)]=Scene_Battle['prototype'][_0x29c7b3(0x1a0)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x1a0)]=function(){const _0x1dbbb0=_0x29c7b3;VisuMZ[_0x1dbbb0(0x2e2)]['Scene_Battle_initialize'][_0x1dbbb0(0x8d6)](this),this[_0x1dbbb0(0x1d8)]();},VisuMZ['BattleCore']['Scene_Battle_start']=Scene_Battle[_0x29c7b3(0xc03)]['start'],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x284)]=function(){const _0x3dcd63=_0x29c7b3;SceneManager[_0x3dcd63(0xa84)]()?(Scene_Message[_0x3dcd63(0xc03)][_0x3dcd63(0x284)][_0x3dcd63(0x8d6)](this),this['_spriteset']&&this['_spriteset'][_0x3dcd63(0x592)](),BattleManager['_tpbSceneChangeCacheActor']&&BattleManager['revertTpbCachedActor']()):(VisuMZ[_0x3dcd63(0x2e2)]['Scene_Battle_start']['call'](this),$gameTroop[_0x3dcd63(0xbc6)]());},VisuMZ['BattleCore'][_0x29c7b3(0x78d)]=Scene_Battle['prototype'][_0x29c7b3(0x816)],Scene_Battle['prototype'][_0x29c7b3(0x816)]=function(){const _0x5dff65=_0x29c7b3;SceneManager[_0x5dff65(0xa26)]()?Scene_Message['prototype'][_0x5dff65(0x816)][_0x5dff65(0x8d6)](this):VisuMZ[_0x5dff65(0x2e2)][_0x5dff65(0x78d)][_0x5dff65(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)]['Scene_Battle_terminate']=Scene_Battle[_0x29c7b3(0xc03)]['terminate'],Scene_Battle['prototype'][_0x29c7b3(0x298)]=function(){const _0x58411e=_0x29c7b3;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x58411e(0xc03)]['terminate'][_0x58411e(0x8d6)](this):VisuMZ[_0x58411e(0x2e2)]['Scene_Battle_terminate'][_0x58411e(0x8d6)](this),$gameTemp['clearBattleBalloons'](),this[_0x58411e(0x1d8)]();},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x3da)]=function(){const _0x3e3d4f=_0x29c7b3;if(ConfigManager[_0x3e3d4f(0x74d)]&&ConfigManager[_0x3e3d4f(0xbe7)]!==undefined)return ConfigManager[_0x3e3d4f(0xbe7)];else{if(this[_0x3e3d4f(0x815)]()==='border')return![];else{return Scene_Message['prototype']['isRightInputMode'][_0x3e3d4f(0x8d6)](this);;}}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x1ca)]=Scene_Battle['prototype'][_0x29c7b3(0x52d)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x52d)]=function(){const _0x32c541=_0x29c7b3;VisuMZ[_0x32c541(0x2e2)][_0x32c541(0x1ca)][_0x32c541(0x8d6)](this),this[_0x32c541(0x815)]()==='border'&&this[_0x32c541(0x9d2)]();},Scene_Battle[_0x29c7b3(0xc03)]['setVisibleUI']=function(_0x5b85ee){const _0x2407b8=_0x29c7b3;_0x5b85ee?(this[_0x2407b8(0x723)]['x']=(Graphics[_0x2407b8(0x580)]-Graphics['boxWidth'])/0x2,this[_0x2407b8(0x723)]['y']=(Graphics['height']-Graphics['boxHeight'])/0x2):(this[_0x2407b8(0x723)]['x']=Graphics[_0x2407b8(0x580)]*0xa,this[_0x2407b8(0x723)]['y']=Graphics[_0x2407b8(0x719)]*0xa);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x4d7)]=Scene_Battle['prototype']['selectNextCommand'],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xbb0)]=function(){const _0x335acc=_0x29c7b3,_0x37cd71=BattleManager[_0x335acc(0xb4d)]();VisuMZ[_0x335acc(0x2e2)][_0x335acc(0x4d7)][_0x335acc(0x8d6)](this);if(_0x37cd71){if(_0x37cd71===BattleManager[_0x335acc(0xb4d)]())return;if(_0x37cd71===BattleManager[_0x335acc(0x215)])return;if(_0x37cd71[_0x335acc(0xa65)]())_0x37cd71[_0x335acc(0xa65)]()['stepBack']();}},VisuMZ['BattleCore'][_0x29c7b3(0x5f5)]=Scene_Battle['prototype'][_0x29c7b3(0x385)],Scene_Battle['prototype'][_0x29c7b3(0x385)]=function(){const _0xfbb66c=_0x29c7b3,_0x2300db=BattleManager['actor']();if(_0x2300db&&_0x2300db['battler'])_0x2300db[_0xfbb66c(0xa65)]()[_0xfbb66c(0x32b)]();VisuMZ[_0xfbb66c(0x2e2)][_0xfbb66c(0x5f5)]['call'](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc19)]=Scene_Battle['prototype']['createAllWindows'],Scene_Battle['prototype']['createAllWindows']=function(){const _0x14385d=_0x29c7b3;this[_0x14385d(0x121)](),VisuMZ[_0x14385d(0x2e2)][_0x14385d(0xc19)][_0x14385d(0x8d6)](this),this[_0x14385d(0x626)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x7e7)]=Scene_Battle['prototype'][_0x29c7b3(0x781)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x781)]=function(){const _0x3b2b87=_0x29c7b3;if(VisuMZ['BattleCore'][_0x3b2b87(0xc14)][_0x3b2b87(0x911)][_0x3b2b87(0x572)])return VisuMZ[_0x3b2b87(0x2e2)][_0x3b2b87(0xc14)][_0x3b2b87(0x911)][_0x3b2b87(0x572)][_0x3b2b87(0x8d6)](this);return VisuMZ[_0x3b2b87(0x2e2)][_0x3b2b87(0x7e7)][_0x3b2b87(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x54a)]=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xbee)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xbee)]=function(){const _0x15ebee=_0x29c7b3;VisuMZ[_0x15ebee(0x2e2)][_0x15ebee(0x54a)][_0x15ebee(0x8d6)](this),this[_0x15ebee(0xbe4)]();},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xbe4)]=function(){const _0x1c1aa8=_0x29c7b3,_0x2ad5da=this[_0x1c1aa8(0x7ac)];_0x2ad5da[_0x1c1aa8(0x333)](_0x1c1aa8(0x285),this[_0x1c1aa8(0xbf0)][_0x1c1aa8(0x86e)](this)),_0x2ad5da[_0x1c1aa8(0x333)]('options',this[_0x1c1aa8(0x7d7)][_0x1c1aa8(0x86e)](this));const _0x364fe4=this[_0x1c1aa8(0x815)]();switch(_0x364fe4){case'xp':case _0x1c1aa8(0xa7c):return this['_partyCommandWindow']['setBackgroundType'](0x1);break;}},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xbf0)]=function(){const _0x304688=_0x29c7b3;BattleManager['_autoBattle']=!![],$gameParty[_0x304688(0xa9c)](),this[_0x304688(0xbb0)](),BattleManager[_0x304688(0xb86)]()&&(BattleManager[_0x304688(0x595)]=![]);},Scene_Battle[_0x29c7b3(0xc03)]['commandOptions']=function(){const _0x1c1d43=_0x29c7b3;this['isQueueOptionsMenu']()?(this['_callSceneOptions']=!![],this['_logWindow'][_0x1c1d43(0x13a)]('addText',VisuMZ['BattleCore'][_0x1c1d43(0xc14)]['PartyCmd']['ActiveTpbOptionsMessage'])):this[_0x1c1d43(0x26f)]();},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x23a)]=function(){return BattleManager['isActiveTpb']();},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x26f)]=function(){const _0x3f9c4f=_0x29c7b3;this[_0x3f9c4f(0x7ba)]=![],this[_0x3f9c4f(0x690)][_0x3f9c4f(0x592)](),this[_0x3f9c4f(0x723)][_0x3f9c4f(0xb81)]=![];if(BattleManager['isBattleTest']())($dataSystem[_0x3f9c4f(0x67f)]||$dataSystem['battleback2Name'])&&SceneManager[_0x3f9c4f(0x6b3)]();else($gameMap['battleback1Name']()||$gameMap['battleback2Name']())&&SceneManager[_0x3f9c4f(0x6b3)]();SceneManager[_0x3f9c4f(0x13a)](Scene_Options),BattleManager[_0x3f9c4f(0xb86)]()&&(BattleManager[_0x3f9c4f(0x871)]=BattleManager['actor']());},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x47c)]=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x707)],Scene_Battle['prototype'][_0x29c7b3(0x707)]=function(){const _0x3e62a9=_0x29c7b3;VisuMZ['BattleCore']['Scene_Battle_updateBattleProcess']['call'](this);if(this[_0x3e62a9(0x7ba)]&&!BattleManager[_0x3e62a9(0x215)])this[_0x3e62a9(0x26f)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x300)]=Scene_Battle['prototype'][_0x29c7b3(0x592)],Scene_Battle['prototype'][_0x29c7b3(0x592)]=function(){const _0x37a2be=_0x29c7b3;VisuMZ['BattleCore'][_0x37a2be(0x300)][_0x37a2be(0x8d6)](this),this[_0x37a2be(0xbc3)]();},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x626)]=function(){const _0x532dae=_0x29c7b3,_0x5df84c=this[_0x532dae(0x369)]();this[_0x532dae(0x20c)]=new Window_AutoBattleCancel(_0x5df84c),this['_autoBattleWindow']['hide'](),this['addChild'](this['_autoBattleWindow']);},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x369)]=function(){const _0x5122d4=_0x29c7b3;return VisuMZ[_0x5122d4(0x2e2)][_0x5122d4(0xc14)][_0x5122d4(0x19e)]['AutoBattleRect']['call'](this);},Scene_Battle['prototype']['clearOnceParallelInterpreters']=function(){const _0x52e3b9=_0x29c7b3;this[_0x52e3b9(0x8c9)]=[];},Scene_Battle[_0x29c7b3(0xc03)]['updateOnceParallelInterpreters']=function(){const _0x1ff4cd=_0x29c7b3;if(!this[_0x1ff4cd(0x8c9)])return;for(const _0x32748f of this[_0x1ff4cd(0x8c9)]){_0x32748f&&_0x32748f[_0x1ff4cd(0x592)]();}},Scene_Battle['prototype'][_0x29c7b3(0xabf)]=function(_0x5bcc38){const _0x5ebe08=_0x29c7b3,_0x5bd916=$dataCommonEvents[_0x5bcc38];if(!_0x5bd916)return;const _0x5e4d76=new Game_BattleOnceParallelInterpreter();this[_0x5ebe08(0x5df)](_0x5e4d76),_0x5e4d76[_0x5ebe08(0x691)](_0x5bcc38);},Scene_Battle['prototype']['addOnceParallelInterpreter']=function(_0x14d48e){const _0xe17deb=_0x29c7b3;this[_0xe17deb(0x8c9)]=this[_0xe17deb(0x8c9)]||[],this[_0xe17deb(0x8c9)][_0xe17deb(0x13a)](_0x14d48e);},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xbf6)]=function(_0x9fb4b2){const _0x20f143=_0x29c7b3;this[_0x20f143(0x8c9)]=this[_0x20f143(0x8c9)]||[],this[_0x20f143(0x8c9)][_0x20f143(0x5e2)](_0x9fb4b2);},Game_Troop['prototype'][_0x29c7b3(0xbc6)]=function(){const _0x5bc84c=_0x29c7b3;for(const _0x27991d of this[_0x5bc84c(0x893)]()[_0x5bc84c(0x251)]){if(!this[_0x5bc84c(0xa59)](_0x27991d))continue;SceneManager[_0x5bc84c(0x364)]['playOnceParallelTroopPage'](_0x27991d);}},Game_Troop[_0x29c7b3(0xc03)][_0x29c7b3(0xa59)]=function(_0x4b2843){const _0x30f8e1=_0x29c7b3;if(!_0x4b2843)return;for(const _0x3a4ce7 of _0x4b2843[_0x30f8e1(0x72f)]){if([0x6c,0x198][_0x30f8e1(0xba2)](_0x3a4ce7['code'])){const _0x499f64=_0x3a4ce7[_0x30f8e1(0x5b3)][0x0];if(_0x499f64[_0x30f8e1(0x290)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x2d3)]=function(_0x392e5f){const _0x104386=_0x29c7b3;if(!_0x392e5f)return;const _0x592c87=new Game_BattleOnceParallelInterpreter();this[_0x104386(0x5df)](_0x592c87),_0x592c87[_0x104386(0x4e2)](_0x392e5f);};function Game_BattleOnceParallelInterpreter(){const _0x15d7e1=_0x29c7b3;this[_0x15d7e1(0x1a0)](...arguments);}Game_BattleOnceParallelInterpreter[_0x29c7b3(0xc03)]=Object[_0x29c7b3(0x57e)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter['prototype'][_0x29c7b3(0xba3)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x29c7b3(0xc03)][_0x29c7b3(0x691)]=function(_0x234bef){const _0x4bd14f=_0x29c7b3,_0x2ba272=$dataCommonEvents[_0x234bef];_0x2ba272?this[_0x4bd14f(0xb10)](_0x2ba272[_0x4bd14f(0x72f)],0x0):this[_0x4bd14f(0x298)]();},Game_BattleOnceParallelInterpreter[_0x29c7b3(0xc03)][_0x29c7b3(0x298)]=function(){const _0x5dc341=_0x29c7b3;if(!SceneManager[_0x5dc341(0x429)]())return;SceneManager['_scene'][_0x5dc341(0xbf6)](this),Game_Interpreter[_0x5dc341(0xc03)][_0x5dc341(0x298)][_0x5dc341(0x8d6)](this);},Game_BattleOnceParallelInterpreter[_0x29c7b3(0xc03)]['setTroopPage']=function(_0x4830df){const _0x199132=_0x29c7b3;_0x4830df?this[_0x199132(0xb10)](_0x4830df[_0x199132(0x72f)],0x0):this['terminate']();},Scene_Battle['prototype'][_0x29c7b3(0x37c)]=function(){const _0x2b5a6d=_0x29c7b3;return VisuMZ[_0x2b5a6d(0x2e2)][_0x2b5a6d(0xc14)]['PartyCmd'][_0x2b5a6d(0x2c0)];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x7e0)]=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x125)],Scene_Battle[_0x29c7b3(0xc03)]['startPartyCommandSelection']=function(){const _0x5083cb=_0x29c7b3;this[_0x5083cb(0x37c)]()?this['onDisabledPartyCommandSelection']():VisuMZ[_0x5083cb(0x2e2)]['Scene_Battle_startPartyCommandSelection']['call'](this);},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x8a7)]=function(){const _0x50ecc9=_0x29c7b3;if(BattleManager[_0x50ecc9(0x804)]())this['selectNextCommand']();else BattleManager[_0x50ecc9(0xb86)]()&&VisuMZ[_0x50ecc9(0x2e2)][_0x50ecc9(0x7e0)][_0x50ecc9(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x2b8)]=Scene_Battle[_0x29c7b3(0xc03)]['commandFight'],Scene_Battle['prototype'][_0x29c7b3(0x3f9)]=function(){const _0x976e88=_0x29c7b3;BattleManager[_0x976e88(0xb86)]()?(this[_0x976e88(0x1d5)](),this[_0x976e88(0x66f)]()):VisuMZ[_0x976e88(0x2e2)][_0x976e88(0x2b8)][_0x976e88(0x8d6)](this);},Scene_Battle[_0x29c7b3(0xc03)]['tpbCommandFight']=function(){const _0x24075e=_0x29c7b3;if(!VisuMZ[_0x24075e(0x2e2)][_0x24075e(0x718)])return;if(Imported[_0x24075e(0x75a)]&&BattleManager['isCTB']())return;const _0x3cf9f1=$gameParty[_0x24075e(0x89d)]()[_0x24075e(0x55e)](_0x5e5bb1=>_0x5e5bb1[_0x24075e(0x5a3)]()&&_0x5e5bb1[_0x24075e(0x7a9)]());BattleManager['_currentActor']=_0x3cf9f1[0x0]||null,BattleManager[_0x24075e(0x1d3)]&&BattleManager[_0x24075e(0x1d3)]['setActionState'](_0x24075e(0xa00));},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x7c1)]=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x862)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x862)]=function(){const _0x1f6b19=_0x29c7b3;VisuMZ[_0x1f6b19(0x2e2)][_0x1f6b19(0x7c1)][_0x1f6b19(0x8d6)](this);if(!BattleManager['isTpb']())BattleManager[_0x1f6b19(0x1d3)]=null;},VisuMZ['BattleCore'][_0x29c7b3(0xb32)]=Scene_Battle['prototype'][_0x29c7b3(0xb90)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xb90)]=function(){const _0x428569=_0x29c7b3;VisuMZ['BattleCore'][_0x428569(0xb32)]['call'](this),this[_0x428569(0xa52)]();},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xa52)]=function(){const _0x1a2bc4=_0x29c7b3,_0x5e6358=this['_actorCommandWindow'];_0x5e6358[_0x1a2bc4(0x333)]('escape',this[_0x1a2bc4(0x7e1)][_0x1a2bc4(0x86e)](this)),_0x5e6358['setHandler'](_0x1a2bc4(0x285),this[_0x1a2bc4(0x588)]['bind'](this)),_0x5e6358[_0x1a2bc4(0x333)]('singleSkill',this['actorCommandSingleSkill'][_0x1a2bc4(0x86e)](this)),BattleManager[_0x1a2bc4(0xb86)]()&&(this[_0x1a2bc4(0x37c)]()?delete _0x5e6358[_0x1a2bc4(0xc02)][_0x1a2bc4(0xbc1)]:_0x5e6358[_0x1a2bc4(0x333)](_0x1a2bc4(0xbc1),this['actorCommandCancelTPB'][_0x1a2bc4(0x86e)](this)));},Scene_Battle['prototype'][_0x29c7b3(0x7e1)]=function(){const _0xc5c235=_0x29c7b3;this[_0xc5c235(0x862)]();},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x588)]=function(){const _0x960557=_0x29c7b3;BattleManager['actor']()[_0x960557(0xab4)](),BattleManager[_0x960557(0x7c9)](),BattleManager[_0x960557(0x38b)](),this[_0x960557(0x6af)]();},Scene_Battle[_0x29c7b3(0xc03)]['actorCommandSingleSkill']=function(){const _0x327b08=_0x29c7b3,_0x5bb4f1=BattleManager[_0x327b08(0x83c)](),_0x13ce08=this[_0x327b08(0x68d)][_0x327b08(0xbfc)]();_0x5bb4f1[_0x327b08(0x4a7)](_0x13ce08),BattleManager[_0x327b08(0xb4d)]()[_0x327b08(0xa4d)]($dataSkills[_0x13ce08]),this[_0x327b08(0x3b0)]();},Scene_Battle['prototype'][_0x29c7b3(0x282)]=function(){const _0x3e99fc=_0x29c7b3;this[_0x3e99fc(0x87b)]()?this[_0x3e99fc(0x233)]():this[_0x3e99fc(0x30f)]();},VisuMZ[_0x29c7b3(0x2e2)]['TpbActiveChangeEnabled']=![],Scene_Battle[_0x29c7b3(0xc03)]['tpbActorSwitchConditionsMet']=function(){const _0x52fbf0=_0x29c7b3;if(Imported[_0x52fbf0(0x75a)]&&BattleManager[_0x52fbf0(0x34c)]())return![];else{if(!VisuMZ[_0x52fbf0(0x2e2)][_0x52fbf0(0x718)])return![];const _0x40da1c=$gameParty[_0x52fbf0(0x89d)]()[_0x52fbf0(0x55e)](_0x43f6bd=>_0x43f6bd[_0x52fbf0(0x5a3)]()&&_0x43f6bd[_0x52fbf0(0x7a9)]());return _0x40da1c[_0x52fbf0(0xba7)]>0x0&&BattleManager['actor']()!==_0x40da1c[_0x40da1c[_0x52fbf0(0xba7)]-0x1];}},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x233)]=function(){const _0x299a=_0x29c7b3,_0x33f4a1=BattleManager[_0x299a(0xb4d)](),_0x50d42d=_0x33f4a1[_0x299a(0xa65)]();if(_0x50d42d)_0x50d42d[_0x299a(0x32b)]();const _0x322bd5=$gameParty[_0x299a(0x89d)]()[_0x299a(0x55e)](_0x5a6b90=>_0x5a6b90[_0x299a(0x5a3)]()&&_0x5a6b90['canInput']()),_0x2484dd=_0x322bd5[_0x299a(0x617)](_0x33f4a1),_0x58091d=_0x322bd5[_0x2484dd+0x1];BattleManager['_currentActor']=_0x58091d||null;if(_0x58091d)_0x58091d[_0x299a(0x4cd)]('inputting');_0x33f4a1[_0x299a(0x4cd)](_0x299a(0x91e)),this[_0x299a(0x6af)]();},Scene_Battle[_0x29c7b3(0xc03)]['processActorCommandCancelTPB']=function(){const _0x1aeba9=_0x29c7b3;this[_0x1aeba9(0x7ac)]['setup'](),this[_0x1aeba9(0x68d)][_0x1aeba9(0x770)]();if(!VisuMZ[_0x1aeba9(0x2e2)]['TpbActiveChangeEnabled'])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x1aeba9(0x34c)]())return;if(BattleManager[_0x1aeba9(0x1d3)]){BattleManager[_0x1aeba9(0x1d3)][_0x1aeba9(0x4cd)](_0x1aeba9(0x91e));const _0x6805c=BattleManager[_0x1aeba9(0x1d3)]['battler']();if(_0x6805c)_0x6805c['stepBack']();}BattleManager[_0x1aeba9(0x1d3)]=null;},VisuMZ['BattleCore'][_0x29c7b3(0x63b)]=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x245)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x245)]=function(){const _0x22ad80=_0x29c7b3;VisuMZ[_0x22ad80(0x2e2)][_0x22ad80(0x63b)][_0x22ad80(0x8d6)](this),this[_0x22ad80(0xb8b)]();},Scene_Battle['prototype'][_0x29c7b3(0xb8b)]=function(){const _0x400d4=_0x29c7b3;this[_0x400d4(0x68d)][_0x400d4(0x7ee)](this['_helpWindow']),this[_0x400d4(0x7ac)]['setHelpWindow'](this[_0x400d4(0xb47)]);},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x121)]=function(){const _0x44c798=_0x29c7b3;if(!VisuMZ['BattleCore'][_0x44c798(0xc14)]['Enemy'][_0x44c798(0x638)])return;this['_enemyNameContainer']=new Sprite(),this[_0x44c798(0xb43)]['x']=this[_0x44c798(0x723)]['x'],this[_0x44c798(0xb43)]['y']=this['_windowLayer']['y'];const _0x3a79b7=this[_0x44c798(0x672)][_0x44c798(0x617)](this['_windowLayer']);this['addChildAt'](this['_enemyNameContainer'],_0x3a79b7);for(let _0x456c75=0x0;_0x456c75<0x8;_0x456c75++){const _0xd006dc=new Window_EnemyName(_0x456c75);this[_0x44c798(0xb43)]['addChild'](_0xd006dc);}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x9ec)]=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x54b)],Scene_Battle[_0x29c7b3(0xc03)]['createEnemyWindow']=function(){const _0x3bd6ed=_0x29c7b3;VisuMZ[_0x3bd6ed(0x2e2)]['Scene_Battle_createEnemyWindow']['call'](this),this[_0x3bd6ed(0x987)]();},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x987)]=function(){const _0x5bbcec=_0x29c7b3;this[_0x5bbcec(0x345)](!![]),this[_0x5bbcec(0x345)](![]);},Scene_Battle[_0x29c7b3(0xc03)]['multiTargetWindowRect']=function(_0x2fb55c){const _0x51db41=_0x29c7b3,_0x7a4c51=Window_BattleMultiTarget[_0x51db41(0x3a4)],_0xcb527d=this[_0x51db41(0x7cb)](0x1,!![]);let _0xfcb35a=_0x2fb55c?Graphics[_0x51db41(0xc0c)]-_0x7a4c51:0x0;_0xfcb35a+=_0x2fb55c?Window_BattleMultiTarget[_0x51db41(0x5ca)]:Window_BattleMultiTarget[_0x51db41(0xb2c)];const _0x485def=[_0x51db41(0x286)]['includes'](this[_0x51db41(0x815)]())?0x0:this[_0x51db41(0x92e)]['height'];let _0x28c2ba=Graphics[_0x51db41(0x132)]-_0x485def-_0xcb527d;return _0x28c2ba+=_0x2fb55c?Window_BattleMultiTarget[_0x51db41(0xa93)]:Window_BattleMultiTarget[_0x51db41(0x84f)],new Rectangle(_0xfcb35a,_0x28c2ba,_0x7a4c51,_0xcb527d);},Scene_Battle['prototype']['createMultiTargetWindow']=function(_0x1856e8){const _0x47792d=_0x29c7b3,_0x12b98c=this[_0x47792d(0xa2e)](_0x1856e8),_0x43717a=new Window_BattleMultiTarget(_0x12b98c,_0x1856e8);this[_0x47792d(0x822)](_0x43717a),_0x1856e8?this[_0x47792d(0x89f)]=_0x43717a:this[_0x47792d(0x69a)]=_0x43717a;},VisuMZ[_0x29c7b3(0x2e2)]['Scene_Battle_needsInputWindowChangeIBS']=Scene_Battle['prototype']['needsInputWindowChange'],Scene_Battle['prototype'][_0x29c7b3(0x72a)]=function(){const _0x20f5ce=_0x29c7b3;if(this[_0x20f5ce(0xbd5)])return![];return VisuMZ[_0x20f5ce(0x2e2)][_0x20f5ce(0x16f)][_0x20f5ce(0x8d6)](this);},VisuMZ['BattleCore'][_0x29c7b3(0x8f0)]=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x556)],Scene_Battle['prototype']['updateCancelButton']=function(){const _0x4bd163=_0x29c7b3;if(this[_0x4bd163(0x45c)]&&this[_0x4bd163(0xbd5)]){this[_0x4bd163(0x45c)][_0x4bd163(0xb81)]=!![];return;}VisuMZ[_0x4bd163(0x2e2)][_0x4bd163(0x8f0)]['call'](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xba4)]=Scene_Battle[_0x29c7b3(0xc03)]['isTimeActive'],Scene_Battle['prototype'][_0x29c7b3(0x9e6)]=function(){const _0x340573=_0x29c7b3;if(this[_0x340573(0xbd5)])return![];return VisuMZ[_0x340573(0x2e2)][_0x340573(0xba4)][_0x340573(0x8d6)](this);},VisuMZ['BattleCore'][_0x29c7b3(0xa75)]=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x3c6)],Scene_Battle[_0x29c7b3(0xc03)]['createAllWindows']=function(){const _0x2d58dd=_0x29c7b3;VisuMZ[_0x2d58dd(0x2e2)]['Scene_Battle_createAllWindowsIBS'][_0x2d58dd(0x8d6)](this),this['createInBattleStatusWindow']();},VisuMZ['BattleCore'][_0x29c7b3(0x27c)]=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xbee)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xbee)]=function(){const _0x3c810e=_0x29c7b3;VisuMZ['BattleCore']['Scene_Battle_createPartyCommandWindowIBS'][_0x3c810e(0x8d6)](this);const _0x4929dd=this['_partyCommandWindow'];_0x4929dd['setHandler'](_0x3c810e(0x7b7),this[_0x3c810e(0x562)][_0x3c810e(0x86e)](this,_0x4929dd));},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xb11)]=Scene_Battle['prototype'][_0x29c7b3(0xb90)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xb90)]=function(){const _0x27a448=_0x29c7b3;VisuMZ[_0x27a448(0x2e2)][_0x27a448(0xb11)][_0x27a448(0x8d6)](this);const _0x312c13=this[_0x27a448(0x68d)];_0x312c13['setHandler'](_0x27a448(0x7b7),this[_0x27a448(0x562)]['bind'](this,_0x312c13));},Scene_Battle['prototype']['createInBattleStatusWindow']=function(){const _0x31de7b=_0x29c7b3,_0x461774=this[_0x31de7b(0x7e5)](),_0x85d40=new Window_InBattleStatus(_0x461774);this[_0x31de7b(0x822)](_0x85d40),_0x85d40[_0x31de7b(0x459)](),_0x85d40[_0x31de7b(0x770)](),this[_0x31de7b(0x3d7)]=_0x85d40;},Scene_Battle['prototype'][_0x29c7b3(0x7e5)]=function(){const _0x297d25=_0x29c7b3;if(VisuMZ[_0x297d25(0x2e2)]['Settings'][_0x297d25(0x63c)][_0x297d25(0x55f)])return VisuMZ['BattleCore'][_0x297d25(0xc14)][_0x297d25(0x63c)][_0x297d25(0x55f)][_0x297d25(0x8d6)](this);const _0x120c1e=Graphics['boxWidth']>0x3e8?0x78:0x0,_0x13edb7=this[_0x297d25(0xb47)]['y']+this[_0x297d25(0xb47)][_0x297d25(0x719)],_0x11aafe=Graphics[_0x297d25(0xc0c)]-_0x120c1e*0x2,_0x3db062=Graphics[_0x297d25(0x132)]-_0x13edb7-this[_0x297d25(0xa36)]();return new Rectangle(_0x120c1e,_0x13edb7,_0x11aafe,_0x3db062);},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x562)]=function(_0x968058){const _0x35e019=_0x29c7b3;this[_0x35e019(0x822)](this[_0x35e019(0x3d7)]),this[_0x35e019(0xbd5)]=!![],this['_helpWindow'][_0x35e019(0xb6f)]();const _0x22c8c7=['xp',_0x35e019(0xa7c),_0x35e019(0x5d2),_0x35e019(0x93f),_0x35e019(0x286)];let _0x38129c=_0x22c8c7[_0x35e019(0xba2)](this[_0x35e019(0x815)]());_0x38129c&&(_0x968058[_0x35e019(0x459)](),_0x968058['close']()),this[_0x35e019(0x3d7)][_0x35e019(0xbdd)](BattleManager['actor']()||$gameParty[_0x35e019(0xaad)]()[0x0]),this[_0x35e019(0x3d7)]['setReturnWindow'](_0x968058),this[_0x35e019(0x3d7)][_0x35e019(0xb6f)](),this[_0x35e019(0x3d7)][_0x35e019(0x497)]();},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x9a7)]=function(){const _0x21fa60=_0x29c7b3;this[_0x21fa60(0xbd5)]=![],this['_helpWindow'][_0x21fa60(0x459)]();const _0x98b7d5=this['_inBattleStatusWindow'][_0x21fa60(0x308)]();_0x98b7d5['show'](),_0x98b7d5[_0x21fa60(0x497)](),_0x98b7d5[_0x21fa60(0x5ad)](),this['_inBattleStatusWindow']['hide'](),this[_0x21fa60(0x3d7)]['close']();},Scene_Battle[_0x29c7b3(0xc03)]['battleLayoutStyle']=function(){const _0x3bc162=_0x29c7b3;if($gameTemp['_forcedBattleLayout']!==undefined)return $gameTemp[_0x3bc162(0x46e)];if(this[_0x3bc162(0x199)])return this[_0x3bc162(0x199)];return this[_0x3bc162(0x199)]=VisuMZ[_0x3bc162(0x2e2)][_0x3bc162(0xc14)][_0x3bc162(0xaf9)][_0x3bc162(0x643)]['toLowerCase']()[_0x3bc162(0x89a)](),this[_0x3bc162(0x199)]==='sideview_ui'&&!Imported[_0x3bc162(0x2df)]&&(this[_0x3bc162(0x199)]='default'),this['_battleLayoutStyle']===_0x3bc162(0x286)&&!Imported[_0x3bc162(0x7b5)]&&(this[_0x3bc162(0x199)]=_0x3bc162(0x959)),this['_battleLayoutStyle'];},VisuMZ[_0x29c7b3(0x2e2)]['Scene_Battle_windowAreaHeight']=Scene_Battle['prototype'][_0x29c7b3(0xa36)],Scene_Battle['prototype']['windowAreaHeight']=function(){const _0x4867ed=_0x29c7b3,_0x4cf874=this['battleLayoutStyle']();switch(_0x4cf874){case _0x4867ed(0x72f):return this['calcWindowHeight'](Math[_0x4867ed(0xbaf)](0x1,$gameParty[_0x4867ed(0x33b)]()),!![]);break;case _0x4867ed(0x5d2):return this[_0x4867ed(0x7cb)](0x4,!![]);break;default:return VisuMZ['BattleCore']['Scene_Battle_windowAreaHeight'][_0x4867ed(0x8d6)](this);break;}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x646)]=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x3b8)],Scene_Battle['prototype'][_0x29c7b3(0x3b8)]=function(){const _0x2dca29=_0x29c7b3,_0x16a963=this[_0x2dca29(0x815)]();switch(_0x16a963){case _0x2dca29(0x5d2):return this['helpWindowRectBorderStyle']();break;case _0x2dca29(0x959):case _0x2dca29(0x72f):case'xp':case _0x2dca29(0xa7c):default:return VisuMZ[_0x2dca29(0x2e2)][_0x2dca29(0x646)][_0x2dca29(0x8d6)](this);break;}},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x775)]=function(){const _0x289187=_0x29c7b3,_0x273d35=this[_0x289187(0x815)]();switch(_0x273d35){case'xp':case _0x289187(0xa7c):return this[_0x289187(0x67d)]();break;case'border':return this['statusWindowRectBorderStyle']();break;case _0x289187(0x959):case'list':default:return this[_0x289187(0x77e)]();break;}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xa9b)]=Scene_Battle['prototype'][_0x29c7b3(0x958)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x958)]=function(){const _0x5577bd=_0x29c7b3,_0x1906bf=this[_0x5577bd(0x815)]();switch(_0x1906bf){case'xp':case _0x5577bd(0xa7c):return this['partyCommandWindowRectXPStyle']();break;case _0x5577bd(0x5d2):return this[_0x5577bd(0x83d)]();case _0x5577bd(0x959):case _0x5577bd(0x72f):default:return this[_0x5577bd(0x8b7)]();break;}},Scene_Battle[_0x29c7b3(0xc03)]['partyCommandWindowRectDefaultStyle']=function(){const _0x29ed56=_0x29c7b3,_0x12cc16=VisuMZ[_0x29ed56(0x2e2)][_0x29ed56(0xc14)][_0x29ed56(0xaf9)],_0x2d025c=_0x12cc16[_0x29ed56(0x14a)]||0xc0,_0x154a60=this[_0x29ed56(0xa36)](),_0x25ba49=this[_0x29ed56(0x3da)]()?Graphics[_0x29ed56(0xc0c)]-_0x2d025c:0x0,_0xe4a285=Graphics[_0x29ed56(0x132)]-_0x154a60;return new Rectangle(_0x25ba49,_0xe4a285,_0x2d025c,_0x154a60);},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x396)]=function(){return this['partyCommandWindowRect']();},VisuMZ['BattleCore']['Scene_Battle_updateStatusWindowPosition']=Scene_Battle['prototype'][_0x29c7b3(0x97b)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x97b)]=function(){const _0x5a4623=_0x29c7b3;if(this[_0x5a4623(0xbd5)])return;const _0x548779=this[_0x5a4623(0x815)]();switch(_0x548779){case'xp':case _0x5a4623(0xa7c):case'border':break;case _0x5a4623(0x959):case _0x5a4623(0x72f):default:VisuMZ[_0x5a4623(0x2e2)][_0x5a4623(0x318)][_0x5a4623(0x8d6)](this);break;}},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x77e)]=function(){const _0x994e92=_0x29c7b3,_0x16d3ee=VisuMZ[_0x994e92(0x2e2)][_0x994e92(0xc14)][_0x994e92(0xaf9)],_0x33d4a6=Window_BattleStatus[_0x994e92(0xc03)][_0x994e92(0x6e6)](),_0x5d3ade=Graphics[_0x994e92(0xc0c)]-(_0x16d3ee[_0x994e92(0x14a)]||0xc0),_0x21ab20=this[_0x994e92(0xa36)]()+_0x33d4a6,_0x596805=this[_0x994e92(0x3da)]()?0x0:Graphics[_0x994e92(0xc0c)]-_0x5d3ade,_0xea148=Graphics[_0x994e92(0x132)]-_0x21ab20+_0x33d4a6;return new Rectangle(_0x596805,_0xea148,_0x5d3ade,_0x21ab20);},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x67d)]=function(){const _0x3b28f4=_0x29c7b3,_0x3ca691=Window_BattleStatus[_0x3b28f4(0xc03)][_0x3b28f4(0x6e6)](),_0x9e0e26=Graphics[_0x3b28f4(0xc0c)],_0x173ceb=this['windowAreaHeight']()+_0x3ca691,_0x2855c3=0x0,_0x24d59=Graphics[_0x3b28f4(0x132)]-_0x173ceb+_0x3ca691;return new Rectangle(_0x2855c3,_0x24d59,_0x9e0e26,_0x173ceb);},Scene_Battle['prototype']['partyCommandWindowRectXPStyle']=function(){const _0x4d19b4=_0x29c7b3,_0x49d524=Graphics[_0x4d19b4(0xc0c)]/0x2,_0x34a913=this['calcWindowHeight'](VisuMZ[_0x4d19b4(0x2e2)]['Settings'][_0x4d19b4(0xaf9)][_0x4d19b4(0x6ec)],!![]),_0x4385a6=Math[_0x4d19b4(0x50f)]((Graphics[_0x4d19b4(0xc0c)]-_0x49d524)/0x2),_0x28a1ab=Graphics[_0x4d19b4(0x132)]-_0x34a913-this[_0x4d19b4(0x67d)]()[_0x4d19b4(0x719)];return new Rectangle(_0x4385a6,_0x28a1ab,_0x49d524,_0x34a913);},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xa33)]=function(){const _0x14cfd0=_0x29c7b3,_0x3ad79d=Graphics['width'],_0x31adac=Math[_0x14cfd0(0x50f)]((Graphics[_0x14cfd0(0xc0c)]-_0x3ad79d)/0x2),_0x2adafd=this['helpAreaHeight'](),_0x1084c8=(Graphics[_0x14cfd0(0x719)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x31adac,_0x1084c8,_0x3ad79d,_0x2adafd);},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x855)]=function(){const _0x33ff7c=_0x29c7b3,_0x30ee8d=Graphics[_0x33ff7c(0x580)],_0xb5d3f=Math[_0x33ff7c(0x50f)]((Graphics[_0x33ff7c(0xc0c)]-_0x30ee8d)/0x2),_0x41ebc5=this[_0x33ff7c(0x7cb)](0x4,!![]),_0x5872a1=Graphics[_0x33ff7c(0x132)]-_0x41ebc5+(Graphics[_0x33ff7c(0x719)]-Graphics[_0x33ff7c(0x132)])/0x2;return new Rectangle(_0xb5d3f,_0x5872a1,_0x30ee8d,_0x41ebc5);},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x83d)]=function(){const _0x264d9a=_0x29c7b3,_0x3909a6=Math[_0x264d9a(0x1ec)](Graphics['width']/0x3),_0x8d6449=this[_0x264d9a(0x3da)]()?(Graphics[_0x264d9a(0x580)]+Graphics[_0x264d9a(0xc0c)])/0x2-_0x3909a6:(Graphics['width']-Graphics['boxWidth'])/-0x2,_0x48858c=this['helpWindowRectBorderStyle'](),_0x59dd41=_0x48858c['y']+_0x48858c[_0x264d9a(0x719)],_0x129b08=this[_0x264d9a(0x855)](),_0x4de9c6=_0x129b08['y']-_0x59dd41;return new Rectangle(_0x8d6449,_0x59dd41,_0x3909a6,_0x4de9c6);},Scene_Battle['prototype']['skillItemWindowRectBorderStyle']=function(){const _0x550e44=_0x29c7b3,_0x313e87=Math[_0x550e44(0xc1a)](Graphics[_0x550e44(0x580)]/0x3),_0x222ae0=Math[_0x550e44(0x50f)]((Graphics[_0x550e44(0xc0c)]-_0x313e87)/0x2),_0x58887a=this[_0x550e44(0x83d)](),_0x1f0061=_0x58887a['y'],_0xe8f58a=_0x58887a['height'];return new Rectangle(_0x222ae0,_0x1f0061,_0x313e87,_0xe8f58a);},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x9d2)]=function(){const _0x1b8f94=_0x29c7b3;this[_0x1b8f94(0x45c)]['y']=this['_helpWindow']['y']+this[_0x1b8f94(0xb47)][_0x1b8f94(0x719)],this[_0x1b8f94(0x3da)]()?this['battleLayoutStyle']()===_0x1b8f94(0x5d2)?this[_0x1b8f94(0x45c)]['x']=0x8:this['_cancelButton']['x']=-this['_cancelButton']['width']-0x4:this[_0x1b8f94(0x45c)]['x']=Graphics[_0x1b8f94(0x580)]-(Graphics['width']-Graphics[_0x1b8f94(0xc0c)])/0x2-this[_0x1b8f94(0x45c)][_0x1b8f94(0x580)]-0x4;},VisuMZ['BattleCore']['Scene_Battle_skillWindowRect']=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x516)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x516)]=function(){const _0x494b27=_0x29c7b3;if(this['battleLayoutStyle']()==='border')return this[_0x494b27(0x3e6)]();else return this['isSkillItemWindowsMiddle']()?this['skillItemWindowRectMiddle']():VisuMZ[_0x494b27(0x2e2)]['Scene_Battle_skillWindowRect'][_0x494b27(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x807)]=Scene_Battle['prototype'][_0x29c7b3(0x62d)],Scene_Battle['prototype']['itemWindowRect']=function(){const _0x4ace13=_0x29c7b3;if(this[_0x4ace13(0x815)]()===_0x4ace13(0x5d2))return this[_0x4ace13(0x3e6)]();else return this[_0x4ace13(0x88d)]()?this[_0x4ace13(0x65c)]():VisuMZ[_0x4ace13(0x2e2)][_0x4ace13(0x807)][_0x4ace13(0x8d6)](this);},Scene_Battle[_0x29c7b3(0xc03)]['isSkillItemWindowsMiddle']=function(){const _0x149499=_0x29c7b3;return VisuMZ['BattleCore'][_0x149499(0xc14)][_0x149499(0xaf9)][_0x149499(0xb3a)];},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x65c)]=function(){const _0x5204a5=_0x29c7b3,_0x738836=Sprite_Button['prototype'][_0x5204a5(0x9f9)]()*0x2+0x4;let _0x3781b5=Graphics['boxWidth']-_0x738836;Imported[_0x5204a5(0x50c)]&&SceneManager[_0x5204a5(0x6d3)]()&&(_0x3781b5+=_0x738836);const _0x5c69f9=this[_0x5204a5(0x8ef)](),_0x613a5e=Graphics[_0x5204a5(0x132)]-_0x5c69f9-this[_0x5204a5(0x775)]()[_0x5204a5(0x719)]+Window_BattleStatus[_0x5204a5(0xc03)][_0x5204a5(0x6e6)](),_0x3651a9=0x0;return new Rectangle(_0x3651a9,_0x5c69f9,_0x3781b5,_0x613a5e);},VisuMZ[_0x29c7b3(0x2e2)]['Scene_Battle_startActorSelection']=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x3cb)],Scene_Battle['prototype'][_0x29c7b3(0x3cb)]=function(){const _0x12c7aa=_0x29c7b3;VisuMZ['BattleCore'][_0x12c7aa(0x7b1)][_0x12c7aa(0x8d6)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ['BattleCore'][_0x29c7b3(0x6f8)]=Scene_Battle['prototype'][_0x29c7b3(0xb01)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xb01)]=function(){const _0x556b06=_0x29c7b3;VisuMZ[_0x556b06(0x2e2)]['Scene_Battle_startEnemySelection']['call'](this),this[_0x556b06(0x174)][_0x556b06(0x87e)](),this[_0x556b06(0x250)]();},Scene_Battle['prototype'][_0x29c7b3(0x250)]=function(){const _0x1c6fe3=_0x29c7b3,_0x4634e6=this[_0x1c6fe3(0x815)]();['xp',_0x1c6fe3(0xa7c),_0x1c6fe3(0x5d2)][_0x1c6fe3(0xba2)](_0x4634e6)&&this[_0x1c6fe3(0x68d)]['close'](),(_0x4634e6===_0x1c6fe3(0x5d2)||this['isSkillItemWindowsMiddle']())&&(this['_skillWindow'][_0x1c6fe3(0x770)](),this['_itemWindow'][_0x1c6fe3(0x770)]());},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xb42)]=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x8de)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x8de)]=function(){const _0x484061=_0x29c7b3;VisuMZ[_0x484061(0x2e2)][_0x484061(0xb42)][_0x484061(0x8d6)](this),this[_0x484061(0x5bc)]();},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xa86)]=function(){const _0xcd1f95=_0x29c7b3;return[_0xcd1f95(0x1dc),_0xcd1f95(0x9b0),'singleSkill'][_0xcd1f95(0xba2)](this['_actorCommandWindow'][_0xcd1f95(0x802)]());},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x681)]=Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x44c)],Scene_Battle['prototype'][_0x29c7b3(0x44c)]=function(){const _0x365f4d=_0x29c7b3;this[_0x365f4d(0xa86)]()?(this[_0x365f4d(0x92e)]['show'](),this[_0x365f4d(0x389)][_0x365f4d(0x459)](),this[_0x365f4d(0x68d)][_0x365f4d(0x5ad)]()):VisuMZ['BattleCore'][_0x365f4d(0x681)]['call'](this),this[_0x365f4d(0x1b6)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x90e)]=Scene_Battle['prototype'][_0x29c7b3(0x8a8)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x8a8)]=function(){const _0x1a47cc=_0x29c7b3;if(!this[_0x1a47cc(0x174)][_0x1a47cc(0x662)]()){this[_0x1a47cc(0x174)]['activate']();return;}const _0x31ee0c=BattleManager[_0x1a47cc(0x83c)]();_0x31ee0c[_0x1a47cc(0x8cc)](this[_0x1a47cc(0x174)][_0x1a47cc(0x662)]()),this[_0x1a47cc(0x174)]['closeBattleActorWindow'](),VisuMZ['BattleCore'][_0x1a47cc(0x90e)][_0x1a47cc(0x8d6)](this),this[_0x1a47cc(0x5bc)]();},VisuMZ[_0x29c7b3(0x2e2)]['Scene_Battle_onEnemyCancel']=Scene_Battle['prototype'][_0x29c7b3(0x259)],Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x259)]=function(){const _0x434216=_0x29c7b3;this[_0x434216(0xa86)]()?(this['_statusWindow'][_0x434216(0xb6f)](),this[_0x434216(0x174)][_0x434216(0x459)](),this['_actorCommandWindow']['activate']()):VisuMZ[_0x434216(0x2e2)][_0x434216(0x75f)]['call'](this),this[_0x434216(0x1b6)](),this[_0x434216(0x174)][_0x434216(0xa3c)]();},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x5bc)]=function(){const _0x47e477=_0x29c7b3,_0x1e15cb=this[_0x47e477(0x815)]();(_0x1e15cb===_0x47e477(0x5d2)||this[_0x47e477(0x88d)]())&&(this['_skillWindow'][_0x47e477(0x497)](),this['_skillWindow'][_0x47e477(0x33d)]&&this[_0x47e477(0x7ab)]['show'](),this[_0x47e477(0x763)][_0x47e477(0x497)](),this['_itemWindow']['active']&&this['_itemWindow'][_0x47e477(0xb6f)]());},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x1b6)]=function(){const _0x133eb2=_0x29c7b3,_0x45eb40=this['battleLayoutStyle']();['xp',_0x133eb2(0xa7c),_0x133eb2(0x5d2)][_0x133eb2(0xba2)](_0x45eb40)&&this['_actorCommandWindow']['open'](),this[_0x133eb2(0x5bc)]();},Sprite_Battler[_0x29c7b3(0x9ae)]=VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)]['Actor'][_0x29c7b3(0x7ec)],VisuMZ[_0x29c7b3(0x2e2)]['Sprite_Battler_initMembers']=Sprite_Battler[_0x29c7b3(0xc03)]['initMembers'],Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x2e9)]=function(){const _0x36f437=_0x29c7b3;VisuMZ[_0x36f437(0x2e2)][_0x36f437(0x30a)]['call'](this),this[_0x36f437(0x162)]();if(this['constructor']===Sprite_Enemy)this['createShadowSprite']();this['createDistortionSprite']();},Sprite_Battler['prototype']['initMembersBattleCore']=function(){const _0x346782=_0x29c7b3;this[_0x346782(0xa3a)]=0x0,this[_0x346782(0x488)]=0x0,this['_floatHeight']=0x0,this['_targetFloatHeight']=0x0,this[_0x346782(0x2b4)]=0x0,this['_floatWholeDuration']=0x0,this[_0x346782(0xb44)]='Linear',this['_jumpHeight']=0x0,this[_0x346782(0xa8b)]=0x0,this[_0x346782(0x9b1)]=0x0,this[_0x346782(0x94e)]=0x0,this[_0x346782(0x288)]=0xff,this['_opacityDuration']=0x0,this[_0x346782(0x44e)]=0x0,this[_0x346782(0x9c1)]='Linear',this[_0x346782(0x6a3)]=0x0,this[_0x346782(0xb73)]=0x0,this[_0x346782(0x404)]=0x0,this[_0x346782(0x28b)]=0x0,this['_angleEasing']=_0x346782(0x2da),this[_0x346782(0xa20)]=!![],this[_0x346782(0xb79)]=0x0,this['_skewY']=0x0,this[_0x346782(0x542)]=0x0,this['_targetSkewY']=0x0,this[_0x346782(0x4b5)]=0x0,this[_0x346782(0x57c)]=0x0,this['_skewEasing']=_0x346782(0x2da),this[_0x346782(0x640)]=0x1,this[_0x346782(0x543)]=0x1,this['_targetGrowX']=0x1,this['_targetGrowY']=0x1,this['_growDuration']=0x0,this[_0x346782(0x872)]=0x0,this['_growEasing']=_0x346782(0x2da),this[_0x346782(0x840)]=0x1,this[_0x346782(0x512)]=0x0,this[_0x346782(0x730)]=0x0,this['_homeDuration']=0x0,this[_0x346782(0x6a5)]=0x0,this[_0x346782(0x3a8)]='Linear',this[_0x346782(0x172)]=0x0,this['_shakeFlinchPower']=0x0;},Sprite_Battler[_0x29c7b3(0xc03)]['createShadowSprite']=function(){const _0x4cc510=_0x29c7b3;this[_0x4cc510(0x6e9)]=new Sprite(),this[_0x4cc510(0x6e9)][_0x4cc510(0xc2a)]=ImageManager[_0x4cc510(0x16c)](_0x4cc510(0xb46)),this[_0x4cc510(0x6e9)][_0x4cc510(0xc2a)][_0x4cc510(0x207)]=VisuMZ['BattleCore'][_0x4cc510(0xc14)][_0x4cc510(0x953)][_0x4cc510(0x8a0)],this[_0x4cc510(0x6e9)][_0x4cc510(0x3f8)]['x']=0.5,this[_0x4cc510(0x6e9)][_0x4cc510(0x3f8)]['y']=0.5,this[_0x4cc510(0x6e9)]['y']=-0x2,this[_0x4cc510(0x6e9)][_0x4cc510(0xb81)]=![],this[_0x4cc510(0xa56)](this['_shadowSprite']);},Sprite_Battler[_0x29c7b3(0xc03)]['createDistortionSprite']=function(){const _0x351375=_0x29c7b3;this['_distortionSprite']=new Sprite(),this[_0x351375(0x1b9)]['anchor']['x']=0.5,this[_0x351375(0x1b9)][_0x351375(0x3f8)]['y']=0.5,this[_0x351375(0xa56)](this[_0x351375(0x1b9)]);},Sprite_Battler[_0x29c7b3(0xc03)]['_updateColorFilter']=function(){const _0x4b4cb5=_0x29c7b3;if(this[_0x4b4cb5(0x8d4)]&&this[_0x4b4cb5(0x8d4)]()){Sprite['prototype'][_0x4b4cb5(0x762)][_0x4b4cb5(0x8d6)](this);return;}const _0x221c76=this['_distortionSprite'];if(!_0x221c76)return;!_0x221c76[_0x4b4cb5(0x744)]&&_0x221c76['_createColorFilter'](),_0x221c76[_0x4b4cb5(0x744)]['setHue'](this['_hue']),_0x221c76[_0x4b4cb5(0x744)][_0x4b4cb5(0x918)](this[_0x4b4cb5(0x584)]),_0x221c76[_0x4b4cb5(0x744)][_0x4b4cb5(0x260)](this[_0x4b4cb5(0x660)]);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x295)]=function(){const _0x2bf7a9=_0x29c7b3;if(!this['_distortionSprite'])return;if(this[_0x2bf7a9(0x6e9)]){const _0x3b7f65=this[_0x2bf7a9(0x995)](this[_0x2bf7a9(0x1b9)]);this['addChildAt'](this[_0x2bf7a9(0x6e9)],_0x3b7f65),this[_0x2bf7a9(0xbb3)]();}this[_0x2bf7a9(0x6e0)]&&this[_0x2bf7a9(0x1b9)][_0x2bf7a9(0xa56)](this['_svBattlerSprite']),this[_0x2bf7a9(0x7ce)]&&this[_0x2bf7a9(0x1b9)][_0x2bf7a9(0xa56)](this[_0x2bf7a9(0x7ce)]),this[_0x2bf7a9(0x150)]&&this[_0x2bf7a9(0x1b9)][_0x2bf7a9(0xa56)](this[_0x2bf7a9(0x150)]),this['_injectAnimationSprite']&&this[_0x2bf7a9(0x1b9)][_0x2bf7a9(0xa56)](this['_injectAnimationSprite']),this[_0x2bf7a9(0x2c6)]&&this[_0x2bf7a9(0x1b9)][_0x2bf7a9(0xa56)](this[_0x2bf7a9(0x2c6)]);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xbb3)]=function(){const _0x44b47e=_0x29c7b3;if(!this[_0x44b47e(0x6e9)])return;if(this[_0x44b47e(0x3e8)]&&this[_0x44b47e(0x3e8)][_0x44b47e(0x15d)]()){const _0x480daf=this[_0x44b47e(0x6e9)][_0x44b47e(0xc2a)];this['_shadowSprite']['setFrame'](0x0,0x0,_0x480daf['width'],_0x480daf['height']);}else this[_0x44b47e(0x6e9)][_0x44b47e(0xa90)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x552)]=function(){const _0x260725=_0x29c7b3;return SceneManager[_0x260725(0x429)]()?SceneManager[_0x260725(0x364)][_0x260725(0x690)][_0x260725(0x3ff)]:this[_0x260725(0x813)];},Sprite_Battler[_0x29c7b3(0xc03)]['setupTextPopup']=function(_0x5e3699,_0x2ccdac){const _0x512629=_0x29c7b3;if(!this[_0x512629(0x3e8)][_0x512629(0xb17)]())return;if(BattleManager[_0x512629(0x440)]())return;const _0x171b9f=VisuMZ[_0x512629(0x2e2)][_0x512629(0xc14)][_0x512629(0x9c7)],_0x1efabc=new Sprite_Damage();_0x1efabc['_duration']=_0x171b9f['PopupDuration'],this[_0x512629(0x225)](_0x1efabc),_0x1efabc[_0x512629(0x612)](_0x5e3699,_0x2ccdac),this[_0x512629(0xb8e)](_0x1efabc);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x55a)]=function(_0x30e5aa,_0xf74797,_0x135786){const _0x346d22=_0x29c7b3;if(!this[_0x346d22(0x3e8)][_0x346d22(0xb17)]())return;if(BattleManager[_0x346d22(0x440)]())return;const _0x1c9ab2=VisuMZ['BattleCore'][_0x346d22(0xc14)][_0x346d22(0x9c7)],_0x2021bc=new Sprite_Damage();_0x2021bc[_0x346d22(0x5e3)]=_0x1c9ab2['PopupDuration'],this['sortDamageSprites'](_0x2021bc),_0x2021bc['setupIconTextPopup'](_0x30e5aa,_0xf74797,_0x135786),this[_0x346d22(0xb8e)](_0x2021bc);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xa71)]=function(){const _0x44ae9b=_0x29c7b3;if(!this['_battler'][_0x44ae9b(0x7d5)]())return;while(this[_0x44ae9b(0x3e8)][_0x44ae9b(0x7d5)]()){this[_0x44ae9b(0x3e8)]['isSpriteVisible']()&&this[_0x44ae9b(0xa4e)]();}this[_0x44ae9b(0x3e8)][_0x44ae9b(0xb83)](),this[_0x44ae9b(0x3e8)][_0x44ae9b(0xbe1)]();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xa4e)]=function(){const _0x274359=_0x29c7b3;if(BattleManager[_0x274359(0x440)]())return;const _0x39f592=VisuMZ[_0x274359(0x2e2)][_0x274359(0xc14)][_0x274359(0x9c7)],_0x366d56=new Sprite_Damage();_0x366d56[_0x274359(0x5e3)]=_0x39f592[_0x274359(0x5f7)],this['sortDamageSprites'](_0x366d56),_0x366d56['setup'](this['_battler']),_0x366d56[_0x274359(0x3b3)](this[_0x274359(0x3e8)]),this[_0x274359(0xb8e)](_0x366d56);},Sprite_Battler['prototype'][_0x29c7b3(0xb8e)]=function(_0x20d9b1){const _0x1f2c9b=_0x29c7b3;this[_0x1f2c9b(0x32e)][_0x1f2c9b(0x13a)](_0x20d9b1);if(this[_0x1f2c9b(0x143)]()){const _0x60a8d0=SceneManager['_scene'][_0x1f2c9b(0x92e)];if(_0x60a8d0)_0x60a8d0[_0x1f2c9b(0xb8e)](_0x20d9b1,this[_0x1f2c9b(0x3e8)]);}else{this['damageContainer']()[_0x1f2c9b(0xa56)](_0x20d9b1);if(SceneManager[_0x1f2c9b(0xa4a)]())_0x20d9b1[_0x1f2c9b(0xaa0)]['x']=-0x1;}},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x143)]=function(){const _0x7c9f7d=_0x29c7b3;return!$gameSystem[_0x7c9f7d(0x204)]()&&this[_0x7c9f7d(0x3e8)]&&this[_0x7c9f7d(0x3e8)][_0x7c9f7d(0xa27)]();return!$gameSystem[_0x7c9f7d(0x204)]()&&this['_battler']&&this['_battler'][_0x7c9f7d(0xa27)]()&&Window_BattleStatus[_0x7c9f7d(0xc03)][_0x7c9f7d(0x815)]()===_0x7c9f7d(0xa7c);},Sprite_Battler[_0x29c7b3(0xc03)]['sortDamageSprites']=function(_0x2def30){const _0x51df33=_0x29c7b3;this['alignBattleCoreDamageSprite'](_0x2def30,!![]);const _0x312f69=VisuMZ['BattleCore'][_0x51df33(0xc14)][_0x51df33(0x9c7)],_0x228476=SceneManager[_0x51df33(0xa4a)]()?-0x1:0x1;if(_0x312f69[_0x51df33(0x2ac)])for(const _0x4bf47f of this[_0x51df33(0x32e)]){_0x4bf47f['x']+=_0x312f69[_0x51df33(0x6b4)]*_0x228476,_0x4bf47f['y']+=_0x312f69[_0x51df33(0x20f)];}else{const _0x197148=this['_damages'][this[_0x51df33(0x32e)][_0x51df33(0xba7)]-0x1];_0x197148&&(_0x2def30['x']=_0x197148['x']+_0x312f69[_0x51df33(0x6b4)]*_0x228476,_0x2def30['y']=_0x197148['y']+_0x312f69[_0x51df33(0x20f)]);}},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xb9a)]=function(_0x57ad27,_0xc18f99){const _0x438659=_0x29c7b3,_0x4f6af6=SceneManager[_0x438659(0xa4a)]()?-0x1:0x1;let _0x1ead95=this[_0x438659(0xa3a)];_0x1ead95+=this[_0x438659(0xa89)]();let _0x18cb6d=this['_baseY'];const _0x3421a2=this[_0x438659(0x1b9)][_0x438659(0xaa0)]['y'];_0x18cb6d+=this[_0x438659(0x851)]();const _0x4285fb=SceneManager[_0x438659(0x364)][_0x438659(0x92e)];if(_0x4285fb&&this[_0x438659(0x813)]===_0x4285fb){_0x1ead95+=_0x4285fb['x']-this[_0x438659(0x9f1)]();const _0x1f97a9=_0x4285fb[_0x438659(0x956)]()*0x3/0x4;_0x18cb6d=_0x4285fb['y']+_0x1f97a9,_0x18cb6d=Math[_0x438659(0xbce)](_0x18cb6d,_0x4285fb['y']+this['y']-this[_0x438659(0x719)]+_0x1f97a9);}_0x57ad27['x']=Math[_0x438659(0x50f)](_0x1ead95+this['damageOffsetX']()*_0x4f6af6),_0x57ad27['y']=Math[_0x438659(0x50f)](_0x18cb6d+this['damageOffsetY']());},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x882)]=Sprite_Battler['prototype'][_0x29c7b3(0x9f1)],Sprite_Battler['prototype'][_0x29c7b3(0x9f1)]=function(){const _0x210571=_0x29c7b3;let _0x1c62ce=VisuMZ[_0x210571(0x2e2)][_0x210571(0x882)][_0x210571(0x8d6)](this),_0x59c76f=VisuMZ[_0x210571(0x2e2)]['Settings'][_0x210571(0x9c7)][_0x210571(0x12a)]||0x0;return _0x59c76f+=this['_battler'][_0x210571(0xaee)](),Math[_0x210571(0x50f)](_0x1c62ce+_0x59c76f);},VisuMZ['BattleCore'][_0x29c7b3(0x767)]=Sprite_Battler['prototype'][_0x29c7b3(0x325)],Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x325)]=function(){const _0x110afe=_0x29c7b3;let _0x372401=VisuMZ[_0x110afe(0x2e2)]['Sprite_Battler_damageOffsetY'][_0x110afe(0x8d6)](this);switch(this[_0x110afe(0x3e8)][_0x110afe(0x5ea)]()){case _0x110afe(0x764):_0x372401-=this[_0x110afe(0x719)]*this['scale']['y'];break;case _0x110afe(0x5cb):_0x372401-=this[_0x110afe(0x719)]*this[_0x110afe(0xaa0)]['y']*0.5;break;}let _0x4178f6=VisuMZ['BattleCore'][_0x110afe(0xc14)][_0x110afe(0x9c7)][_0x110afe(0xbe6)]||0x0;return _0x4178f6+=this['_battler'][_0x110afe(0xa94)](),Math['round'](_0x372401+_0x4178f6);},Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x9f1)]=function(){const _0x45bcca=_0x29c7b3;return Sprite_Battler['prototype'][_0x45bcca(0x9f1)][_0x45bcca(0x8d6)](this);},Sprite_Actor['prototype']['damageOffsetY']=function(){const _0x1edba7=_0x29c7b3;return Sprite_Battler['prototype']['damageOffsetY'][_0x1edba7(0x8d6)](this);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x7ef)]=function(_0x35cc7b){const _0x55f434=_0x29c7b3;this[_0x55f434(0x143)]()?SceneManager[_0x55f434(0x364)]['_statusWindow'][_0x55f434(0xbbb)](_0x35cc7b):(this['damageContainer']()[_0x55f434(0xbdc)](_0x35cc7b),this[_0x55f434(0x32e)][_0x55f434(0x5e2)](_0x35cc7b),_0x35cc7b['destroy']());},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x8b8)]=Sprite_Battler[_0x29c7b3(0xc03)]['setHome'],Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x4ff)]=function(_0x72c716,_0x1af954){const _0x1949b7=_0x29c7b3,_0x31f9b5=VisuMZ[_0x1949b7(0x2e2)][_0x1949b7(0xc14)];if(this[_0x1949b7(0xba3)]===Sprite_Actor)_0x72c716+=_0x31f9b5['Actor'][_0x1949b7(0x970)]||0x0,_0x1af954+=_0x31f9b5['Actor'][_0x1949b7(0x921)]||0x0;else this[_0x1949b7(0xba3)]===Sprite_Enemy&&(_0x72c716+=_0x31f9b5[_0x1949b7(0xac6)][_0x1949b7(0x970)]||0x0,_0x1af954+=_0x31f9b5[_0x1949b7(0xac6)][_0x1949b7(0x921)]||0x0);this[_0x1949b7(0x3e8)]&&(_0x72c716=this[_0x1949b7(0x3e8)][_0x1949b7(0x6ed)]??_0x72c716,_0x1af954=this['_battler']['_forcedHomeY']??_0x1af954),VisuMZ[_0x1949b7(0x2e2)][_0x1949b7(0x8b8)][_0x1949b7(0x8d6)](this,_0x72c716,_0x1af954),this['_targetHomeX']=this[_0x1949b7(0x755)],this[_0x1949b7(0x730)]=this[_0x1949b7(0x76e)],this[_0x1949b7(0x9ba)]=0x0,this['_homeWholeDuration']=0x0,this[_0x1949b7(0x3a8)]=_0x1949b7(0x2da);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x1ef)]=Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x592)],Sprite_Battler[_0x29c7b3(0xc03)]['update']=function(){const _0x1fd7be=_0x29c7b3;VisuMZ[_0x1fd7be(0x2e2)][_0x1fd7be(0x1ef)]['call'](this),!this['_battler']&&this[_0x1fd7be(0x79e)]&&(this['_hpGaugeSprite'][_0x1fd7be(0xb81)]=![]);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xacb)]=Sprite_Battler[_0x29c7b3(0xc03)]['updateMain'],Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x3bc)]=function(){const _0x51acf5=_0x29c7b3;this[_0x51acf5(0xb4c)](),this[_0x51acf5(0x4e6)](),this[_0x51acf5(0x7bf)](),this['updateFlip'](),VisuMZ[_0x51acf5(0x2e2)]['Sprite_Battler_updateMain']['call'](this),this[_0x51acf5(0xa83)](),this[_0x51acf5(0x7ea)]();if(this[_0x51acf5(0xba3)]===Sprite_Enemy)this[_0x51acf5(0x704)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x39a)]=Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x975)],Sprite_Battler[_0x29c7b3(0xc03)]['updatePosition']=function(){const _0x26dc89=_0x29c7b3;this['updateHomeMove'](),VisuMZ['BattleCore'][_0x26dc89(0x39a)][_0x26dc89(0x8d6)](this),this[_0x26dc89(0x86d)](),this[_0x26dc89(0x2bc)]();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x933)]=function(){const _0x4e53a7=_0x29c7b3,_0x3a2a0c=this[_0x4e53a7(0x48d)]();if(this[_0x4e53a7(0x3e8)][_0x4e53a7(0xa5a)]())this[_0x4e53a7(0x960)]++,Graphics[_0x4e53a7(0x795)]%0x1e<0xf?_0x3a2a0c['setBlendColor']([0xff,0xff,0xff,0x40]):_0x3a2a0c[_0x4e53a7(0x918)]([0x0,0x0,0x0,0x0]);else this[_0x4e53a7(0x960)]>0x0&&(this[_0x4e53a7(0x960)]=0x0,_0x3a2a0c[_0x4e53a7(0x918)]([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x29c7b3(0xc03)]['silentHomeMove']=function(_0x506539,_0x2acb2d){const _0x473f77=_0x29c7b3,_0x449734=VisuMZ['BattleCore'][_0x473f77(0xc14)];if(this[_0x473f77(0xba3)]===Sprite_Actor)_0x506539+=_0x449734[_0x473f77(0x953)]['OffsetX']||0x0,_0x2acb2d+=_0x449734['Actor']['OffsetY']||0x0;else this[_0x473f77(0xba3)]===Sprite_Enemy&&(_0x506539+=_0x449734['Enemy'][_0x473f77(0x970)]||0x0,_0x2acb2d+=_0x449734[_0x473f77(0xac6)]['OffsetY']||0x0);const _0x3c9509=_0x506539-this['_homeX'],_0x1b8db3=_0x2acb2d-this[_0x473f77(0x76e)];this[_0x473f77(0x755)]=_0x506539,this['_homeY']=_0x2acb2d,this['_offsetX']-=_0x3c9509,this[_0x473f77(0x627)]-=_0x1b8db3,this[_0x473f77(0xa2b)]-=_0x3c9509,this['_targetOffsetY']-=_0x1b8db3,this['updatePosition']();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x886)]=function(_0x4b3bf0,_0x3a6ecd,_0x4326bb,_0x49c3d0){const _0x1c166b=_0x29c7b3,_0x464fbe=VisuMZ['BattleCore'][_0x1c166b(0xc14)];if(this['constructor']===Sprite_Actor)_0x4b3bf0+=_0x464fbe[_0x1c166b(0x953)][_0x1c166b(0x970)]||0x0,_0x3a6ecd+=_0x464fbe[_0x1c166b(0x953)]['OffsetY']||0x0;else this[_0x1c166b(0xba3)]===Sprite_Enemy&&(_0x4b3bf0+=_0x464fbe[_0x1c166b(0xac6)][_0x1c166b(0x970)]||0x0,_0x3a6ecd+=_0x464fbe[_0x1c166b(0xac6)]['OffsetY']||0x0);(this[_0x1c166b(0x512)]!==_0x4b3bf0||this[_0x1c166b(0x730)]!==_0x3a6ecd)&&(this['_targetHomeX']=_0x4b3bf0,this[_0x1c166b(0x730)]=_0x3a6ecd,this[_0x1c166b(0x9ba)]=_0x4326bb,this[_0x1c166b(0x6a5)]=_0x4326bb,this[_0x1c166b(0x3a8)]=_0x49c3d0,_0x4326bb<=0x0&&this[_0x1c166b(0x5ff)]());},Sprite_Battler[_0x29c7b3(0xc03)]['updateHomeMove']=function(){const _0x4cd78e=_0x29c7b3;if(this['_homeDuration']<=0x0)return;const _0x44f41d=this[_0x4cd78e(0x9ba)],_0x8de5c5=this[_0x4cd78e(0x6a5)],_0x134ebb=this[_0x4cd78e(0x3a8)];Imported['VisuMZ_0_CoreEngine']?(this[_0x4cd78e(0x755)]=this[_0x4cd78e(0x9a5)](this[_0x4cd78e(0x755)],this['_targetHomeX'],_0x44f41d,_0x8de5c5,_0x134ebb),this[_0x4cd78e(0x76e)]=this[_0x4cd78e(0x9a5)](this[_0x4cd78e(0x76e)],this[_0x4cd78e(0x730)],_0x44f41d,_0x8de5c5,_0x134ebb)):(this[_0x4cd78e(0x755)]=(this[_0x4cd78e(0x755)]*(_0x44f41d-0x1)+this['_targetHomeX'])/_0x44f41d,this['_homeY']=(this[_0x4cd78e(0x76e)]*(_0x44f41d-0x1)+this[_0x4cd78e(0x730)])/_0x44f41d);this['_homeDuration']--;if(this[_0x4cd78e(0x9ba)]<=0x0)this[_0x4cd78e(0x5ff)]();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x5ff)]=function(){const _0x2260d8=_0x29c7b3;this[_0x2260d8(0x755)]=this['_targetHomeX'],this[_0x2260d8(0x76e)]=this[_0x2260d8(0x730)];},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x86d)]=function(){const _0x161133=_0x29c7b3;this[_0x161133(0xa3a)]=this['x'],this['_baseY']=this['y'],this[_0x161133(0x974)](),this[_0x161133(0xae8)](),this['x']+=this[_0x161133(0xa89)](),this['y']+=this[_0x161133(0x851)](),this['y']+=this[_0x161133(0x6fa)](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x161133(0x1ec)](this['y']);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xa89)]=function(){let _0x21850b=0x0;return _0x21850b;},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x851)]=function(){const _0x2d188d=_0x29c7b3;let _0xfb4129=0x0;return this[_0x2d188d(0x3e8)]&&!this[_0x2d188d(0x3e8)]['isBattlerGrounded']()&&(_0xfb4129-=this[_0x2d188d(0x304)],_0xfb4129-=this[_0x2d188d(0x938)]),_0xfb4129;},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x6fa)]=function(){const _0x180eb5=_0x29c7b3;let _0xf7d44e=0x0;if(this[_0x180eb5(0x1b9)]&&this['constructor']!==Sprite_SvEnemy){const _0x219034=this[_0x180eb5(0x1b9)]['scale']['y'];_0xf7d44e-=(_0x219034-0x1)*this[_0x180eb5(0x719)];}return _0xf7d44e;},Sprite_Battler[_0x29c7b3(0xc03)]['updateFlip']=function(){const _0x24905d=_0x29c7b3,_0x300d6f=this[_0x24905d(0x3e8)]&&this[_0x24905d(0x3e8)][_0x24905d(0x2f3)]();this[_0x24905d(0x840)]=(_0x300d6f?-0x1:0x1)*Math[_0x24905d(0x355)](this[_0x24905d(0xaa0)]['x']);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x40c)]=function(_0x4fa88f,_0x30cdba,_0x46180d){const _0x17a9ce=_0x29c7b3;if(!this['canMove']())return;if(this['_targetFloatHeight']===_0x4fa88f)return;this['_targetFloatHeight']=_0x4fa88f,this[_0x17a9ce(0x2b4)]=_0x30cdba,this[_0x17a9ce(0x9ac)]=_0x30cdba,this['_floatEasing']=_0x46180d||'Linear';if(_0x30cdba<=0x0)this[_0x17a9ce(0x304)]=_0x4fa88f;},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x974)]=function(){const _0x283dd3=_0x29c7b3;if(this['_floatDuration']<=0x0)return;const _0x36dce0=this['_floatDuration'],_0xe03712=this['_floatWholeDuration'],_0x4c1e18=this[_0x283dd3(0xb44)];Imported[_0x283dd3(0x50c)]?this[_0x283dd3(0x304)]=this[_0x283dd3(0x9a5)](this[_0x283dd3(0x304)],this[_0x283dd3(0x732)],_0x36dce0,_0xe03712,_0x4c1e18):this[_0x283dd3(0x304)]=(this[_0x283dd3(0x304)]*(_0x36dce0-0x1)+this[_0x283dd3(0x732)])/_0x36dce0;this[_0x283dd3(0x2b4)]--;if(this[_0x283dd3(0x2b4)]<=0x0)this[_0x283dd3(0xc01)]();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xc01)]=function(){const _0x2ea173=_0x29c7b3;this[_0x2ea173(0x304)]=this[_0x2ea173(0x732)];},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x25a)]=function(){const _0x2cb9fc=_0x29c7b3;return this[_0x2cb9fc(0x2b4)]>0x0;},Sprite_Battler[_0x29c7b3(0xc03)]['startJump']=function(_0x2eeb69,_0x3e8244){const _0x4180ae=_0x29c7b3;if(!this['canMove']())return;if(_0x3e8244<=0x0)return;this[_0x4180ae(0xa8b)]=_0x2eeb69,this['_jumpDuration']=_0x3e8244,this[_0x4180ae(0x94e)]=_0x3e8244;},Sprite_Battler['prototype'][_0x29c7b3(0xae8)]=function(){const _0x39f4df=_0x29c7b3;if(this['_jumpDuration']<=0x0)return;const _0x3f6bb3=this['_jumpWholeDuration']-this[_0x39f4df(0x9b1)],_0x497c33=this['_jumpWholeDuration']/0x2,_0x2c7b5d=this[_0x39f4df(0xa8b)],_0x279be4=-_0x2c7b5d/Math[_0x39f4df(0x6e1)](_0x497c33,0x2);this['_jumpHeight']=_0x279be4*Math[_0x39f4df(0x6e1)](_0x3f6bb3-_0x497c33,0x2)+_0x2c7b5d,this[_0x39f4df(0x9b1)]--;if(this[_0x39f4df(0x9b1)]<=0x0)return this[_0x39f4df(0x280)]();},Sprite_Battler[_0x29c7b3(0xc03)]['onJumpEnd']=function(){const _0xb629c8=_0x29c7b3;this[_0xb629c8(0x938)]=0x0;},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x6f3)]=function(){return this['_jumpDuration']>0x0;},Sprite_Battler['prototype']['startOpacity']=function(_0x193416,_0x2c261f,_0x1a6fa3){const _0x19095f=_0x29c7b3;if(this['_targetOpacity']===_0x193416)return;this['_targetOpacity']=_0x193416,this[_0x19095f(0xbd1)]=_0x2c261f,this[_0x19095f(0x44e)]=_0x2c261f,this['_opacityEasing']=_0x1a6fa3||_0x19095f(0x2da);if(_0x2c261f<=0x0)this[_0x19095f(0x81b)]=_0x193416;},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x2bc)]=function(){const _0x1571e5=_0x29c7b3;if(this[_0x1571e5(0xba3)]['name']===_0x1571e5(0x971))return;if(this[_0x1571e5(0xbd1)]<=0x0)return;const _0x301408=this[_0x1571e5(0xbd1)],_0x577267=this['_opacityWholeDuration'],_0x522fcc=this[_0x1571e5(0x9c1)];Imported[_0x1571e5(0x50c)]?this[_0x1571e5(0x81b)]=this[_0x1571e5(0x9a5)](this[_0x1571e5(0x81b)],this[_0x1571e5(0x288)],_0x301408,_0x577267,_0x522fcc):this['opacity']=(this[_0x1571e5(0x81b)]*(_0x301408-0x1)+this[_0x1571e5(0x288)])/_0x301408;this[_0x1571e5(0xbd1)]--;if(this['_opacityDuration']<=0x0)this['onOpacityEnd']();},Sprite_Battler['prototype']['onOpacityEnd']=function(){const _0x4976c6=_0x29c7b3;this[_0x4976c6(0x81b)]=this[_0x4976c6(0x288)];},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xb5d)]=function(){return this['_opacityDuration']>0x0;},Sprite_Battler['prototype'][_0x29c7b3(0x704)]=function(){const _0xf036f2=_0x29c7b3;this['_shadowSprite'][_0xf036f2(0xb81)]=this['_battler'][_0xf036f2(0x20b)](),this['updateShadowPosition']();},Sprite_Battler[_0x29c7b3(0xc03)]['updateShadowPosition']=function(){const _0x183909=_0x29c7b3;if(!this[_0x183909(0x6e9)])return;this['_shadowSprite']['y']=this[_0x183909(0x488)]-this['y']-0x2;},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x303)]=function(){const _0x5e26e5=_0x29c7b3;if(!this[_0x5e26e5(0x3e8)])return;this['_shadowScaleX']=this[_0x5e26e5(0x3e8)]['battlerShadowScaleX'](),this[_0x5e26e5(0x141)]=this[_0x5e26e5(0x3e8)][_0x5e26e5(0xb72)]();},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0xb45)]=function(){const _0x4fd1c3=_0x29c7b3,_0x3d7ead=this[_0x4fd1c3(0xa27)]()?this[_0x4fd1c3(0xb4d)]():this[_0x4fd1c3(0x662)]();if(_0x3d7ead){const _0x59dc63=_0x3d7ead['note'];if(_0x59dc63[_0x4fd1c3(0x290)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x59dc63[_0x4fd1c3(0x290)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x29c7b3(0xc03)]['battlerShadowScaleY']=function(){const _0x555437=_0x29c7b3,_0xd9b731=this[_0x555437(0xa27)]()?this[_0x555437(0xb4d)]():this[_0x555437(0x662)]();if(_0xd9b731){const _0x1a0d44=_0xd9b731['note'];if(_0x1a0d44[_0x555437(0x290)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x1a0d44[_0x555437(0x290)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xb4c)]=function(){const _0x264d2d=_0x29c7b3;if(this[_0x264d2d(0xba3)]===Sprite_SvEnemy)return;this[_0x264d2d(0x576)](),this['finalizeScale']();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x1af)]=function(){const _0x2f0839=_0x29c7b3,_0x221e5c=this['_distortionSprite'];_0x221e5c&&(_0x221e5c[_0x2f0839(0xaa0)]['x']=this[_0x2f0839(0x2c8)](),_0x221e5c[_0x2f0839(0xaa0)]['y']=this[_0x2f0839(0x101)]());},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x2c8)]=function(){const _0x10497c=_0x29c7b3;let _0x3fd795=0x1;return _0x3fd795*=this[_0x10497c(0x840)],_0x3fd795*=this[_0x10497c(0x640)],_0x3fd795;},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x101)]=function(){return 0x1*this['_growY'];},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xa7b)]=function(){return this['width']*this['mainSpriteScaleX']();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xc2e)]=function(){const _0x26fe05=_0x29c7b3;return this[_0x26fe05(0x719)]*this[_0x26fe05(0x101)]();},Sprite_Battler[_0x29c7b3(0xc03)]['startGrow']=function(_0x58da06,_0x36fba0,_0x3edb1e,_0x3fd988){const _0x342279=_0x29c7b3;if(!this[_0x342279(0xa25)]())return;if(!this[_0x342279(0x1b9)])return;if(this['_targetGrowX']===_0x58da06&&this[_0x342279(0x399)]===_0x36fba0)return;this[_0x342279(0xb7a)]=_0x58da06,this[_0x342279(0x399)]=_0x36fba0,this[_0x342279(0x676)]=_0x3edb1e,this[_0x342279(0x872)]=_0x3edb1e,this[_0x342279(0x366)]=_0x3fd988||_0x342279(0x2da),_0x3edb1e<=0x0&&(this['_growX']=this[_0x342279(0xb7a)],this['_growY']=this['_targetGrowY']);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x576)]=function(){const _0x47e156=_0x29c7b3;if(this['_growDuration']<=0x0)return;if(!this[_0x47e156(0x1b9)])return;const _0x2bdf80=this['_growDuration'],_0x100a8d=this['_growWholeDuration'],_0x3afddd=this['_growEasing'];Imported[_0x47e156(0x50c)]?(this[_0x47e156(0x640)]=this[_0x47e156(0x9a5)](this[_0x47e156(0x640)],this[_0x47e156(0xb7a)],_0x2bdf80,_0x100a8d,_0x3afddd),this[_0x47e156(0x543)]=this['applyEasing'](this[_0x47e156(0x543)],this['_targetGrowY'],_0x2bdf80,_0x100a8d,_0x3afddd)):(this[_0x47e156(0x640)]=(this[_0x47e156(0x640)]*(_0x2bdf80-0x1)+this['_targetGrowX'])/_0x2bdf80,this[_0x47e156(0x543)]=(this[_0x47e156(0x543)]*(_0x2bdf80-0x1)+this[_0x47e156(0x399)])/_0x2bdf80);this[_0x47e156(0x676)]--;if(this[_0x47e156(0x676)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x96d)]=function(){const _0xb45414=_0x29c7b3;this[_0xb45414(0x640)]=this[_0xb45414(0xb7a)],this[_0xb45414(0x543)]=this['_targetGrowY'];},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x996)]=function(){const _0x14ecea=_0x29c7b3;return this[_0x14ecea(0x676)]>0x0;},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x86f)]=function(_0x5adcaf,_0x55108f,_0x11e397,_0x338329){const _0x24ac07=_0x29c7b3;if(!this[_0x24ac07(0xa25)]())return;if(!this[_0x24ac07(0x1b9)])return;if(this['_targetSkewX']===_0x5adcaf&&this[_0x24ac07(0x29d)]===_0x55108f)return;this[_0x24ac07(0x542)]=_0x5adcaf,this[_0x24ac07(0x29d)]=_0x55108f,this['_skewDuration']=_0x11e397,this['_skewWholeDuration']=_0x11e397,this[_0x24ac07(0x991)]=_0x338329||_0x24ac07(0x2da),_0x11e397<=0x0&&(this[_0x24ac07(0x1b9)][_0x24ac07(0x91f)]['x']=this['_targetSkewX'],this[_0x24ac07(0x1b9)][_0x24ac07(0x91f)]['y']=this[_0x24ac07(0x29d)]);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x4e6)]=function(){const _0x4b6c75=_0x29c7b3;if(this[_0x4b6c75(0x4b5)]<=0x0)return;if(!this[_0x4b6c75(0x1b9)])return;const _0x32f628=this[_0x4b6c75(0x4b5)],_0xa84274=this[_0x4b6c75(0x57c)],_0x240040=this['_skewEasing'],_0x1aaa37=this[_0x4b6c75(0x1b9)];Imported[_0x4b6c75(0x50c)]?(_0x1aaa37[_0x4b6c75(0x91f)]['x']=this['applyEasing'](_0x1aaa37['skew']['x'],this['_targetSkewX'],_0x32f628,_0xa84274,_0x240040),_0x1aaa37[_0x4b6c75(0x91f)]['y']=this['applyEasing'](_0x1aaa37['skew']['y'],this['_targetSkewY'],_0x32f628,_0xa84274,_0x240040)):(_0x1aaa37['skew']['x']=(_0x1aaa37[_0x4b6c75(0x91f)]['x']*(_0x32f628-0x1)+this[_0x4b6c75(0x542)])/_0x32f628,_0x1aaa37['skew']['y']=(_0x1aaa37[_0x4b6c75(0x91f)]['y']*(_0x32f628-0x1)+this['_targetSkewY'])/_0x32f628);this['_skewDuration']--;if(this[_0x4b6c75(0x4b5)]<=0x0)this[_0x4b6c75(0x13b)]();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x13b)]=function(){const _0x2a67cc=_0x29c7b3;this[_0x2a67cc(0x1b9)]['skew']['x']=this[_0x2a67cc(0x542)],this[_0x2a67cc(0x1b9)]['skew']['y']=this['_targetSkewY'];},Sprite_Battler['prototype'][_0x29c7b3(0x879)]=function(){const _0x2909fe=_0x29c7b3;return this[_0x2909fe(0x4b5)]>0x0;},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x2e7)]=function(_0xc01753,_0x37fc58,_0x11f672,_0x487038){const _0x4ba84a=_0x29c7b3;if(!this[_0x4ba84a(0xa25)]())return;if(!this[_0x4ba84a(0x1b9)])return;if(this['_targetAngle']===_0xc01753)return;this[_0x4ba84a(0xb73)]=_0xc01753,this[_0x4ba84a(0x404)]=_0x37fc58,this[_0x4ba84a(0x28b)]=_0x37fc58,this[_0x4ba84a(0x262)]=_0x11f672||_0x4ba84a(0x2da),this[_0x4ba84a(0xa20)]=_0x487038,this[_0x4ba84a(0xa20)]===undefined&&(this[_0x4ba84a(0xa20)]=!![]),_0x37fc58<=0x0&&(this[_0x4ba84a(0x6a3)]=_0xc01753,this[_0x4ba84a(0xa20)]&&(this['_targetAngle']=0x0,this[_0x4ba84a(0x6a3)]=0x0));},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x7bf)]=function(){const _0xc7ad17=_0x29c7b3;this[_0xc7ad17(0xff)](),this['applyAngleChange']();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xff)]=function(){const _0xf9afeb=_0x29c7b3;if(this['_angleDuration']<=0x0)return;const _0x589ded=this[_0xf9afeb(0x404)],_0x39d65a=this[_0xf9afeb(0x28b)],_0x50d050=this[_0xf9afeb(0x262)];Imported[_0xf9afeb(0x50c)]?this[_0xf9afeb(0x6a3)]=this[_0xf9afeb(0x9a5)](this[_0xf9afeb(0x6a3)],this[_0xf9afeb(0xb73)],_0x589ded,_0x39d65a,_0x50d050):this[_0xf9afeb(0x6a3)]=(this['_currentAngle']*(_0x589ded-0x1)+this[_0xf9afeb(0xb73)])/_0x589ded;this['_angleDuration']--;if(this[_0xf9afeb(0x404)]<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x13c)]=function(){const _0x176800=_0x29c7b3;this[_0x176800(0x6a3)]=this[_0x176800(0xb73)],this[_0x176800(0xa20)]&&(this[_0x176800(0xb73)]=0x0,this[_0x176800(0x6a3)]=0x0);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xb41)]=function(){const _0x8b311b=_0x29c7b3;return this[_0x8b311b(0x404)]>0x0;},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x4ea)]=function(){const _0x44568a=_0x29c7b3;if(!this[_0x44568a(0x1b9)])return;const _0x49ecf4=this[_0x44568a(0x6a3)],_0x51e635=this['scale']['x'],_0x2f624b=this[_0x44568a(0x3e8)][_0x44568a(0xa27)]()?-0x1:0x1;this['_distortionSprite'][_0x44568a(0x27f)]=_0x49ecf4*_0x51e635*_0x2f624b;const _0xc86a6e=this[_0x44568a(0x1b9)]['scale']['y'];this[_0x44568a(0x1b9)]['y']=this['height']*-0.5*(0x2-_0xc86a6e),this['_distortionSprite']['y']=Math[_0x44568a(0xc1a)](this[_0x44568a(0x1b9)]['y']);const _0x3c3a79=[this[_0x44568a(0x150)],this['_svBattlerSprite'],this[_0x44568a(0x2c6)]];for(const _0x544e0d of _0x3c3a79){if(!_0x544e0d)continue;_0x544e0d['y']=this[_0x44568a(0x719)]*0.5;}this[_0x44568a(0x6e9)]&&(this['_shadowScaleX']=this['_shadowScaleX']??0x1,this[_0x44568a(0x141)]=this['_shadowScaleY']??0x1,this[_0x44568a(0x6e9)][_0x44568a(0xaa0)]['x']=this[_0x44568a(0x1b9)][_0x44568a(0xaa0)]['x']*this['_shadowScaleX'],this[_0x44568a(0x6e9)][_0x44568a(0xaa0)]['y']=this[_0x44568a(0x1b9)][_0x44568a(0xaa0)]['y']*this[_0x44568a(0x141)]);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x238)]=Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0xad9)],Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0xad9)]=function(){const _0x446cac=_0x29c7b3;VisuMZ[_0x446cac(0x2e2)][_0x446cac(0x238)][_0x446cac(0x8d6)](this),VisuMZ[_0x446cac(0x2e2)][_0x446cac(0xc14)][_0x446cac(0x579)][_0x446cac(0x750)]&&this[_0x446cac(0x41a)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x522)]=Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x6e8)],Sprite_Enemy['prototype'][_0x29c7b3(0x6e8)]=function(){const _0x44fd6d=_0x29c7b3;VisuMZ['BattleCore'][_0x44fd6d(0xc14)][_0x44fd6d(0x579)][_0x44fd6d(0xacc)]&&this['createHpGaugeSprite'](),VisuMZ[_0x44fd6d(0x2e2)][_0x44fd6d(0x522)][_0x44fd6d(0x8d6)](this);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x41a)]=function(){const _0x2b0bbe=_0x29c7b3;if(!ConfigManager[_0x2b0bbe(0x146)])return;if(this[_0x2b0bbe(0xba3)]===Sprite_SvEnemy)return;const _0x58498=VisuMZ[_0x2b0bbe(0x2e2)][_0x2b0bbe(0xc14)]['HpGauge'],_0x3d40c4=new Sprite_HpGauge();_0x3d40c4[_0x2b0bbe(0x3f8)]['x']=_0x58498[_0x2b0bbe(0x48c)],_0x3d40c4['anchor']['y']=_0x58498[_0x2b0bbe(0x898)],_0x3d40c4[_0x2b0bbe(0xaa0)]['x']=_0x3d40c4['scale']['y']=_0x58498[_0x2b0bbe(0xba8)],this[_0x2b0bbe(0x79e)]=_0x3d40c4,this[_0x2b0bbe(0xa56)](this[_0x2b0bbe(0x79e)]),Spriteset_Battle[_0x2b0bbe(0x6a9)]&&BattleManager[_0x2b0bbe(0x694)](this[_0x2b0bbe(0x79e)]);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x344)]=Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xbdd)],Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xbdd)]=function(_0xc9a7b2){const _0x326e5f=_0x29c7b3,_0x5949b0=this[_0x326e5f(0x3e8)];VisuMZ[_0x326e5f(0x2e2)]['Sprite_Battler_setBattler'][_0x326e5f(0x8d6)](this,_0xc9a7b2),this[_0x326e5f(0x8aa)](_0xc9a7b2);if(_0x5949b0!==_0xc9a7b2)this['updateShadowScale']();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x8aa)]=function(_0x4d868d){const _0x522fed=_0x29c7b3;if(!_0x4d868d)return;if(!this[_0x522fed(0x79e)])return;if(_0x4d868d[_0x522fed(0xa27)]()){}else{if(_0x4d868d['isEnemy']()){if(this['constructor']===Sprite_SvEnemy&&!_0x4d868d[_0x522fed(0x20b)]())return;}}this['_hpGaugeSprite']['setup'](_0x4d868d,'hp');},Sprite_Battler[_0x29c7b3(0xc03)]['hasStaticSvBattler']=function(){const _0x3ae318=_0x29c7b3;return this[_0x3ae318(0x3e8)]&&this[_0x3ae318(0x3e8)]['hasStaticSvBattler']();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x658)]=function(){const _0x364ffd=_0x29c7b3,_0x5ee922=this[_0x364ffd(0x150)]['bitmap'];if(!_0x5ee922)return;const _0xedfe79=_0x5ee922[_0x364ffd(0x580)];let _0x69030b=_0x5ee922[_0x364ffd(0x719)];if(this['_battler'][_0x364ffd(0x7cd)]()){if(this[_0x364ffd(0x948)])_0x69030b=Math[_0x364ffd(0xbaf)](0x0,this[_0x364ffd(0x948)][_0x364ffd(0x719)]-0x4);}this[_0x364ffd(0x150)]['setFrame'](0x0,0x0,_0xedfe79,_0x69030b),this[_0x364ffd(0xa90)](0x0,0x0,_0xedfe79,_0x69030b);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xa83)]=function(){const _0x21912e=_0x29c7b3;if(!this['_battler'])return;if(!this[_0x21912e(0x79e)])return;const _0x5d5c54=VisuMZ[_0x21912e(0x2e2)][_0x21912e(0xc14)][_0x21912e(0x579)],_0x117172=this[_0x21912e(0x79e)];_0x117172[_0x21912e(0xb81)]=this['isVisualHpGaugeDisplayed']();const _0x462d4b=_0x5d5c54[_0x21912e(0x970)],_0x25bf0b=_0x5d5c54[_0x21912e(0x921)];_0x117172['x']=_0x462d4b,_0x117172['x']+=this[_0x21912e(0x3e8)][_0x21912e(0xa9d)](),_0x117172['y']=-this[_0x21912e(0x719)]+_0x25bf0b,_0x117172['y']+=this[_0x21912e(0x3e8)][_0x21912e(0x820)](),Spriteset_Battle[_0x21912e(0x6a9)]&&SceneManager[_0x21912e(0x364)][_0x21912e(0x690)]&&(_0x117172['x']+=this['x'],_0x117172['y']+=this['y']);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x1ea)]=function(){const _0x4c0a64=_0x29c7b3;if(!this[_0x4c0a64(0x3e8)])return![];if(this[_0x4c0a64(0x3e8)][_0x4c0a64(0xa27)]())return!![];if(this[_0x4c0a64(0x3e8)][_0x4c0a64(0x48f)]())return![];if(this[_0x4c0a64(0x81b)]<=0x0)return![];const _0xde3c93=this[_0x4c0a64(0x3e8)][_0x4c0a64(0x662)]()['note'];if(_0xde3c93['match'](/<SHOW HP GAUGE>/i))return!![];if(_0xde3c93[_0x4c0a64(0x290)](/<HIDE HP GAUGE>/i))return![];const _0x2ace22=VisuMZ[_0x4c0a64(0x2e2)][_0x4c0a64(0xc14)][_0x4c0a64(0x579)];if(_0x2ace22[_0x4c0a64(0xbe5)]){if(_0x2ace22['BTestBypass']&&BattleManager[_0x4c0a64(0x700)]())return!![];if(this[_0x4c0a64(0x3e8)][_0x4c0a64(0x913)])return![];return this[_0x4c0a64(0x3e8)][_0x4c0a64(0x3fa)]();}return!![];},VisuMZ['BattleCore']['Sprite_Battler_isMoving']=Sprite_Battler['prototype'][_0x29c7b3(0x337)],Sprite_Battler['prototype'][_0x29c7b3(0x337)]=function(){const _0x18b4ad=_0x29c7b3;if(!this[_0x18b4ad(0x3e8)])return![];if(this[_0x18b4ad(0x9ba)]>0x0)return!![];return VisuMZ['BattleCore'][_0x18b4ad(0xbb5)]['call'](this);},VisuMZ['BattleCore'][_0x29c7b3(0x25b)]=Sprite_Battler[_0x29c7b3(0xc03)]['startMove'],Sprite_Battler[_0x29c7b3(0xc03)]['startMove']=function(_0x29cb8d,_0x50c4a5,_0x571c5c){const _0xaf5823=_0x29c7b3;this[_0xaf5823(0xa25)]()&&VisuMZ[_0xaf5823(0x2e2)][_0xaf5823(0x25b)][_0xaf5823(0x8d6)](this,_0x29cb8d,_0x50c4a5,_0x571c5c);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0xa25)]=function(){const _0x5efeba=_0x29c7b3;if(this[_0x5efeba(0x3e8)]&&this[_0x5efeba(0x3e8)]['isDead']())return![];if(this[_0x5efeba(0x3e8)]&&!this[_0x5efeba(0x3e8)][_0x5efeba(0x500)]())return![];return $gameSystem[_0x5efeba(0x204)]();},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x7fe)]=function(){},Sprite_Battler[_0x29c7b3(0xc03)]['stepBack']=function(){const _0x5ca077=_0x29c7b3;this[_0x5ca077(0xab3)](0x0,0x0,0xc);},Sprite_Battler['prototype'][_0x29c7b3(0x910)]=function(){},Sprite_Battler['prototype'][_0x29c7b3(0x560)]=function(){const _0x4a4c27=_0x29c7b3,_0x4de2b1=VisuMZ[_0x4a4c27(0x2e2)][_0x4a4c27(0xc14)]['Actor'],_0x4212ac=this[_0x4a4c27(0x3e8)]&&this[_0x4a4c27(0x3e8)][_0x4a4c27(0xa27)]()?0x1:-0x1,_0x3209a9=this[_0x4a4c27(0xa3a)]-this[_0x4a4c27(0x755)]+_0x4212ac*_0x4de2b1['FlinchDistanceX'],_0x36d6b6=this['_baseY']-this['_homeY']+_0x4212ac*_0x4de2b1[_0x4a4c27(0x370)],_0x2ba757=_0x4de2b1[_0x4a4c27(0x4be)];this[_0x4a4c27(0xab3)](_0x3209a9,_0x36d6b6,_0x2ba757);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x9f8)]=function(_0x1390a7,_0x31b223){const _0x386318=_0x29c7b3,_0x481e89=VisuMZ[_0x386318(0x2e2)]['Settings']['Actor'];this[_0x386318(0x172)]=Math[_0x386318(0xc1a)]((_0x481e89[_0x386318(0x274)]??0x18)*_0x31b223),this['_shakeFlinchPower']=Math['max'](this[_0x386318(0x503)],_0x1390a7);},Sprite_Battler[_0x29c7b3(0xc03)][_0x29c7b3(0x7ea)]=function(){const _0x2e88d5=_0x29c7b3,_0x38af5=VisuMZ[_0x2e88d5(0x2e2)][_0x2e88d5(0xc14)][_0x2e88d5(0x953)];if(!(_0x38af5['ShakeFlinch']??![]))return;if(this[_0x2e88d5(0x172)]>0x0){const _0xa3ad94=this[_0x2e88d5(0x172)];this[_0x2e88d5(0x503)]=this[_0x2e88d5(0x503)]*(_0xa3ad94-0x1)/_0xa3ad94,this[_0x2e88d5(0x172)]--,this[_0x2e88d5(0x172)]<=0x0&&(this['_shakeFlinchPower']=0x0);}this[_0x2e88d5(0x503)]>0x0?(this[_0x2e88d5(0x150)]['x']=Math[_0x2e88d5(0x7d2)](this[_0x2e88d5(0x503)])*(Math['random']()<0.5?-0x1:0x1),this['_baseY']!==this['y']&&(this[_0x2e88d5(0x150)]['y']=this[_0x2e88d5(0x719)]*0.5,this[_0x2e88d5(0x150)]['y']+=Math['randomInt'](this[_0x2e88d5(0x503)])*(Math[_0x2e88d5(0x85d)]()<0.5?-0x1:0x1))):(this[_0x2e88d5(0x150)]['x']=0x0,this['_mainSprite']['y']=this['height']*0.5);},VisuMZ[_0x29c7b3(0x2e2)]['Sprite_Actor_initMembers']=Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x2e9)],Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x2e9)]=function(){const _0x143f9f=_0x29c7b3;VisuMZ[_0x143f9f(0x2e2)][_0x143f9f(0x75b)]['call'](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor['prototype'][_0x29c7b3(0x48d)]=function(){const _0x2c6518=_0x29c7b3;return this['_distortionSprite']||this[_0x2c6518(0x150)]||this;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xb1b)]=Sprite_Actor['prototype'][_0x29c7b3(0x65b)],Sprite_Actor['prototype'][_0x29c7b3(0x65b)]=function(){},Sprite_Actor[_0x29c7b3(0xc03)]['moveToStartPositionBattleCore']=function(_0x35773e){const _0x4cd398=_0x29c7b3;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x35773e)return;if(!_0x35773e[_0x4cd398(0xa25)]())return;VisuMZ['BattleCore'][_0x4cd398(0xb1b)]['call'](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x75e)]=Sprite_Actor[_0x29c7b3(0xc03)]['setActorHome'],Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x3a1)]=function(_0xa4e916){const _0x1e855e=_0x29c7b3;VisuMZ[_0x1e855e(0x2e2)][_0x1e855e(0xc14)][_0x1e855e(0x953)][_0x1e855e(0x7f4)]?VisuMZ[_0x1e855e(0x2e2)][_0x1e855e(0xc14)][_0x1e855e(0x953)][_0x1e855e(0x7f4)][_0x1e855e(0x8d6)](this,_0xa4e916):VisuMZ['BattleCore'][_0x1e855e(0x75e)][_0x1e855e(0x8d6)](this,_0xa4e916);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x81e)]=Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0xbdd)],Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0xbdd)]=function(_0x218279){const _0x4599e5=_0x29c7b3;VisuMZ[_0x4599e5(0x2e2)][_0x4599e5(0x81e)]['call'](this,_0x218279),this[_0x4599e5(0x31b)](_0x218279);},Sprite_Actor['prototype'][_0x29c7b3(0x31b)]=function(_0x54f73a){const _0x48865a=_0x29c7b3;if(!_0x54f73a)return;if(!this[_0x48865a(0x150)])return;this['_mainSprite'][_0x48865a(0x3f8)]['x']=this[_0x48865a(0x778)][_0x48865a(0x7cf)](),this[_0x48865a(0x150)][_0x48865a(0x3f8)]['y']=this[_0x48865a(0x778)][_0x48865a(0x2dd)](),this[_0x48865a(0xbb3)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x126)]=Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x592)],Sprite_Actor[_0x29c7b3(0xc03)]['update']=function(){const _0x5c30af=_0x29c7b3;VisuMZ[_0x5c30af(0x2e2)][_0x5c30af(0x126)][_0x5c30af(0x8d6)](this),this[_0x5c30af(0x778)]&&(this[_0x5c30af(0xa69)](),this[_0x5c30af(0x675)]());},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xb2e)]=Sprite_Actor['prototype'][_0x29c7b3(0x7b6)],Sprite_Actor[_0x29c7b3(0xc03)]['updateBitmap']=function(){const _0x171056=_0x29c7b3;VisuMZ[_0x171056(0x2e2)][_0x171056(0xb2e)][_0x171056(0x8d6)](this),this[_0x171056(0x150)]&&this[_0x171056(0x150)][_0x171056(0xc2a)]&&this[_0x171056(0x3e8)]&&(this[_0x171056(0x150)][_0x171056(0xc2a)][_0x171056(0x207)]!==this['_battler'][_0x171056(0xa2a)]()&&(this[_0x171056(0x150)]['bitmap']['smooth']=this['_battler'][_0x171056(0xa2a)]()));},VisuMZ[_0x29c7b3(0x2e2)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x704)],Sprite_Actor['prototype']['updateShadow']=function(){const _0x193344=_0x29c7b3;VisuMZ[_0x193344(0x2e2)][_0x193344(0x28c)]['call'](this),this['updateShadowBattleCore']();},Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x703)]=function(){const _0x26d64e=_0x29c7b3;if(!this['_mainSprite'])return;if(!this[_0x26d64e(0x6e9)])return;this[_0x26d64e(0xbb3)](),this[_0x26d64e(0x749)]();},Sprite_Actor['prototype'][_0x29c7b3(0xa69)]=function(){const _0x7f792f=_0x29c7b3;{this['_stateSprite']['scale']['x']=0x1/(this[_0x7f792f(0xaa0)]['x']||0.001),this['_stateSprite'][_0x7f792f(0xaa0)]['y']=0x1/(this[_0x7f792f(0xaa0)]['y']||0.001);}{this[_0x7f792f(0x677)]['x']=0x0,this[_0x7f792f(0x677)]['y']=-this[_0x7f792f(0x719)]-0x20+0x60;const _0x1f117e=VisuMZ[_0x7f792f(0x2e2)][_0x7f792f(0xc14)][_0x7f792f(0x953)];this['_stateSprite']['x']+=_0x1f117e['StateOverlayOffsetX']??0x0,this['_stateSprite']['y']+=_0x1f117e[_0x7f792f(0x35e)]??0x0;}},Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x675)]=function(){const _0x37f343=_0x29c7b3;if(!$gameSystem[_0x37f343(0x204)]()&&this[_0x37f343(0xba3)]===Sprite_Actor){const _0x59586a=Scene_Battle[_0x37f343(0xc03)][_0x37f343(0x815)]();['default',_0x37f343(0x72f),_0x37f343(0xa7c),_0x37f343(0x5d2)]['includes'](_0x59586a)&&(this[_0x37f343(0x81b)]=0x0);}},Sprite_Actor[_0x29c7b3(0xc03)]['refreshMotion']=function(){const _0x810d8b=_0x29c7b3,_0xa7bc76=this['_actor'];if(_0xa7bc76){if(_0xa7bc76[_0x810d8b(0x490)])return;const _0x10c8b9=_0xa7bc76[_0x810d8b(0x170)]();if(_0xa7bc76[_0x810d8b(0x7f1)]()||_0xa7bc76[_0x810d8b(0x546)]())this[_0x810d8b(0xb9b)]('walk');else{if(_0x10c8b9===0x3)this[_0x810d8b(0xb9b)]('dead');else{if(_0x10c8b9===0x2)this['startMotion'](_0x810d8b(0x8cd));else{if(this['forceEscapeSprite'])this[_0x810d8b(0xb9b)]('escape');else{if(_0xa7bc76['isCharging']())this[_0x810d8b(0xb9b)](_0x810d8b(0x60f));else{if(_0xa7bc76[_0x810d8b(0xa6b)]())this[_0x810d8b(0xb9b)](_0x810d8b(0x928));else{if(_0xa7bc76['isGuard']()||_0xa7bc76[_0x810d8b(0x544)]())this[_0x810d8b(0xb9b)](_0x810d8b(0x9b0));else{if(_0x10c8b9===0x1)this[_0x810d8b(0xb9b)](_0x810d8b(0xb7b));else{if(_0xa7bc76[_0x810d8b(0x6f6)]())this[_0x810d8b(0xb9b)](_0x810d8b(0x34b));else{if(_0xa7bc76[_0x810d8b(0xbfe)]())this['startMotion'](_0x810d8b(0x926));else _0xa7bc76[_0x810d8b(0x248)]()?this[_0x810d8b(0xb9b)](_0x810d8b(0x60f)):this[_0x810d8b(0xb9b)](_0x810d8b(0x926));}}}}}}}}}}},Sprite_Actor['prototype']['retreat']=function(){const _0x49aff2=0xa,_0x40664f=0x12c*_0x49aff2,_0x42138f=0x1e*_0x49aff2;this['startMove'](_0x40664f,0x0,_0x42138f);},Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x461)]=function(){const _0x53cb11=_0x29c7b3;Sprite_Battler['prototype'][_0x53cb11(0x461)][_0x53cb11(0x8d6)](this);},Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x535)]=function(){const _0x5c4871=_0x29c7b3;return Sprite_Battler[_0x5c4871(0x9ae)];},Sprite_Weapon[_0x29c7b3(0xc03)][_0x29c7b3(0x4a0)]=function(){const _0x386161=_0x29c7b3;return Sprite_Battler[_0x386161(0x9ae)];},Sprite_Actor[_0x29c7b3(0xc03)]['setupMotion']=function(){},Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x297)]=function(){},Sprite_Actor[_0x29c7b3(0xc03)]['updateMotionCount']=function(){const _0x8a9908=_0x29c7b3;if(this[_0x8a9908(0x2f1)]&&++this['_motionCount']>=this[_0x8a9908(0x535)]()){if(this[_0x8a9908(0x2f1)][_0x8a9908(0x8eb)])this[_0x8a9908(0x506)]=(this[_0x8a9908(0x506)]+0x1)%0x4;else{if(this[_0x8a9908(0x506)]<0x2)this[_0x8a9908(0x506)]++;else{const _0x205f6b=this['_actor'];if(_0x205f6b)_0x205f6b[_0x8a9908(0x490)]=undefined;this[_0x8a9908(0x3c5)]();}}this['_motionCount']=0x0;}},Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x3df)]=function(_0xaf40fb){const _0x35491b=_0x29c7b3;if(this['_battler']&&this[_0x35491b(0x3e8)][_0x35491b(0x7cd)]()){this[_0x35491b(0x2f1)]=Sprite_Actor[_0x35491b(0x3e0)][_0x35491b(0x839)];return;}const _0x345296=Sprite_Actor[_0x35491b(0x3e0)][_0xaf40fb];this[_0x35491b(0x2f1)]=_0x345296,this['_motionCount']=0x0,this['_pattern']=0x0;},Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x7dc)]=function(_0x4328cf){const _0x24480b=_0x29c7b3;if(this['hasStaticSvBattler']())return;this['adjustWeaponSpriteOffset'](),this['_weaponSprite'][_0x24480b(0xb10)](_0x4328cf),this['_actor'][_0x24480b(0x492)]();},Sprite_Actor[_0x29c7b3(0xc03)]['adjustWeaponSpriteOffset']=function(){const _0x5ab644=_0x29c7b3;let _0x37a24d=-0x10,_0x3f6a7c=this[_0x5ab644(0x719)]*0.5;const _0x854aa0=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x6ccb61=this['_battler'][_0x5ab644(0xa6d)]()[_0x5ab644(0x8ea)](_0x2dad3b=>_0x2dad3b&&_0x2dad3b[_0x5ab644(0x124)][_0x5ab644(0x290)](_0x854aa0)?Number(RegExp['$1']):0x0),_0x3767cb=this[_0x5ab644(0x3e8)][_0x5ab644(0xa6d)]()['map'](_0x1de453=>_0x1de453&&_0x1de453[_0x5ab644(0x124)][_0x5ab644(0x290)](_0x854aa0)?Number(RegExp['$2']):0x0);_0x37a24d=_0x6ccb61[_0x5ab644(0xa1e)]((_0x5a1172,_0x384742)=>_0x5a1172+_0x384742,_0x37a24d),_0x3f6a7c=_0x3767cb[_0x5ab644(0xa1e)]((_0x3b5d58,_0x192f6d)=>_0x3b5d58+_0x192f6d,_0x3f6a7c),this[_0x5ab644(0x7ce)]['x']=_0x37a24d,this[_0x5ab644(0x7ce)]['y']=_0x3f6a7c,this[_0x5ab644(0x7ce)][_0x5ab644(0x592)]();},Sprite_Weapon['prototype'][_0x29c7b3(0xb10)]=function(_0x51050d){const _0x2c9e12=_0x29c7b3;this[_0x2c9e12(0x210)]=_0x51050d,this[_0x2c9e12(0x86a)]=-0x1,this['_pattern']=0x0,this[_0x2c9e12(0x37b)](),this[_0x2c9e12(0xa4f)]();},Sprite_Actor['prototype'][_0x29c7b3(0x283)]=function(){},Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x7fe)]=function(){const _0x61facd=_0x29c7b3,_0x45f4f6=VisuMZ[_0x61facd(0x2e2)][_0x61facd(0xc14)][_0x61facd(0x54f)],_0x18f37a=_0x45f4f6[_0x61facd(0x24d)],_0x4ff9e7=_0x45f4f6[_0x61facd(0x24e)],_0x1f56f4=_0x45f4f6[_0x61facd(0xc13)];this[_0x61facd(0xab3)](-_0x18f37a,-_0x4ff9e7,_0x1f56f4);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x481)]=Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0xa4f)],Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0xa4f)]=function(){const _0x3aca2f=_0x29c7b3;this['hasStaticSvBattler']()?this[_0x3aca2f(0x658)]():(this[_0x3aca2f(0x9f2)](),VisuMZ[_0x3aca2f(0x2e2)][_0x3aca2f(0x481)]['call'](this));},Sprite_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x9f2)]=function(){const _0x541c4c=_0x29c7b3;if(this[_0x541c4c(0x3e8)]&&this[_0x541c4c(0x3e8)]['_freezeMotionData']){const _0x1a2ae3=this[_0x541c4c(0x3e8)][_0x541c4c(0x647)];this[_0x541c4c(0x2f1)]=Sprite_Actor[_0x541c4c(0x3e0)][_0x1a2ae3[_0x541c4c(0x257)]],this[_0x541c4c(0x506)]=_0x1a2ae3[_0x541c4c(0x808)];const _0x4284cd=this[_0x541c4c(0x7ce)];_0x4284cd[_0x541c4c(0x742)](_0x1a2ae3[_0x541c4c(0x21a)],_0x1a2ae3[_0x541c4c(0x808)]),this[_0x541c4c(0x373)]();}},Sprite_Weapon[_0x29c7b3(0xc03)][_0x29c7b3(0x742)]=function(_0x3dc784,_0x1e1474){const _0x3b1bc4=_0x29c7b3;this['_weaponImageId']=_0x3dc784,this[_0x3b1bc4(0x86a)]=-Infinity,this[_0x3b1bc4(0x506)]=_0x1e1474,this['loadBitmap'](),this[_0x3b1bc4(0xa4f)]();},Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x2e9)]=function(){const _0x460a4b=_0x29c7b3;Sprite_Battler[_0x460a4b(0xc03)][_0x460a4b(0x2e9)][_0x460a4b(0x8d6)](this),this[_0x460a4b(0x1c8)]=null,this[_0x460a4b(0x6ba)]=![],this[_0x460a4b(0x95a)]='',this[_0x460a4b(0xaf6)]=0x0,this['_effectType']=null,this[_0x460a4b(0x8be)]=0x0,this['_shake']=0x0,this[_0x460a4b(0xbea)](),this[_0x460a4b(0x6e8)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x7b2)]=Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x592)],Sprite_Enemy['prototype'][_0x29c7b3(0x592)]=function(){const _0x489064=_0x29c7b3;VisuMZ[_0x489064(0x2e2)]['Sprite_Enemy_update'][_0x489064(0x8d6)](this),this[_0x489064(0xbb3)](),this[_0x489064(0x191)]();},Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xbea)]=function(){const _0x43cbbd=_0x29c7b3;this[_0x43cbbd(0x150)]=new Sprite(),this[_0x43cbbd(0x150)][_0x43cbbd(0x3f8)]['x']=0.5,this[_0x43cbbd(0x150)]['anchor']['y']=0x1,this[_0x43cbbd(0xa56)](this['_mainSprite']),this[_0x43cbbd(0x295)]();},Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x48d)]=function(){const _0xd270c3=_0x29c7b3;return this[_0xd270c3(0x1b9)]||this[_0xd270c3(0x150)]||this;},Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x37b)]=function(_0x5b7572){const _0x3feb44=_0x29c7b3;this[_0x3feb44(0xc2a)]=new Bitmap(0x1,0x1);if(this[_0x3feb44(0x20b)]()){const _0x23ab31=this[_0x3feb44(0x1c8)][_0x3feb44(0x6b5)]();this[_0x3feb44(0xc2a)]=new Bitmap(_0x23ab31['width'],_0x23ab31['height']),this[_0x3feb44(0x150)][_0x3feb44(0xc2a)]=new Bitmap(0x1,0x1);}else{if($gameSystem['isSideView']()){const _0x7f2be0=ImageManager['loadSvEnemy'](_0x5b7572);_0x7f2be0[_0x3feb44(0xbbf)](this[_0x3feb44(0x452)][_0x3feb44(0x86e)](this,_0x7f2be0));}else{const _0x5293a1=ImageManager['loadEnemy'](_0x5b7572);_0x5293a1[_0x3feb44(0xbbf)](this[_0x3feb44(0x452)][_0x3feb44(0x86e)](this,_0x5293a1));}}},Sprite_Enemy['prototype'][_0x29c7b3(0x452)]=function(_0x304147){const _0x30661b=_0x29c7b3;this[_0x30661b(0x150)][_0x30661b(0xc2a)]=_0x304147,this[_0x30661b(0xc2a)]=new Bitmap(_0x304147['width'],_0x304147[_0x30661b(0x719)]);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xb1d)]=Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xbf2)],Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xbf2)]=function(_0x51b76c){const _0x1c0720=_0x29c7b3;this[_0x1c0720(0x150)]&&this[_0x1c0720(0x150)][_0x1c0720(0xbf2)](_0x51b76c);},VisuMZ[_0x29c7b3(0x2e2)]['Sprite_Enemy_initVisibility']=Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x2eb)],Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x2eb)]=function(){const _0x413493=_0x29c7b3;this[_0x413493(0xb77)]()?VisuMZ[_0x413493(0x2e2)][_0x413493(0x82f)][_0x413493(0x8d6)](this):(this[_0x413493(0x6ba)]=!this[_0x413493(0x1c8)]['isHidden'](),!this[_0x413493(0x6ba)]&&(this[_0x413493(0x81b)]=0x0));},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x183)]=Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x867)],Sprite_Enemy[_0x29c7b3(0xc03)]['updateCollapse']=function(){const _0x508863=_0x29c7b3;if(this[_0x508863(0xb77)]())VisuMZ[_0x508863(0x2e2)][_0x508863(0x183)][_0x508863(0x8d6)](this);},Sprite_Enemy['prototype'][_0x29c7b3(0xa4f)]=function(){const _0x921b35=_0x29c7b3;Sprite_Battler[_0x921b35(0xc03)]['updateFrame'][_0x921b35(0x8d6)](this);const _0x5b9299=this[_0x921b35(0x48d)]()||this;if(!_0x5b9299)return;!_0x5b9299[_0x921b35(0xc2a)]&&(_0x5b9299[_0x921b35(0xc2a)]=new Bitmap(this[_0x921b35(0x580)]||0x1,this[_0x921b35(0x719)]||0x1));if(this[_0x921b35(0x97d)]===_0x921b35(0x510))this[_0x921b35(0x150)][_0x921b35(0xa90)](0x0,0x0,this[_0x921b35(0x150)][_0x921b35(0x580)]||0x1,this['_effectDuration']);else{let _0xcae44f=0x1;if(_0x5b9299&&_0x5b9299[_0x921b35(0xc2a)])_0xcae44f=_0x5b9299[_0x921b35(0xc2a)][_0x921b35(0x580)];let _0x40a019=0x1;if(this[_0x921b35(0xc2a)])_0x40a019=this['bitmap'][_0x921b35(0x719)];_0x5b9299[_0x921b35(0xa90)](0x0,0x0,_0xcae44f,_0x40a019);}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x941)]=Sprite_Enemy['prototype'][_0x29c7b3(0x4c6)],Sprite_Enemy['prototype']['updateBossCollapse']=function(){const _0x1c236d=_0x29c7b3;if(this[_0x1c236d(0xb77)]())VisuMZ[_0x1c236d(0x2e2)][_0x1c236d(0x941)]['call'](this);},Sprite_Enemy['prototype'][_0x29c7b3(0x337)]=function(){const _0x3eda7b=_0x29c7b3;return Sprite_Battler['prototype']['isMoving'][_0x3eda7b(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)]['Sprite_Enemy_updateStateSprite']=Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xa69)],Sprite_Enemy['prototype']['updateStateSprite']=function(){const _0x12015b=_0x29c7b3;VisuMZ[_0x12015b(0x2e2)][_0x12015b(0xae3)][_0x12015b(0x8d6)](this),this['updateStateSpriteBattleCore']();},Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x222)]=function(){const _0x192b3c=_0x29c7b3,_0x544c52=VisuMZ[_0x192b3c(0x2e2)][_0x192b3c(0xc14)][_0x192b3c(0xac6)];if(_0x544c52[_0x192b3c(0xba1)]&&!_0x544c52['NameLegacy']){this[_0x192b3c(0x8e9)][_0x192b3c(0x81b)]=0x0;return;}this[_0x192b3c(0x8e9)]['x']=0x0,this[_0x192b3c(0x8e9)]['x']+=this[_0x192b3c(0x3e8)][_0x192b3c(0xa9d)]();let _0x605ccf=0x1;if(this[_0x192b3c(0xc2a)])_0x605ccf=this[_0x192b3c(0xc2a)]['height'];this[_0x192b3c(0x8e9)]['y']=-_0x605ccf-this[_0x192b3c(0x8e9)][_0x192b3c(0x719)]-0x4,this[_0x192b3c(0x8e9)]['y']+=this[_0x192b3c(0x3e8)]['battleUIOffsetY'](),this[_0x192b3c(0x8e9)][_0x192b3c(0xaa0)]['x']=0x1/(this[_0x192b3c(0xaa0)]['x']||0.001),this['_stateIconSprite'][_0x192b3c(0xaa0)]['y']=0x1/(this[_0x192b3c(0xaa0)]['y']||0.001),this[_0x192b3c(0x20b)]()&&(this['_svBattlerSprite'][_0x192b3c(0x677)]['scale']['x']=-0x1/(this[_0x192b3c(0xaa0)]['x']||0.001),this[_0x192b3c(0x6e0)]['_stateSprite'][_0x192b3c(0xaa0)]['y']=0x1/(this['scale']['y']||0.001));},Sprite_Enemy[_0x29c7b3(0xc03)]['updateNameTempVisibility']=function(){const _0x59568b=_0x29c7b3;this[_0x59568b(0x3e8)]&&this[_0x59568b(0x3e8)]['updateNameTempVisibility']();},VisuMZ['BattleCore'][_0x29c7b3(0xc04)]=Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xbdd)],Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xbdd)]=function(_0x34c208){const _0x215590=_0x29c7b3;VisuMZ[_0x215590(0x2e2)]['Sprite_Enemy_setBattler'][_0x215590(0x8d6)](this,_0x34c208),this['setSvBattlerSprite'](_0x34c208);},Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x3c9)]=function(_0x4a8a60){const _0x9467e=_0x29c7b3;!this[_0x9467e(0x6e0)]&&(this[_0x9467e(0x6e0)]=new Sprite_SvEnemy(_0x4a8a60),this[_0x9467e(0x295)]()),this['_svBattlerSprite'][_0x9467e(0xbdd)](_0x4a8a60);},Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x20b)]=function(){const _0x4c937e=_0x29c7b3;return this['_enemy']&&this[_0x4c937e(0x1c8)]['hasSvBattler']();},Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0xb77)]=function(){const _0xd88f1f=_0x29c7b3;return this['hasSvBattler']()?this['_enemy'][_0xd88f1f(0xb77)]():!![];},Sprite_Enemy[_0x29c7b3(0xc03)][_0x29c7b3(0x3c5)]=function(){const _0x2a08ee=_0x29c7b3;this['hasSvBattler']()&&this[_0x2a08ee(0x6e0)]['refreshMotion']();},Sprite_Enemy['prototype'][_0x29c7b3(0x3df)]=function(_0xf28e33){const _0x3e8b24=_0x29c7b3;if(this[_0x3e8b24(0x20b)]())this[_0x3e8b24(0x6e0)]['forceMotion'](_0xf28e33);},Sprite_Enemy[_0x29c7b3(0xc03)]['forceWeaponAnimation']=function(_0x161b16){const _0x335428=_0x29c7b3;if(this['hasSvBattler']())this[_0x335428(0x6e0)][_0x335428(0x7dc)](_0x161b16);},Sprite_Enemy[_0x29c7b3(0xc03)]['stepForward']=function(){const _0x44417d=_0x29c7b3,_0x14aeed=VisuMZ['BattleCore'][_0x44417d(0xc14)][_0x44417d(0x54f)],_0x27d876=_0x14aeed[_0x44417d(0x24d)],_0x3e1354=_0x14aeed[_0x44417d(0x24e)],_0x1540b1=_0x14aeed[_0x44417d(0xc13)];this[_0x44417d(0xab3)](_0x27d876,_0x3e1354,_0x1540b1);};function Sprite_SvEnemy(){const _0x3379d9=_0x29c7b3;this[_0x3379d9(0x1a0)](...arguments);}function _0x19fb(){const _0x259a16=['_targetBattlerKey','ActSeq_Grid_RemoveTriggerFromNode','BattleSystemBTB','CustomFontFace','Game_BattlerBase_refresh','\x5cC[%1]','commandStyleCheck','increaseTotal','Sprite_Enemy_updateStateSprite','growBattler','CreateCommonEventKeys','displayReflectionPlayBack','Game_Battler_performEvasion','updateJump','nameColor','Game_Temp_requestAnimation','canUseItemCommand','ActSeq_Movement_Skew','ActSeq_Cutin_EndVisualCutinEffectType','damagePopupOffsetX','createBattleFieldContainer','processEscape','allBattleMembers','previousActor','isStateAffected','ParseClassNotetags','next\x20target','_battlerHue','enemyShowParametersIfDefeated','clearBattleCoreAspects','BattleLayout','hitRate','createDamageContainer','all\x20targets','isDuringNonLoopingMotion','actor%1-gauge-%2','description','AUTO\x20BATTLE','startEnemySelection','anchorY','isOnCurrentMap','resetResultSwitches','ActSeq_Horror_NoiseCreate','clone','backColor','invokeMagicReflection','user','-----','setupMotionBlurImpactFilter','\x5cI[%1]\x5cC[%3]%2','BattleManager_isTpbMainPhase','getSkillIdWithName','launchBattle','setup','Scene_Battle_createActorCommandWindowIBS','_forcedBattlers','playBattleVoice','turnOrderChangeOTB','lukEffectRate','ActSeq_Horror_GlitchCreate','isSpriteVisible','movement','ActSeq_DB_DragonbonesTimeScale','onEscapeFailure','Sprite_Actor_moveToStartPosition','showPortraits','Sprite_Enemy_setHue','filterArea','zoomDuration','AntiTintUiElements','index','ButtonAssist','Direction','focus','_autoBattle','useItem','ActSeq_Set_FinishAction','currentDisplayedValue','CriticalHitRate','_lastAction','gradientFillRect','ENEMY_OFFSET_X','Window_BattleLog_performCollapse','Sprite_Actor_updateBitmap','targetBattlerContainerOpacity','_playTestFastMode','makeActionOrders','Scene_Battle_createActorCommandWindow','iconWidth','makeTargets','VisuMZ_2_HorrorEffects','\x20to\x20%1\x20midbattle.','Actions','bitmapWidth','MaxLines','SkillItemMiddleLayout','split','setupOversaturateImpactFilter','isEnemy','ActSeq_Weapon_ClearActiveWeapon','ITEM','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','isSpinning','Scene_Battle_onActorOk','_enemyNameContainer','_floatEasing','battlerShadowScaleX','Shadow2','_helpWindow','ActSeq_Animation_ShowAnimation','updateTargetValue','addCommand','itemTargetCandidates','updateScale','actor','loadCharacter','OverallFormulaJS','Parse_Notetags_HelpDescription','_isProjectile','BG_TYPE','ActionStart','makeActionList','ActSeq_Motion_WaitMotionFrame','drawItemImage','ESCAPE','getAttackMotionSlot','effects','_flashColor','isAppeared','%1Event','isChangingOpacity','Game_Action_setSkill','ParseWeaponNotetags','executeMpDamage','drawBuffs','alive\x20enemies\x20not\x20user','Window_BattleLog_displayMpDamage','setBattleImpactTimeScale','AttachStateOffsetX','VisuMZ_2_DragonbonesUnion','ActSeq_Camera_FocusPoint','PARTY','changeTextColor','BattleManager_checkSubstitute','_stypeIDs','makeBuffHelpText','_lastActor','evalDamageFormula','show','commandNameWindowCenter','_animationContainer','battlerShadowScaleY','_targetAngle','addBattlerAspect','PosOffsetY','Window_BattleLog_performMiss','allowCollapse','collapse','_skewX','_targetGrowX','abnormal','ActSeq_Grid_TeleportToNode','adjustPosition','Window_BattleEnemy_initialize','HpGaugeOffsetY','dead\x20enemies','visible','Game_Action_makeDamageValueDisperse','clearDamagePopup','ActionSkillMsg1','alphabetic','isTpb','ActSeq_Animation_PlayAtCoordinate','Game_Battler_performDamage','ActSeq_Movement_MoveBy','Game_Battler_performActionStart','createHelpWindowBattleCore','expTotal','\x5cI[%2]\x5cC[16]%1\x5cC[0]','addDamageSprite','%1▲','createActorCommandWindow','setCustomDamageFormula','10404684MECgqY','EnableDamageCap','updateInterpreter','selectedBattlers','isActiveTpbReady','prepareCustomActionSequence','VoiceLine','_targetY','alignBattleCoreDamageSprite','startMotion','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','regenerateAllBattleCore','AspectColor','isFastForward','makeStateHelpText','NameAttachStateIcon','includes','constructor','Scene_Battle_isTimeActiveIBS','NameOffsetX','PRE-','length','Scale','drawItemStatusListStyle','HITTYPE_MAGICAL','command301','customDamageFormula','ActSeq_Target_CurrentIndex','JS\x20%1START\x20TURN','max','selectNextCommand','VisuMZ_2_BattleSystemSTB','JS\x20%1DAMAGE\x20%2','updateShadowVisibility','StatusWindowSkinFilename','Sprite_Battler_isMoving','lifeStealTrait','ActSeq_Target_RandTarget','setupBattleCoreData','setImmortal','TimeScale','removeDamageSprite','isTriggered','isValid','DamageStyles','addLoadListener','109900zxtwaj','cancel','displayBuffs','updateOnceParallelInterpreters','lifeSteaItem','setupBlueRedInvertImpactFilter','onBattleStartOnceParallels','DEF','isCommandEnabled','alterActionCostPTB','clearHorrorEffects','setStateTooltipBattler','...','numberFontFace','min','Point','ext','_opacityDuration','missed','battleFloat','addActor','_inBattleStatusMode','setValue','moveToStartPositionBattleCore','VisuMZ_3_StateTooltips','Window_ItemList_maxCols','HITTYPE_PHYSICAL','ParseArmorNotetags','removeChild','setBattler','jsScaleDown','die','command301_PreBattleEvent','clearResult','jsScaleUp','animationShouldMirror','createPartyCommandWindowBattleCore','RequiresDefeat','PopupOffsetY','uiInputPosition','Game_Battler_makeSpeed','PerformAction','createMainSprite','updateActors','deathStateId','USER-DEFINED\x204','createPartyCommandWindow','isBattleSys','commandAutoBattle','ActSeq_Mechanics_BreakShieldChange','setHue','revealNewWeaknesses','BARE\x20HANDS','ActSeq_Projectile_Icon','removeOnceParallelInterpreter','randomTargets','dataId','ActSeq_Grid_PushFromTargetNode','casting','SvMotionIdleSolo-%1-%2','currentExt','CurrentTurn','isUndecided','drawSkillCost','addBuff','onFloatEnd','_handlers','prototype','Sprite_Enemy_setBattler','GroupDigits','BattlebackScale','isStateResist','BattleDefeatJS','ShowAddedDebuff','updateCallMenu','ComboWindow','boxWidth','ActSeq_Mechanics_DamagePopup','ActSeq_Movement_WaitForSpin','virtualClick','Spriteset_Battle_createLowerLayer','_weather','debuffColor','StepDuration','Settings','_back2Sprite','autoRemovalTiming','_battlerContainer','Opacity','Scene_Battle_createAllWindows','ceil','getBattleMembers','PostDamage%1JS','optDisplayTp','AddOption','Game_Action_applyGlobal','onDatabaseLoaded','performActionEnd','ActSeq_Animation_BalloonIconSpecific','right','HelpItem','resetNameTempVisibility','ActSeq_Mechanics_PtbConvert','applyGuard','invokeAction','font','bitmap','updateBorderSprite','PostDamageJS','<CUSTOM\x20ACTION\x20SEQUENCE>','mainSpriteHeight','hitsDmgFmt','TP_Rate','updateAngleCalculations','isOverworld','mainSpriteScaleY','resetBreakShield','%1\x20%2','ActSeq_Camera_Clamp','adjustPosition_ScaleDown','USER-DEFINED\x205','traitSet','trueRandomTarget','ActSeq_Movement_FaceTarget','AsUser','MP_Flat','ActionEffect','ActSeq_BattleLog_AddText','startBattle','_totalValue','GuardFormulaJS','ActSeq_BattleVoice_PlayCommonLine','process_VisuMZ_BattleCore_jsFunctions','charging','CommonEventID','StyleON','WaitForSkew','ActSeq_Mechanics_CtbOrder','gainBravePoints','displayCounter','isRepeated','_forcedHomeY','createAttachedSprites','NO\x20ACTOR\x20FOUND!','alive\x20enemies\x20not\x20target','isATB','isEffecting','createEnemyNameContainer','setBattleSkew','okButtonText','note','startPartyCommandSelection','Sprite_Actor_update','_lineHeight','AutoAddState','actions','PopupOffsetX','rec','Game_Map_setupBattleback','NameOffsetY','FlashDuration','performMiss','portraitType','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','boxHeight','canUse','USER-DEFINED\x202','HP_Flat','battleGrow','isForRandomBattleCore','_iconIndex','playReflection','push','onSkewEnd','onAngleEnd','Game_Enemy_setup','PopupPosition','ActSeq_Mechanics_EmulateItemEffect','_surprise','_shadowScaleY','isSTB','isShownOnBattlePortrait','WaitForOpacity','Skills','visualHpGauge','ARRAYSTR','setHorrorEffectSettings','VisuMZ_1_MessageCore','CommandWidth','%1Apply%2JS','Sprite_Battleback_adjustPosition','_enemyIDs','slice','Sprite_Gauge_smoothness','_mainSprite','battleProjectiles','Window_BattleLog_refresh','isForAliveFriendBattleCore','autoBattleUseSkills','ActionAnimation','_buttonKey','PreEndTurnJS','AttachStateOffsetY','forceEscapeSprite','Frame','processBattleCoreJS','redraw','svBattlerShadowVisible','ANNOYED','All\x20Allies','disarmMpLifeSteal','name','initMembersBattleCore','isBuffAffected','ItemID','customFontFace','VisuMZ_3_BoostAction','Interrupt','createBorderStylePortraitSprite','isBorderStylePortraitShown','refreshRequest','addExtendedTroopMembers','loadSystem','textColor','isGuard','Scene_Battle_needsInputWindowChangeIBS','stateMotionIndex','ANGER','_shakeFlinchDuration','setReturnWindow','_enemyWindow','canEscape','VisuMZ_3_ActSeqProjectiles','ALL_ENEMIES','updateBorderStyle','_baseLineStack','EXCLAMATION','drawItemStyleIconText','ActSeq_Mechanics_DeathBreak','criticalHitRate','power','PrioritySortActors','getLastPluginCommandInterpreter','checkTpbInputClose','\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','Sprite_Enemy_updateCollapse','ConfigManager_applyData','Text','ActSeq_Mechanics_CustomDmgFormula','LUK','Game_Action_isForDeadFriend','arRedRate','1196442YlwIBV','107191gezOha','wtypeId','cameraDuration','_armorPenetration','DamageStyleList','Game_BattlerBase_isStateResist','updateNameTempVisibility','aspect','physical','selectAll','AutoBattleOK','moveBattlerHomeDistance','ShuffleArray','changeAtbCastTime','_battleLayoutStyle','ActSeq_Zoom_WaitForZoom','clearActiveWeaponSet','loadBattleback2','ActSeq_Grid_ClearPassiveStatesFromNode','AutoBattle','stbGainInstant','initialize','getSpecificBattlerKeyTarget','createCommandVisibleJS','isForOpponent','WtypeId','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','CmdIconStatus','updateRefresh','GetActionSequenceSpecialTargetWithFlags','getInputButtonString','VisuMZ_2_BattleSystemBTB','\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','addGuardCommand','front\x20base','TextColor','finalizeScale','WaitComplete','LastSelected','addState','canSingleOrMultipleSelect','lastBattleSkill','State-%1-%2','cancelTargetSelectionVisibility','battleBalloon','message4','_distortionSprite','ActorOffsetX','ARRAYFUNC','ActSeq_Motion_ClearFreezeFrame','ActSeq_Impact_Oversaturate','displayAction','_frontAttachmentSprite','turn','removeAnimation','updateHelp','Scene_Battle_createAllWindows_ComboWindow','target','arPenRate','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','MP_Rate','_enemy','StatusWindowSelectableBackHide','Scene_Battle_createCancelButton','addSingleSkillCommands','processExtendTroopMembers','BattleManager_initMembers','_battlerKeyCache','addAutoBattleCommand','ActSeq_Mechanics_BtbGain','battleCamera','isPartyTpbInputtable','_currentActor','makeDamageValue','tpbCommandFight','addDebuff','CmdIconOptions','clearOnceParallelInterpreters','svActorVertCells','originalName','PostStartBattleJS','attack','PreStartBattleJS','pauseInjectAnimation','drawBackgroundRect','setLetter','Window_BattleActor_hide','_tpbChargeTime','svShadow','Game_Actor_setup','BattleManager_invokeCounterAttack','canGuard','useDigitGrouping','guardHpLifeSteal','mhp','isVisualHpGaugeDisplayed','Game_BattlerBase_param','floor','LIGHT-BULB','code','Sprite_Battler_update','createWeather','drawActorSimpleStatus','RegExp','AutoBattleBgType','QoL','DistanceAdjust','SkillItemStandardCols','forceSelect','_phase','createCommandNameWindow','addAnimationSpriteToContainer','applyItem','alive\x20opponents\x20not\x20target','_createClientArea','Reveal','_buffs','setEventCallback','getEnemyIdWithName','drawActorStateTurns','PreEndActionJS','isSideView','enemyShowParametersIfBattleTest','makeCommandList','smooth','Window_BattleLog_performAction','getAttackWeaponAnimationId','placeActorName','hasSvBattler','_autoBattleWindow','PostApplyAsTargetJS','%1EndBattleJS','PopupShiftY','_weaponImageId','sliceMin','statesWindowRect','_returnWindow','startTurn','_subject','JS\x20BATTLE\x20DEFEAT','WaitForFloat','_battleField','currentMaxValue','weaponImageId','ActSeq_Mechanics_EmulateAttackEffect','Duration','setText','isAlwaysVisible','addSkillCommands','faceWidth','dimColor2','updateStateSpriteBattleCore','moveBattlerHomeToPoint','addNewState','sortDamageSprites','_executeHpDamage','statusHelpDesc','ActSeq_Mechanics_SwapWeapon','SvBattlerSolo-%1-%2','prev\x20target','CmdTextAlign','LIGHT\x20BULB','log','_flinched','100%','_commandNameWindow','enemyNames','value1','performTpbActiveCheckSwitch','SETTINGS','loadSvActor','Targets2','STATUS','Sprite_Actor_createStateSprite','usePremadeActionSequence','isQueueOptionsMenu','HelpOptions','getHardDamageCap','drawIcon','displayChangedStates','ActSeq_Weapon_SetActiveWeapon','CalcEscapeRaiseJS','resizeWindowXPStyle','_drawTextBody','itemHit','updateCounter','createHelpWindow','_regionBattleback1','pageOffsetX','currentAction','JumpToLabel','inHomePosition','jsCritRateAsUser','ElementStatusCore','StepDistanceX','StepDistanceY','Window_BattleActor_show','makeTargetSelectionMoreVisible','pages','_requestRefresh','VisuMZ_2_BattleSystemFTB','hasStaticSvBattler','DTB','ScaleUp','motionType','changeCtbChargeTime','onEnemyCancel','isFloating','Sprite_Battler_startMove','ActSeq_Movement_WaitForOpacity','LIGHTBULB','addChildToBack','getConfigValue','setColorTone','TurnsFmt','_angleEasing','Radius','Targets','GetActionSequenceSpecialTarget','PostDamageAsUserJS','ActionCount','Game_Interpreter_PluginCommand','displayAddedStates','battlerSprites','VisuMZ_1_ElementStatusCore','debuffAdd','_svBattlerData','setupNegativeImpactFilter','callOptions','displayChangedBuffs','drawEnemyBattler','StatusWindowAttachmentFrontOffsetX','VisuMZ_2_BattleSystemOTB','ShakeFlinchDuration','sortEnemies','ActSeq_BattleLog_PopBaseLine','smoothSelect','BattleManager_startTurn','softDamageCap','createMiss','Game_Action_isForOne','Scene_Battle_createPartyCommandWindowIBS','DamageType%1','targetsForFriends','angle','onJumpEnd','BattleManager_onEscapeFailure','actorCommandCancelTPB','updateTargetPosition','start','autoBattle','frontview_ui','spriteId','_targetOpacity','addText','StyleName','_angleWholeDuration','Sprite_Actor_updateShadow','cutinExit','stateRate','ActSeq_Mechanics_StbExtraAction','match','enemyHiddenParameter','fillRect','Game_Action_evalDamageFormula','drawItemBackground','attachSpritesToDistortionSprite','_item','setupWeaponAnimation','terminate','hpAffected','makeBattleCommand','Game_Battler_onBattleEnd','gainTp','_targetSkewY','Window_SkillList_maxCols','_pagedownButton','needsSelectionBattleCore','Turns','isMagicSkill','BattleVictoryJS','ActSeq_Mechanics_WaitForEffect','battleMove','addedDebuffs','displayedParams','ApplyImmortal','ActSeq_Horror_NoiseRemove','_flashDuration','addEscapeCommand','NewPopupBottom','Letter','waitForMovement','battleCameraData','Scene_Battle_startActorCommandSelection','BattleManager_startInput','processForcedAction','substitute','_floatDuration','ActSeqImpact','_createDamageContainer','Game_Troop_setup','Scene_Battle_commandFight','CounterPlayback','Window_BattleLog_performRecovery','isForFriendBattleCore','updateOpacity','setSubject','battleAnimation','jsAccuracy','DisablePartyCmd','Game_Interpreter_command301','Window_BattleLog_displayEvasion','Game_Action_setItem','PointJS','ActSeq_Mechanics_ArmorPenetration','_dragonbonesSpriteContainer','BattleAI','mainSpriteScaleX','VisuMZ_2_PartySystem','drawDarkRect','temporaryVisibile','playEnemyDamage','AspectIcon','symbol','adjustPosition_ScaleToFit','Game_Action_isForAll','arRedFlat','collapseType','playOnceParallelTroopPage','applyBattleCoreJS','updateAction','innerHeight','waitCount','SwitchCritical','animationId','Linear','battleVoices','clearGlobalVariables','svBattlerAnchorY','battleOpacity','VisuMZ_3_SideviewBattleUI','createTargetsJS','cancelButtonText','BattleCore','ArPenFlat','ActSeq_Element_Clear','removeAnimationFromContainer','actorId','startSpin','_animation','initMembers','alive\x20actors','initVisibility','totalDmgFmt','Shadow','updateKeyboardKeys','BattleSystemCTB','selectAllActors','_motion','performRecovery','isBattlerFlipped','isOptionsCommandEnabled','tone','Parse_Notetags_Action','onRegeneratePlayStateAnimation','Window_BattleEnemy_show','cancelActorInput','requestAnimation','AGI','addCombatLogCommand','actionSplicePoint','enemyId','_actionInputIndex','Scene_Battle_update','startAttackWeaponAnimation','CombatLogIcon','updateShadowScale','_floatHeight','BattleManager_onEscapeSuccess','setActiveWeaponSet','drawTurnsRemaining','getReturnWindow','ActSeq_Projectile_Picture','Sprite_Battler_initMembers','Window_BattleLog_displayCurrentState','loadOtherActorImages','_cursorSprite','deactivate','processActorCommandCancelTPB','isOpponent','anchorX','ScaleX','hitFlat','destroy','applyHardDamageCap','inBattle','_tempEquipCheck','Scene_Battle_updateStatusWindowPosition','getItemDamageAmountLabelOriginal','Window_BattleStatus_drawItemImage','setBattlerBattleCore','canAttackBattleCore','magicSkills','clearNameTempVisibility','isCancelLifeSteal','CTB','updateBattlebackBitmap1','AutoMeleeSolo','displayReflection','CmdStyle','damageOffsetY','onEncounterBattleCore','onBattleStart','prepareBorderActor','battleInjectPrep','targetSpritePosition','stepBack','setBattlerFacePoint','endVisualCutin','_damages','PostApplyAsUserJS','comboWindowOffsetY','isForRandom','FollowTurn','setHandler','Scene_Boot_onDatabaseLoaded','hitIndex','performActionEndMembers','isMoving','_nameTempVisibleDuration','WEAPON\x20SWAP','BackColor','maxBattleMembers','createAnimationContainer','active','SkillsStatesCore','textSizeEx','VariableID','buffNameFmt','glitch','FvAniCenterScreen','Sprite_Battler_setBattler','createMultiTargetWindow','updateVisibility','disperseDamage','PostEndBattleJS','onBattleEnd','process_VisuMZ_BattleCore_DamageStyles','dying','isCTB','ActSeq_Skew_WaitForSkew','_activeWeaponSlot','addChildAt','battleAngle','getParamBuffAndStateRate','DefaultStyle','CastPhysical','updateBattlerContainer','abs','startAction','maxCols','VisuMZ_1_MainMenuCore','process_VisuMZ_BattleCore_PreBattleCommonEvent','evaded','startJump','itemEffectAddNormalState','battleCoreTpbMainPhase','StateOverlayOffsetY','performMoveToTargets','StatusWindowAttachmentBackOffsetX','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','ActSeq_Camera_FocusTarget','parallaxScrollY','_scene','floatBattler','_growEasing','flipVisualCutinVert','BattleManager_endAction_ComboWindow','autoBattleWindowRect','hpRate','toUpperCase','splice','commandSymbol','stateColor','autoSelectPriority','FlinchDistanceY','ActSeq_Animation_AttackAnimation2','Balloon','adjustWeaponSpriteOffset','COMBAT\x20LOG','angleDuration','pagedown','dimColor1','addSingleSkillCommand','initBattlePortrait','buffIconIndex','loadBitmap','isPartyCommandWindowDisabled','FocusY','enemyShowLevel','_commonEventQueue','updateWeather','updatePointAnimations','isCustomActionSequence','_active','CommandAddOptions','selectPreviousCommand','skewBattler','GRID\x20MOVE','Game_BattlerBase_eraseState','_actorWindow','loadWindowskin','selectNextActor','endAnimation','_animationSprites','Wave','drawSingleSkillCost','Scene_Battle_initialize','text','move','rate','removeBuffsAuto','hue','actorCommandWindowRect','ActSeq_BattleLog_PushBaseLine','addItemCommand','_targetGrowY','Sprite_Battler_updatePosition','ActSeq_Mechanics_FtbAction','addBattleCoreAutoBattleStartupCommand','autoBattleStart','ColorManager_mpColor','positionOffsetY','pageButtons','setActorHome','escape','gaugeLineHeight','WIDTH','PreStartActionJS','NameAlwaysVisible','updateUiContainerPosition','_homeEasing','skillId','addFightCommand','Spriteset_Battle_update','checkTpbInputOpen','_list','sort','PreApplyAsUserJS','onSelectAction','_motionType','hasSkill','setupBattleCore','getItemDamageAmountTextOriginal','requestMotionRefresh','Destination','criticalHitFlat','helpWindowRect','PreDamageAsTargetJS','textAlignment','getWtypeIdWithName','updateMain','_colorType','Window_BattleLog_popupDamage','waitForEffect','criticalDmgFlat','isETB','ActSeq_Grid_PullToTargetNode','Intensity','updatePadding','refreshMotion','createAllWindows','ActSeq_Inject_AnimationStart','isAutoBattle','setSvBattlerSprite','makeActionListAutoAttack','startActorSelection','VisuMZ_2_BattleSystemETB','applyData','isDebuffAffected','Angle','<CENTER>%1','includeState','_showWeapon','_lines','_lastRegenFrameCount','Game_Battler_clearDamagePopup','startTpbTurn','_inBattleStatusWindow','ActSeq_Grid_TraverseToNode','finishActionSet','isRightInputMode','actionBattleCoreJS','HitFlat','setBattlerMotionTrailData','isAutoBattleCommandEnabled','forceMotion','MOTIONS','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','totalHealFmt','BattleManager_setup','_enemySprites','StartTurnShow','skillItemWindowRectBorderStyle','Game_Interpreter_updateWaitMode','_battler','offsetX','changePaintOpacity','isUnderAnimation','Spriteset_Battle_updateActors','ActSeq_Target_PrevTarget','Game_Action_isForFriend','HITTYPE_CERTAIN','ActSeq_Animation_ChangeBattlePortrait','alterCost','_character','ActSeq_Movement_WaitForJump','_baseTexture','paramValueByName','_preBattleCommonEvent','makeBuffName','anchor','commandFight','hasBeenDefeatedBefore','battleJump','WaitForAnimation','onBattleStartBattleCore','applyResultSwitches','_damageContainer','ActSeq_BattleVoice_PlaySpecialLine','StatusWindowAttachmentFrontOffsetY','BattleManager_onEncounter','PortraitScaleBorderStyle','_angleDuration','SkewY','BULB','clearFreezeMotion','Game_Action_itemHit','parseForcedGameTroopSettingsBattleCore','_createCursorArea','Game_Temp_requestBalloon','startFloat','moveBattlerDistance','getDefeatedEnemies','Game_Action_clear','addPartyCommand','visibilityState','checkBattleEnd','ComboWindow_RectJS','Skill-%1-%2','_customDamageFormula','makeTargetsBattleCore','ActSeq_Mechanics_OtbOrder','jsAccuracyAsUser','PostDamageAsTargetJS','createHpGaugeSprite','gainStoredBoostPoints','attackTimesAdd','performFlinch','_action','setHelpWindowItem','isBreakStunned','DefaultDamageStyle','_battleCoreAddedElements','ActSeq_Animation_AttackAnimation','_target','BattleManager_processAbort','preparePartyRefresh','setupDesaturateImpactFilter','maxItems','isSceneBattle','ATK','guardMpLifeSteal','ANGLE','ActSeq_Mechanics_ActionEffect','displayEvasion','BravePoints','join','AdjustRect','process_VisuMZ_BattleCore_CreateRegExp','ForceExploiter','alterChange','ActSeq_Impact_Desaturate','battleEffect','\x5cC[16]%1\x5cC[0]','nextActor','VoiceLineType','isActiveTpb','MpGaugeOffsetX','moveBattlerToPoint','shift','_actionBattlers','redrawForGaugeRate','shouldHideBattleEndPopups','icons','ForceExploited','updateEffectsContainer','statesMaxWidth','getHalfActionsPTB','isBorderPortraitSpriteVisible','isArray','ActSeq_Animation_CastAnimation','globalAlpha','Game_Action_executeDamage','targetsForOpponents','onActorCancel','UNTITLED','_opacityWholeDuration','ShowCritical','Normal','itemTextAlign','onStaticEnemyBitmapLoad','autoBattleStyle','criticalDmgRate','isSceneChanging','_borderPortraitDuration','_bypass_applyBattleCoreHitRateJS','ParseSkillNotetags','hide','CastMagical','setItem','_cancelButton','ActSeq_Horror_Clear','isPreviousScene','makeUniqueNames','adjustFlippedBattlefield','onMoveEnd','TextAlign','_tempBattler','onAllActionsEnd','TargetLocation','itemEffectRecoverMp','_lastPluginCommandInterpreter','commandNameWindowDrawBackground','Scene_Map_launchBattle','processTouch','Game_BattlerBase_meetsUsableItemConditions','_makeCursorAlpha','battlelog','_forcedBattleLayout','addCustomCommands','_isBattlerFlipped','createEnemies','isPlaytest','CriticalHitMultiplier','Game_Map_battleback1Name','isAlive','SceneManager_isSceneChanging','isAnyoneMoving','FaceAway','findIndex','itemRect','BattleManager_cancelActorInput','Scene_Battle_updateBattleProcess','Window_BattleLog_pushBaseLine','isHiddenSkill','mmp','isForOneBattleCore','Sprite_Actor_updateFrame','VisuMZ_4_IconBalloons','_executedValue','createEnemyNames','ActSeq_Impact_MotionBlurScreen','pause','becomeSTBExploited','_baseY','initElementStatusCore','_targets','canAttack','AnchorX','mainSprite','addAttackCommand','isHidden','_performDamageMotion','createChildSprite','clearWeaponAnimation','setWaitMode','compareEnemySprite','ActSeq_Movement_HomeReset','createActionSequenceProjectile','open','applyGlobalCommonEventNotetags','removeStatesAuto','ActSeq_Mechanics_EtbAction','PreDamageJS','XPSpriteYLocation','normalColor','normalIcon','_battleBalloonSprites','animationWait','opacityStart','jumpBattler','STRUCT','ActionEnd','DualWield','callOkHandler','setSkill','200QUtQJY','commandName','registerDefeatedEnemy','ActSeqProjectiles','createTroopNote','sprite','_visibleDuration','AutoMeleeAoE','Game_Action_needsSelection','Spriteset_Battle_createBattleField','▼%1','VisuMZ_3_ActiveChainSkills','alive\x20actors\x20not\x20user','_skewDuration','MeleeDistance','fontSize','getSkillTypes','_lastHpDamage','drain','setGuard','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','normalHelp','FlinchDuration','DisplayAction','encounterList','linkSprite','isBattlerTargeted','drawActorBuffTurns','processAbort','Window_BattleLog_displayFailure','updateBossCollapse','transform','excludeListing','contentsOpacity','4998147YNEFIy','showAnimation','ConvertParams','setActionState','compareBattlerSprites','setBattlerFlip','_uiContainer','animationNextDelay','ParseAllNotetags','Game_Battler_startTpbTurn','States','message2','damageCounterWindowRect','Scene_Battle_selectNextCommand','isPlaying','-%1\x20MP','PortraitScale','_indent','Amp','isAnyoneInjectAnimating','placeTimeGauge','SyncBuffExpire','process_VisuMZ_BattleCore_CommonEventKeys','removeBuff','setTroopPage','position','command357','createPageButtons','updateSkew','value2','isAnyoneFloating','ActionCenteredName','applyAngleChange','ShowReflectWait','OffsetAdjust','Weapon-%1-%2','CheckActSeqProjectileVersion','getNextSubjectFromPool','Param','ActSeq_Horror_GlitchRemove','requestRefresh','DistanceY','updateLink','isBattleRefreshRequested','MIN_SAFE_INTEGER','PreApplyJS','isFriendly','forActor','CmdIconItem','getBattlePortraitOffsetY','isAtbCastingState','ConvertCount','drawActorGraphic','setHome','canBattlerMove','updateAttachmentSprites','setCursorRect','_shakeFlinchPower','createShadowSprite','repositionEnemiesByResolution','_pattern','ActSeq_Movement_BattleStep','VisuMZ_3_BattleAI','MUSIC','find','statusTextAutoBattleStyle','VisuMZ_0_CoreEngine','isForAnyone','Game_Action_setGuard','round','bossCollapse','HitRate','_targetHomeX','removeCurrentAction','_updateDuration','clearMotion','skillWindowRect','drawItemStatusXPStyle','Game_Enemy_transform','PostEndTurnJS','SceneManager_push','Game_Battler_forceAction','removeChildFromUiContainer','Override','process_VisuMZ_BattleCore_PluginParams','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','DigitGroupingDamageSprites','valueColor','Sprite_Enemy_createStateIconSprite','Game_Action_executeHpDamage','isOTB','AggroControlSystem','mpDamage','AttackAnimation','_statusType','refreshActorPortrait','setupChild','makeSuccess','requestDragonbonesAnimation','createCancelButton','pageButtonPosition','bgType','getNextDamagePopup','targetActionSet','Game_System_initialize','_underAnimationContainer','equipSlots','motionSpeed','_tempActor','jsScaleToFit','ActorOffsetY','ActSeq_Movement_HomeMoveBy','debuffHelpFmt','_targetHits','allowRandomSpeed','Window_BattleLog_clear','performEvasion','BindCommonEventKeysForGroup','ActSeq_Impact_ShockwavePoint','BattleManager_inputtingAction','_targetSkewX','_growY','isGuardWaiting','alive\x20friends\x20not\x20user','isActing','selectLast','updateCustomActionSequence','ActSeq_Grid_AnimationJsAtNode','Scene_Battle_createPartyCommandWindow','createEnemyWindow','targetDistortionSpritePosition','action','createDamageCounterWindow','ActionSequence','ReflectPlayback','endBattle','damageContainer','PreRegenerateJS','blt','gainCurrentActionsFTB','updateCancelButton','MessageWait','5UFmBzI','addMeleeReturnActionSet','setupIconTextPopup','%1Damage%2JS','lifeStealRate','isForFriend','filter','StatusWindow_RectJS','stepFlinch','drawActorIcons','startInBattleStatus','PrioritySortActive','icon','playEnemyAttack','_totalDamage','Window_BattleLog_performReflection','isAnyoneSkewing','declareGlobalVariables','applyDamageCaps','_enemyWindowMode','Window_BattleStatus_initialize','HelpAutoBattle','isAnimationShownOnBattlePortrait','_commonEventKey','VisuMZ_2_BattleSystemPTB','isTeamBased','BattleLogRectJS','Game_Action_executeHpDamage_ComboWindow','displayBattleCoreTransitionErrorMsg','ActSeq_Animation_GuardAnimation','updateGrow','FlashColor','EndBattlePopups','HpGauge','ActSeq_Mechanics_AtbGauge','ActSeq_Mechanics_Immortal','_skewWholeDuration','requestFauxAnimation','create','_targetDamage','width','removeHorrorEffect','clamp','updateEvent','_blendColor','ReflectAnimation','VisuMZ_2_AggroControlSystem','magicReflection','actorCommandAutoBattle','MUSICNOTE','_buttonText','drawItemImageListStyle','contentsBack','measureTextWidth','isDisarmLifeSteal','TRAIT_PARAM','StatusGraphic','_tpbNeedsPartyCommand','update','%1RegenerateJS','PostStartTurnJS','_inputting','Class-%1-%2','command283','canAddSkillCommand','ActorJS','CriticalDmgFlat','setupBattleCoreAspects','ActSeq_Mechanics_RemoveBuffDebuff','ActSeq_Animation_BalloonIconRange','autoMeleeSingleTargetActionSet','waitForAnimation','ActSeq_Movement_FacePoint','bitmapHeight','isDisplayEmergedEnemies','isTpbCharged','_battleCoreNoElement','ActSeq_Camera_WaitForCamera','performAttackSlot','ShowCurrentState','getNextSubject','sliceMax','ActSeq_Movement_WaitForFloat','unshift','ShowRemovedBuff','activate','ActSeq_BattleLog_DisplayAction','some','updateBattleVariables','_borderPortraitSprite','setupBattleback','parameters','refreshCursor','ShowFacesListStyle','Window_BattleLog_performEvasion','BattleManager_startBattle','rowSpacing','updateStateIconSprite','isAnyoneChangingOpacity','padding','okTargetSelectionVisibility','spell','startDamagePopup','performSTBExploiter','addBattleGridMoveCommand','SWEAT','emulateAction','autoMeleeMultiTargetActionSet','effect','Scene_Options','COBWEB','applyArmorModifiers','shouldDisperseDamage','performActionMotions','ACTOR_OFFSET_X','center','#ffffff','itemPadding','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','checkCacheKey','_battleCoreBattleStartEvent','commandStyle','border','ShowAddedState','repeats','Game_Actor_equips','12aRGglz','negativeHpLifeSteal','_ptbActionCost','performLifeSteal','JS\x20%1END\x20TURN','SvWeaponMass-%1-%2','custom','Game_BattlerBase_die','EmergeText','addOnceParallelInterpreter','ActSeq_Mechanics_EnemyEscape','_allTargets','remove','_duration','%1EndTurnJS','makeEscapeRatio','ActSeq_Movement_FaceDirection','BattleManager_endAction','preemptive','ParseStateNotetags','damagePopupPosition','CreateCutinSettings','battleSkew','apply','result','FocusX','statusDescription','addTextToCombatLog','FvAniCenterAll','ActSeq_Zoom_Scale','_padding','Scene_Battle_selectPreviousCommand','CalcEscapeRatioJS','PopupDuration','isMVAnimation','performWeaponAnimation','SwitchMissEvade','gainHalfActionsPTB','HelpEscape','popBaseLine','paySkillCost','onHomeMoveEnd','ActSeq_Mechanics_HpMpTp','Setting','ActSeq_Projectile_Animation','paramName','AllowCollapse','all\x20actors','context','FaceDirection','left','parallaxScrollX','disarmHpLifeSteal','SLEEP','base','StatusWindowAttachmentFront','executeHpDamage','wait','Filename','hasAspectData','setupTextPopup','isNegativeLifeSteal','attackAnimationIdSlot','XPActorDefaultHeight','_offsetX','indexOf','EnemyOffsetX','horzCells','emulateActionEffect','faceHeight','ActSeq_Mechanics_OnceParallel','MANUAL','battleStatusWindowAnimationContainer','pageButtonY','ATTACK','ShowMpDmg','ActSeq_Mechanics_StateTurnsChangeTo','QUESTION','traits','_enemyID','createAutoBattleWindow','_offsetY','createInnerPortrait','ExtraSettings','processEnemyModeTouchBattleCore','drawEnemyName','gaugeBackColor','itemWindowRect','addOptionsCommand','ParseEnemyNotetags','onBattleEndBattleCore','processOk','JS\x20%1START\x20ACTION','performCounter','isTickBased','requestMotion','getBattlerKeyTargetReplacement','updateEffectContainers','NameLegacy','isAutoBattleCommandAdded','isIncludedInEnemyWindow','Scene_Battle_createHelpWindow','InBattleStatus','ShowHpDmg','performReflection','WaitForAngle','_growX','SHOW_BUTTON','characterIndex','Style','textWidth','1:1','Scene_Battle_helpWindowRect','_freezeMotionData','applySoftDamageCap','normalText','ActSeq_Impact_BlueRedInvert','_regionBattleback2','face','setBackgroundType','gainFullActionsPTB','BreakShields','playSystemSound','Game_Action_makeTargets','ActSeq_Impact_MotionTrailRemove','targetObject','resetTextColor','ActSeq_Mechanics_CtbSpeed','checkSubstitute','itemLineRect','updateStaticSvBattlerFrames','removeActor','applyForcedGameTroopSettingsBattleCore','moveToStartPosition','skillItemWindowRectMiddle','_multipliers','version','type','_colorTone','isConfused','enemy','WaitForCamera','displayType','updateBattlebackBitmap','adjustPosition_ScaleUp','2263570rdjwNn','ShowMissEvasion','isAnimationPlaying','touchUI','POST-','isFlipped','iconIndex','ActSeq_Grid_AnimationTypeAtNode','startActorCommandSelection','ActSeq_Angle_WaitForAngle','isSpriteVS8dir','children','autoBattleAtStart','Sprite_Animation_targetSpritePosition','updateStyleOpacity','_growDuration','_stateSprite','Window_BattleLog_displayMiss','SvBattlerMass-%1-%2','PostStartActionJS','PosOffsetX','parallaxScrollXinvertEnemy','statusWindowRectXPStyle','processRandomizedData','battleback1Name','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','Scene_Battle_onActorCancel','missle','alterType','Game_Troop_expTotal','showHelpWindow','WaitForMovement','portraitFilename','ActSeq_Impact_ShockwaveCenterTargets','resetCounter','alterPriority','dead\x20opponents','ActionSkillMsg2','_actorCommandWindow','_damageCounterWindow','SkewX','_spriteset','setCommonEvent','setClickHandler','BattleManager_checkBattleEnd','addChildToUiContainer','isForAnyoneFocusOpponents','Pre','formula','battleCoreResumeLaunchBattle','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','_enemyMultiTargetWindow','changeBattlebacks','displayAffectedStatus','isSubjectValidForAnyoneSelect','NUM','isDrain','processBattleBalloonRequests','WaitForExit','ShakeFlinchPower','_currentAngle','changeBattlerOpacity','_homeWholeDuration','AllEnemiesText','isBigCharacter','centerFrontViewSprite','ANTI_TINT_UI','innerWidth','_doubleTouch','CriticalHitFlat','critical','Game_Action_setAttack','changeInputWindow','fight','BattleGridSystem','drawItemImageXPStyle','snapForBackground','PopupShiftX','svBattlerData','contents','_cache','ActSeq_Mechanics_BoostPointsStoreData','ActSeq_Impact_ColorBreak','_appeared','_index','hpDamageFmt','NextTurn','isAnyoneInjectAniPrepping','performAction','Game_Map_battleback2Name','_enemySprite','fontFace','drawItemStyleIcon','save','drawActorFace','changeTurnOrderByCTB','PostApplyJS','maxCommands','flashColor','AnimationID','createEnemySprite','isFrameVisible','regionId','makeTurnsText','applyBattleCoreCriticalHitRateJS','ActSeq_Animation_ItemAnimation','ClearBattleLog','getMenuImage','isSideButtonLayout','pageOffsetY','Game_Actor_makeActionList','performCastAnimation','_effectsContainer','string','TP_Flat','process_VisuMZ_BattleCore_Action_Notetags','battlerKey','Game_Action_isForRandom','NameFontSize','isCancelTriggered','switchToWeaponType','_svBattlerSprite','pow','performMagicEvasion','applyGlobal','VariableHeal','_cursorArea','extraHeight','dragonbonesData','createStateIconSprite','_shadowSprite','isAttack','updateStart','XPActorCommandLines','_forcedHomeX','Height','executeDamage','WindowWidth','ActSeq_Movement_MoveToJsPoint','NameAlwaysSelectOnly','isJumping','Window_BattleLog_displayTpDamage','basicGaugesY','isDying','testApply','Scene_Battle_startEnemySelection','addGeneralOptions','extraPositionScaledY','_actorSprites','setupActionSet','toLowerCase','createDigits','Game_BattlerBase_canAttack','isBattleTest','HelpFight','commandNameWindowDrawText','updateShadowBattleCore','updateShadow','Window_BattleActor_processTouch','waitForFloat','updateBattleProcess','isPTB','createBattleUIOffsetY','displayMpDamage','fadeShiftY','playCursor','isForOpponentBattleCore','invokeCounterAttack','_logWindow','MultiTarget','svActorHorzCells','FullActions','Scene_Map_initializeAfter','noise','faceRect','Window_BattleLog_performActionEnd','_targetIndex','TpbActiveChangeEnabled','height','setBattleZoom','Game_Battler_onBattleStart','checkExtendTroopCompatibility','drawItem','CmdIconEscape','turns','Window_BattleLog_displayActionResults','Parse_Notetags_TraitObjects','BoostPoints','_windowLayer','deadMembers','applyTargetFilters','VisuMZ_3_WeaknessDisplay','_battleBalloonQueue','forceAction','battleback2Name','needsInputWindowChange','_tpbState','compatibilityVisible','_text','displayRemovedStates','list','_targetHomeY','JS\x20%1REGENERATE','_targetFloatHeight','nextActiveWeaponSlot','_linkedSprite','obj','_endingBattle','onEncounter','resetFontSettings','revertTpbCachedActor','cameraClamp','_updateClientArea','_deathStateApplied','createSeparateDamagePopups','CommandVisible','ActSeq_Inject_WaitForInjectAni','deselect','Game_Action_itemTargetCandidates','freezeFrame','isAlwaysHidden','_colorFilter','flashDuration','clearForcedGameTroopSettingsBattleCore','_skillIDs','WaitForZoom','updateShadowPosition','ActSeq_Motion_MotionType','equips','process_VisuMZ_BattleCore_TraitObject_Notetags','uiMenuStyle','IconStypeNorm','svAnchorX','ShowActorGauge','showEnemyAttackAnimation','isOpenAndActive','SkipPartyCmd','ARRAYJSON','_homeX','_states','getBattlePortraitFilename','\x5cI[%1]\x5cHEXCOLOR<%3>%2','_hideAllIcons','VisuMZ_2_BattleSystemCTB','Sprite_Actor_initMembers','message1','unchanged','Sprite_Actor_setActorHome','Scene_Battle_onEnemyCancel','battleZoom','createStatesWindow','_updateColorFilter','_itemWindow','head','onEscapeSuccess','_statesWindow','Sprite_Battler_damageOffsetY','ActSeq_BattleLog_Refresh','chantStyle','ActSeq_Set_SetupAction','MUSIC-NOTE','displayCritical','setBalloonPose','_homeY','selectNextCommandTpb','close','clearBattleRefreshRequest','addBattleCoreAutoBattleStyleCommand','opponentsUnit','CheckSkillCommandShowSwitches','statusWindowRect','alterBreakShield','priority','_actor','gaugeRate','VariableDmg','extendTroopMembers','isClicked','format','statusWindowRectDefaultStyle','retrieveBattleBalloon','CmdIconAutoBattle','logWindowRect','BaseTroopIDs','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','MAXHP','atbInterrupt','ActSeq_Mechanics_EmulateSkillEffect','drawActorName','displayCurrentState','NameAlwaysHidden','PreStartTurnJS','needsSelection','applyVariance','Scene_Battle_stop','#%1','setSTBExploited','processAnimationRequests','scope','mainFontSize','BattleEndEvent','battleSys','frameCount','characterName','canGuardBattleCore','displayItemMessage','Scene_ItemBase_applyItem','ActSeq_Mechanics_ActiveChainInputDisable','VisuMZ_2_BattleGridSystem','front\x20center','Game_Interpreter_command283','_hpGaugeSprite','ActSeq_Impact_TimeStop','Game_Battler_clearMotion','Game_Action_executeMpDamage','restore','buff','spinBattler','ActSeq_Mechanics_BoostPointsChange','WaitCount','guardSkillId','ActSeq_Impact_TimeScale','canInput','+%1\x20MP','_skillWindow','_partyCommandWindow','CriticalColor','VisuMZ_3_VisualCutinEffect','getBattlePortrait','displayActionResults','Scene_Battle_startActorSelection','Sprite_Enemy_update','setupCriticalEffect','ShowPortraits','VisuMZ_3_FrontviewBattleUI','updateBitmap','status','drawBattlerData','MpGaugeOffsetY','_callSceneOptions','isOpen','pop','ActSeq_Movement_Spin','initBattleCore','updateSpin','waitForNewLine','Scene_Battle_commandEscape','ShowPortraitsBorderStyle','\x5cC[0]','getDamageStyle','BattleManager_startAction','Scene_Party','drawActorClass','processCancel','finishActorInput','updatePageButtonVisibility','calcWindowHeight','item','isDead','_weaponSprite','svBattlerAnchorX','startGrow','isAnyoneGrowing','randomInt','isImmortal','setupShockwaveImpactFilter','isDamagePopupRequested','BattleCmdList','commandOptions','_updateCursorFilterArea','all\x20enemies','FilenameJS','StartTurnWait','forceWeaponAnimation','findTargetSprite','isMeleeSingleTargetAction','return\x200','Scene_Battle_startPartyCommandSelection','actorCommandEscape','getCommonEventIdWithName','TpGaugeOffsetY','AutoBattleCancel','inBattleStatusWindowRect','addSkillTypeCommand','Scene_Battle_logWindowRect','ForceDeath','ActSeq_Camera_Offset','updateShakeFlinch','PostApply%1JS','MotionSpeed','isAffectedByBreakShield','setHelpWindow','destroyDamageSprite','%1\x20Aspect','isInputting','WaitForEffect','_partyWindow','HomePosJS','drawLineText','itemCri','processTurn','isTpbReady','graphicType','processDrawEnemyBattler','freezeMotion','ActSeq_Movement_WaitForSkew','ActSeq_Impact_MotionBlurTarget','stepForward','evalDamageFormulaBattleCore','enabled','evade','currentSymbol','drawItemActorFace','isDTB','hitText','MotionType','Scene_Battle_itemWindowRect','pattern','clearAllVisualCutins','_forceAction','clearTargetBattlerKey','_updateTargetValue','drawItemImagePortraitStyle','getBattlerKeyTargets','Game_Action_testApply','createJS','getFullActionsPTB','subject','parent','_back1Sprite','battleLayoutStyle','stop','drawItemActorSprite','BattleManager_selectNextCommand','Strength','drawActorStateData','opacity','buffRemove','stypeId','Sprite_Actor_setBattler','Window_BattleLog_performDamage','battleUIOffsetY','cameraOffsetDuration','addWindow','EscapeSuccessJS','ShowPopup','Sprite_Damage_createChildSprite','auto','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','process_VisuMZ_BattleCore_BaseTroops','LifeStealRegExp','shadow','makeSpeed','NameDamageVisibility','9ufKYhg','skillTypes','Sprite_Enemy_initVisibility','findSymbolExt','comboWindowOffsetX','loadPicture','flipVisualCutinHorz','requestBattleBalloon','powerDownColor','WaitCount1','Game_Action_updateLastTarget','processDefeat','dead','???','performDamage','inputtingAction','partyCommandWindowRectBorderStyle','battleInjectAni','actionEffect','_flipScaleX','isAnyBattleBalloonPlaying','refresh','startInput','CastAnimation','isAnyoneJumping','Name','buffHelpFmt','opacitySpeed','jsCritRateAsTarget','displayHpDamage','enemyShowParametersAlways','battlerName','ActSeq_Grid_ActionAnimationAtNode','ALL_ACTORS','ENEMY_OFFSET_Y','StateID','extraPositionY','_defeatedEnemies','Mute','42163GYgnby','statusWindowRectBorderStyle','missile','processHandling','Game_BattlerBase_allIconsIBS','CriticalHitRateJS','AutoNotetag','pushBaseLine','makeTargetsBattleCoreJS','random','displayMiss','startWeaponAnimation','Window_ActorCommand_initialize','setBattleCameraPoint','commandEscape','_waitMode','Window_BattleLog_performMagicEvasion','_enemies','createRateJS','updateCollapse','_dimmerSprite','createAnimationSprite','_animationCount','VisuMZ_3_BattleVoices','CoreEngine','updatePositionBattleCore','bind','startSkew','timeScale','_tpbSceneChangeCacheActor','_growWholeDuration','cancelMpLifeSteal','createContents','createLowerLayer','isForAnyoneFocusFriends','ActSeq_Angle_Reset','_pageupButton','isSkewing','Elements','tpbActorSwitchConditionsMet','JS\x20%1START\x20BATTLE','WaitForNewLine','autoSelect','weapons','updateLastTarget','attackSkillId','Sprite_Battler_damageOffsetX','Game_Battler_onTurnEnd','battleCorePreBattleCommonEvent','BattleManager_abort','startHomeMove','setupBattlebackBattleCore','VisuMZ_4_BreakShields','counterAttack','removeImmortal','ActSeq_Movement_MoveToTarget','hpHealingFmt','isSkillItemWindowsMiddle','GetParamIcon','\x5cI[%1]%2','_borderPortraitTargetX','frontviewSpriteY','ShowCounterWait','troop','maxLines','createInnerSprite','FrontViewSelect','Game_Action_setSubject','AnchorY','eraseState','trim','visualCutinPortraitFilename','ActSeq_BattleLog_WaitForBattleLog','aliveMembers','updateFlip','_actorMultiTargetWindow','SmoothImage','Game_Action_itemEffectAddNormalState','duration','select','pha','Game_Interpreter_terminate','Window_Options_addGeneralOptions','onDisabledPartyCommandSelection','onEnemyOk','isSkipPartyCommandWindow','setupHpGaugeSprite','_endBattle','addImmortal','ShowHide','MDF','ActSeq_Grid_AnimationIDAtNode','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','value','minimumStayDuration','ShowCounter','getLastHpDamage','drawStates','removedBuffs','partyCommandWindowRectDefaultStyle','Sprite_Battler_setHome','Window_BattleLog_performSubstitute','gainHp','PreApplyAsTargetJS','isActionSelectionValid','frameDelay','_effectDuration','parallaxHueEnemyModifier','command236','SideviewSelect','EscapeSuccess','drawingAreaWidth','PostEndActionJS','Game_BattlerBase_addNewState','Enable','RevertAngle','getBattlerFromKey','_onceParallelInterpreters','isCertainHit','MaxMP','setTargetBattlerKey','sleep','Actor-%1-%2','ParseItemNotetags','performJump','performMoveToPoint','createActors','windowPadding','getDragonbones','ActSeq_Cutin_WaitForExit','call','LOVE','ZZZ','ActSeq_Animation_ShowAnimationJS','_damagePopupArray','animation','SKILLS','ActSeq_Grid_AddPassiveStatesToNode','onActorOk','svBattlerName','isNameTemporarilyVisible','checkShowHideSwitchNotetags','refreshBattlerMotions','setupZoomBlurImpactFilter','isBattleMember','VisuMZ_2_WeaponSwapSystem','battleEnd','selectAllEnemies','addBattlerBuffsDebuffs','_stateIconSprite','map','loop','BattleManager_processDefeat','isBattleCoreTargetScope','+%1','helpAreaBottom','Scene_Battle_updateCancelButton','_actions','Scene_Map_updateCallMenu','_createEffectsContainer','JSON','TextFmt','Game_Action_apply','Armor-%1-%2','Window_ActorCommand_setup','setMoveEasingType','param','isNextScene','drawDebuffs','updateBattleBalloons','Game_Battler_regenerateAll','swapEnemyIDs','colSpacing','applyImmortal','startInjectAnimation','MAXMP','gainCurrentActionsETB','buffColor','ScaleY','_fauxAnimationSprites','_forActor','statusText','ActSeq_Mechanics_EmulateGuardEffect','motionIdle','current\x20target','SkillID','Scene_Battle_onEnemyOk','setVisibleUI','retreat','BattleLog','getAttackMotion','_visualHpGauge_JustDied','drawTextEx','CheckMapBattleEventValid','attackAnimationId1','clear','setBlendColor','meetsUsableItemConditions','IconIndex','refreshDimmerBitmap','nameY','NameAsTarget','undecided','skew','portraitFlipHorz','OffsetY','friendsUnit','getItemDamageAmountTextBattleCore','MotionFrameWait','pageup','walk','ActSeq_Animation_BalloonAnimation','chant','Game_Action_isForAliveFriend','alive\x20enemies','getBattlePortraitOffsetX','VisuMZ_3_ActSeqCamera','-%1','_statusWindow','createEffectActionSet','createBattleFieldBattleCore','callNextMethod','ChargeRate','updateSelectionEffect','gaugeX','numRepeats','EscapeFailureJS','isOptionsCommandAdded','_jumpHeight','ActSeq_Mechanics_AnalyzeWeakness','hpDamage','ActSeq_Animation_WaitForAnimation','skills','itemLifeStealRate','drawParamData','sideview_ui','setBattlePortrait','Sprite_Enemy_updateBossCollapse','ShowTpDmg','Window_BattleLog_popBaseLine','performSubstitute','ShowRemovedState','drawText','createBattleField','_frame','ActSeq_Inject_AnimationEnd','checkSceneBattleTransitionable','currentClass','_additionalSprites','isSkill','_jumpWholeDuration','\x5cHEXCOLOR<%1>','_immortal','CreateActionSequenceTargets','AllowRandomSpeed','Actor','singleSkill','ActSeq_Movement_HomeMoveToTarget','lineHeight','origin','partyCommandWindowRect','default','_battlerName','alive\x20friends','ShowSubstitute','updateDuration','softDamageCapRate','createAttachmentSprites','_selectionEffectCount','StateIconOffsetX','Status\x20is\x20currently\x20normal.','CriticalDuration','Window_BattleEnemy_hide','damageText','parseLocalizedText','options','ActSeq_Animation_SkillAnimation','damage','HpGaugeOffsetX','states','createBattleUIOffsetX','onGrowEnd','_drawTextOutline','_bypassCanCounterCheck','OffsetX','Sprite_SvEnemy','battlerHue','processPostBattleCommonEvents','updateFloat','updatePosition','_battlePortrait','_commonEventIDs','createKeyJS','startIcon','Game_BattlerBase_initMembers','updateStatusWindowPosition','Scene_Options_maxCommands','_effectType','endIcon','meetsSelectFrontviewActorConditions','isBusy','updateBattlebackBitmap2','popupDamage','passiveText','_stateTurns','ActSeq_Mechanics_AddState','alive\x20actors\x20not\x20target','createMultiTargetWindows','Game_Party_removeActor','callUpdateHelp','Window_Options_statusText','isForAliveFriend','ActSeq_Movement_Jump','getAspectData','iconHeight','EnemyOffsetY','addBattlerStates','_skewEasing','VisuMZ_3_ActSeqImpact','ArPenRate','jump','getChildIndex','isGrowing','special','displayTpDamage','BattleManager_processVictory','setEnemyWindowMode','Parse_Notetags_Targets','debuffNameFmt','exit','ActSeq_Movement_WaitForMovement','SlotID','battleCommandIcon','ShowSubstituteWait','isCommonEventReserved','setBattleCameraOffset','isGuardLifeSteal','applyEasing','Buffs','endInBattleStatus','actor%1-portrait','cancelHpLifeSteal','changeAtbChargeTime','pageButtonX','_floatWholeDuration','reverse','_motionSpeed','ActSeq_Movement_HomeMoveToJsPoint','guard','_jumpDuration','ParseActorNotetags','clearFreezeMotionForWeapons','isTurnBased','textAlign','makeHpDamageText','alive\x20friends\x20not\x20target','BgType','minimumHits','_homeDuration','ActSeq_Horror_TVCreate','WaitCount2','selectSymbol','lastCommandSymbol','_battleCoreBattleResumeAfter','isMagical','_opacityEasing','requestBalloon','ActSeq_Grid_MoveTargetsInDirection','isTpbMainPhase','isForDeadFriend','Mechanics','Damage','noSimilarSTypes','LIGHT','VisualCutinEffect','JS\x20ESCAPE\x20FAILURE','PostRegenerateJS','Game_Action_numRepeats','isItem','ActSeq_Movement_Float','setActiveWeaponSlot','placeStateIcon','repositionCancelButtonBorderStyle','$target','updateCommandNameWindow','Scene_Map_initialize','Sprite_AnimationMV_updatePosition','CheckVisibleBattleNotetags','setHalfActionsPTB','guardLifeSteal','ShowWeapon','updateAttachedSprites','TpbGaugeOffsetX','removeBattleBalloon','resizeWindowBorderStyle','Formula','attackMotions','allIcons','updatePhase','notFocusValid','getDualWieldTimes','_emptyBitmap','isTimeActive','debuffValueFmt','_namesCount','hardDamageCap','ARRAYSTRUCT','drawTextTopAligned','Scene_Battle_createEnemyWindow','Window_BattleLog_displayCritical','_branch','turnCount','arPenFlat','damageOffsetX','applyFreezeMotionFrames','stateHelpFmt','Debuffs','createUIContainer','drawComboText','_reflectionTarget','startShakeFlinch','blockWidth','startVisualCutin','isDeathStateAffected','weaponTypes','currentValue','smoothness','StartName','inputting','Window_PartyCommand_initialize','checkShowHideSkillNotetags','_targetX','PartyCmd','battleCommandName','StateIconOffsetY','battleSpriteSkew','isAtbChargingState','JS\x20BATTLE\x20VICTORY','endAction','isFightCommandEnabled','clearBattleCoreData','getColor','command119','_backAttachmentSprite','_interpreter','_methods','updateWaitMode','performCollapse','_updateFilterArea','damageFlat','isBypassDamageCap','ConvertActionSequenceTarget','iconText','HP_Rate','skill','Targets1','ConfigManager_makeData','hitsHealFmt','reduce','isPhysical','_angleRevertOnFinish','View\x20battle\x20member\x20status.','negativeMpLifeSteal','CalcActionSpeedJS','weatherPower','canMove','isNextSceneBattleTransitionable','isActor','MAT','svAnchorY','battlerSmoothImage','_targetOffsetX','replace','slices','multiTargetWindowRect','addedBuffs','ActSeq_Impact_ZoomBlurPoint','ActorCmd','balloonId','helpWindowRectBorderStyle','state','members','windowAreaHeight','setAttack','_lastEnemy','makeData','_baseX','targetObjects','closeBattleActorWindow','%1StartTurnJS','_attackAnimationId','wholeActionSet','filters','ActSeq_Grid_AddTriggerToNode','ResetFocus','paintOpacity','attackAnimationId2','drawActorBuffRates','BattleManager_endBattle','ForceRandom','isCustomBattleScope','isStatusAffected','isBattleFlipped','isForAll','registerCommand','setLastBattleSkill','createDamageSprite','updateFrame','mpHealingFmt','AsTarget','createActorCommandWindowBattleCore','setBattleAngle','isCurrentItemEnabled','parse','addChild','15cQiBNg','_waitCount','doesPageHaveOnceParallelStart','isSelected','DefeatEvent','TpGaugeOffsetX','VisuMZ_4_CombatLog','worldTransform','ActSeq_Motion_PerformAction','_totalHits','changeWeather','actionsFmt','isForNotUser','FvAniEachTarget','battler','WaitForEntrance','enemyMpGaugeRate','command339','updateStateSprite','isItemCommandEnabled','isChanting','addStatusCommand','traitObjects','reserveCommonEvent','lastFilename','performAttack','setupDamagePopup','changeCtbCastTime','isAnyoneSpinning','_escapeRatio','Scene_Battle_createAllWindowsIBS','displayStartMessages','hitType','isForOne','offsetY','toString','mainSpriteWidth','portrait','Game_Action_isForOpponent','AS\x20USER','mpColor','applyBattleCoreHitRateJS','isWaiting','JS\x20ESCAPE\x20SUCCESS','updateHpGaugePosition','isPreviousSceneBattleTransitionable','performActionStart','isNonSubmenuCancel','makeDeepCopy','Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','extraPositionX','processBorderActor','_jumpMaxHeight','_createCursorSprite','swing','StatusWindow_BgType','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','setFrame','thrust','ActSeq_Element_NullElements','ACTOR_OFFSET_Y','damagePopupOffsetY','battleCommands','USER-DEFINED\x201','_cacheTextWidth','refreshStatusWindow','performShakeFlinch','processVictory','Scene_Battle_partyCommandWindowRect','makeActions','battleUIOffsetX','waitForOpacity','Game_BattlerBase_canGuard','scale','CastCertain','ActSeq_Motion_FreezeMotionFrame','placeGauge','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','clearBattleBalloons','_wtypeIDs','drawItemActorSvBattler','putActiveBattlerOnTop','drawActorLevel','EscapeFail','repeatTargets','ActSeq_Set_WholeActionSet','battleMembers','skewDuration','concat','WaitForProjectile','openBattleActorWindow','displayFailure','startMove','makeAutoBattleActions','ActSeq_Target_NextTarget','DamageDisplay','dead\x20friends','enemyStatus','getStypeIdWithName','Users','Window_BattleLog_performActionStart','victory','battleSpin','_aspectData','playOnceParallelInterpreter','coreEngineRepositionEnemies','EasingType','_displayBattleCoreTransitionErrorMsg','TpbGaugeOffsetY','createString','checkAutoCustomActionSequenceNotetagEffect','Enemy','setupFont','increaseHits','BattleStartEvent','gainMp','Sprite_Battler_updateMain','ShowEnemyGauge','VisuMZ_1_SkillsStatesCore','isBTB','ChangeOrderBy','VarianceFormulaJS','SILENCE','isEscapeCommandEnabled','Mirror','SkillItemBorderCols','clearBattlerMotionTrailData','setStateTurns','_buffTurns','clearActiveWeaponSlot','createStateSprite','portraitFlipVert'];_0x19fb=function(){return _0x259a16;};return _0x19fb();}Sprite_SvEnemy['prototype']=Object[_0x29c7b3(0x57e)](Sprite_Actor[_0x29c7b3(0xc03)]),Sprite_SvEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0xba3)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x1a0)]=function(_0x56c583){const _0x180049=_0x29c7b3;Sprite_Actor[_0x180049(0xc03)]['initialize'][_0x180049(0x8d6)](this,_0x56c583),this[_0x180049(0xaa0)]['x']=-0x1,this[_0x180049(0x677)][_0x180049(0xaa0)]['x']=-0x1;},Sprite_SvEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x504)]=function(){},Sprite_SvEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x65b)]=function(){},Sprite_SvEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x3a1)]=function(_0x377801){},Sprite_SvEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x704)]=function(){},Sprite_SvEnemy['prototype'][_0x29c7b3(0x749)]=function(){},Sprite_SvEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0xa69)]=function(){const _0x590e71=_0x29c7b3;this[_0x590e71(0x677)]['visible']=![];},Sprite_SvEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x7b6)]=function(){const _0x4f5213=_0x29c7b3;Sprite_Battler[_0x4f5213(0xc03)][_0x4f5213(0x7b6)]['call'](this);const _0x528993=this[_0x4f5213(0x778)][_0x4f5213(0x8df)]();this[_0x4f5213(0x95a)]!==_0x528993&&(this[_0x4f5213(0x95a)]=_0x528993,this[_0x4f5213(0x150)]['bitmap']=ImageManager[_0x4f5213(0x235)](_0x528993)),this[_0x4f5213(0x150)]&&this[_0x4f5213(0x150)][_0x4f5213(0xc2a)]&&this[_0x4f5213(0x3e8)]&&(this[_0x4f5213(0x150)][_0x4f5213(0xc2a)][_0x4f5213(0x207)]!==this[_0x4f5213(0x3e8)][_0x4f5213(0xa2a)]()&&(this['_mainSprite'][_0x4f5213(0xc2a)]['smooth']=this['_battler'][_0x4f5213(0xa2a)]()));},Sprite_SvEnemy[_0x29c7b3(0xc03)]['retreat']=function(){},Sprite_SvEnemy[_0x29c7b3(0xc03)]['startMove']=function(_0x5417ca,_0x1edcaa,_0x141e17){const _0x130f9c=_0x29c7b3;if(this[_0x130f9c(0x813)])this[_0x130f9c(0x813)][_0x130f9c(0xab3)](_0x5417ca,_0x1edcaa,_0x141e17);},Sprite_SvEnemy['prototype']['refreshMotion']=function(){const _0x4a202b=_0x29c7b3,_0xd4d27c=this[_0x4a202b(0x778)];if(_0xd4d27c){const _0x4cb23f=_0xd4d27c[_0x4a202b(0x170)]();if(_0xd4d27c[_0x4a202b(0x7f1)]()||_0xd4d27c[_0x4a202b(0x546)]())this[_0x4a202b(0xb9b)]('walk');else{if(_0x4cb23f===0x3)this[_0x4a202b(0xb9b)](_0x4a202b(0x839));else{if(_0x4cb23f===0x2)this[_0x4a202b(0xb9b)](_0x4a202b(0x8cd));else{if(_0xd4d27c[_0x4a202b(0xa6b)]())this[_0x4a202b(0xb9b)](_0x4a202b(0x928));else{if(_0xd4d27c[_0x4a202b(0x16e)]()||_0xd4d27c[_0x4a202b(0x544)]())this[_0x4a202b(0xb9b)](_0x4a202b(0x9b0));else{if(_0x4cb23f===0x1)this['startMotion'](_0x4a202b(0xb7b));else{if(_0xd4d27c[_0x4a202b(0x6f6)]())this[_0x4a202b(0xb9b)](_0x4a202b(0x34b));else _0xd4d27c[_0x4a202b(0xbfe)]()?this[_0x4a202b(0xb9b)](_0xd4d27c['svBattlerData']()[_0x4a202b(0x90b)]||_0x4a202b(0x926)):this[_0x4a202b(0xb9b)](_0xd4d27c[_0x4a202b(0x6b5)]()[_0x4a202b(0x90b)]||_0x4a202b(0x926));}}}}}}}},Sprite_SvEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x24a)]=function(){const _0x4ff532=_0x29c7b3;return this[_0x4ff532(0x813)]?this[_0x4ff532(0x813)][_0x4ff532(0x616)]===0x0&&this['parent'][_0x4ff532(0x627)]===0x0:!![];},Sprite_SvEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x89e)]=function(){},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x674)]=Sprite_Animation[_0x29c7b3(0xc03)][_0x29c7b3(0x32a)],Sprite_Animation['prototype'][_0x29c7b3(0x32a)]=function(_0x4c7f78){const _0x29411e=_0x29c7b3;return _0x4c7f78['_distortionSprite']?this[_0x29411e(0x54c)](_0x4c7f78):VisuMZ[_0x29411e(0x2e2)][_0x29411e(0x674)][_0x29411e(0x8d6)](this,_0x4c7f78);},Sprite_Animation['prototype'][_0x29c7b3(0x54c)]=function(_0x21d078){const _0x2c1d92=_0x29c7b3;let _0x472e0c=_0x21d078['x'],_0x2a31e8=_0x21d078['y'],_0x45924e=_0x21d078['height'],_0x1d3232=_0x21d078['_distortionSprite']['scale']['y'];_0x21d078['x']=_0x21d078['_baseX']+_0x21d078['extraPositionX'](),_0x21d078['y']=_0x21d078['_baseY']+_0x21d078[_0x2c1d92(0x851)](),_0x21d078[_0x2c1d92(0x719)]*=_0x1d3232;let _0x3933eb=VisuMZ['BattleCore']['Sprite_Animation_targetSpritePosition'][_0x2c1d92(0x8d6)](this,_0x21d078);return _0x21d078['x']=_0x472e0c,_0x21d078['y']=_0x2a31e8,_0x21d078[_0x2c1d92(0x719)]=_0x45924e,_0x3933eb;},Sprite_Animation['prototype'][_0x29c7b3(0x3eb)]=function(){const _0x5300fd=_0x29c7b3;if(this[_0x5300fd(0xb51)])return![];return this[_0x5300fd(0x2e8)]&&this[_0x5300fd(0x2e8)]['name']&&this[_0x5300fd(0x2e8)]['name'][_0x5300fd(0x290)](/<UNDER>/gi);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x9d6)]=Sprite_AnimationMV[_0x29c7b3(0xc03)][_0x29c7b3(0x975)],Sprite_AnimationMV['prototype'][_0x29c7b3(0x975)]=function(){const _0x3d4540=_0x29c7b3;VisuMZ['BattleCore']['Sprite_AnimationMV_updatePosition'][_0x3d4540(0x8d6)](this);if(!SceneManager[_0x3d4540(0x429)]())return;if(this[_0x3d4540(0x2e8)]['position']===0x3)this['x']=Math[_0x3d4540(0x50f)](Graphics['boxWidth']/0x2),this['y']=Math[_0x3d4540(0x50f)](Graphics[_0x3d4540(0x132)]/0x2);else{if(this['battleStatusSprite'])return;}},Sprite_AnimationMV['prototype'][_0x29c7b3(0x3eb)]=function(){const _0x226688=_0x29c7b3;if(this[_0x226688(0xb51)])return![];return this[_0x226688(0x2e8)]&&this[_0x226688(0x2e8)][_0x226688(0x161)]&&this[_0x226688(0x2e8)][_0x226688(0x161)]['match'](/<UNDER>/gi);},Sprite_Damage[_0x29c7b3(0xc03)][_0x29c7b3(0x3b3)]=function(_0xc0fb14){const _0x53cd24=_0x29c7b3,_0x980a63=_0xc0fb14[_0x53cd24(0x530)]()||_0xc0fb14[_0x53cd24(0x5ee)]();if(_0x980a63['missed']||_0x980a63[_0x53cd24(0x35a)])this[_0x53cd24(0x3bd)]=0x0,this[_0x53cd24(0x27a)]();else{if(_0x980a63[_0x53cd24(0x299)])this['_colorType']=_0x980a63[_0x53cd24(0x93a)]>=0x0?0x0:0x1,this[_0x53cd24(0x6fe)](_0x980a63[_0x53cd24(0x93a)]);else _0xc0fb14[_0x53cd24(0x475)]()&&_0x980a63['mpDamage']!==0x0&&(this[_0x53cd24(0x3bd)]=_0x980a63[_0x53cd24(0x526)]>=0x0?0x2:0x3,this[_0x53cd24(0x6fe)](_0x980a63[_0x53cd24(0x526)]));}_0x980a63['critical']&&this[_0x53cd24(0x7b3)]();},Sprite_Damage[_0x29c7b3(0xc03)][_0x29c7b3(0xb10)]=function(_0x3e74f3){},Sprite_Damage['prototype'][_0x29c7b3(0x6fe)]=function(_0x41109f){const _0x2e1a84=_0x29c7b3;let _0x1e2c39=this[_0x2e1a84(0xac4)](_0x41109f);const _0x51ab54=this[_0x2e1a84(0x4b7)](),_0x5b0d51=Math[_0x2e1a84(0x1ec)](_0x51ab54*0.75);for(let _0x3037ba=0x0;_0x3037ba<_0x1e2c39[_0x2e1a84(0xba7)];_0x3037ba++){const _0xcf4e9=this[_0x2e1a84(0x491)](_0x5b0d51,_0x51ab54);_0xcf4e9['bitmap'][_0x2e1a84(0x946)](_0x1e2c39[_0x3037ba],0x0,0x0,_0x5b0d51,_0x51ab54,_0x2e1a84(0x5cb)),_0xcf4e9['x']=(_0x3037ba-(_0x1e2c39[_0x2e1a84(0xba7)]-0x1)/0x2)*_0x5b0d51,_0xcf4e9['dy']=-_0x3037ba;}},Sprite_Damage[_0x29c7b3(0xc03)][_0x29c7b3(0xac4)]=function(_0x232a86){const _0x3bca05=_0x29c7b3;let _0x179e88=Math[_0x3bca05(0x355)](_0x232a86)[_0x3bca05(0xa7a)]();this[_0x3bca05(0x1e7)]()&&(_0x179e88=VisuMZ['GroupDigits'](_0x179e88));const _0xa298be=VisuMZ[_0x3bca05(0x2e2)][_0x3bca05(0xc14)][_0x3bca05(0x9c7)];let _0x1533ad='',_0x59b29e='';switch(this['_colorType']){case 0x0:_0x1533ad=_0xa298be[_0x3bca05(0x6bc)]||_0x3bca05(0x92d),_0x59b29e=TextManager['hp'];if(_0x232a86===0x0)_0x1533ad='%1';break;case 0x1:_0x1533ad=_0xa298be[_0x3bca05(0x88c)]||_0x3bca05(0x8ee),_0x59b29e=TextManager['hp'];break;case 0x2:_0x1533ad=_0xa298be['mpDamageFmt']||_0x3bca05(0x4d9),_0x59b29e=TextManager['mp'];break;case 0x3:_0x1533ad=_0xa298be[_0x3bca05(0xa50)]||_0x3bca05(0x7aa),_0x59b29e=TextManager['mp'];break;}return _0x1533ad[_0x3bca05(0x77d)](_0x179e88,_0x59b29e)[_0x3bca05(0x89a)]();},Sprite_Damage['prototype']['useDigitGrouping']=function(){const _0x3daa8c=_0x29c7b3;return Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x3daa8c(0x86c)][_0x3daa8c(0xc14)][_0x3daa8c(0x1f4)][_0x3daa8c(0x520)]:![];},Sprite_Damage[_0x29c7b3(0xc03)][_0x29c7b3(0x7b3)]=function(){const _0x1b2163=_0x29c7b3,_0x5ab210=VisuMZ[_0x1b2163(0x2e2)]['Settings'][_0x1b2163(0x9c7)];_0x5ab210[_0x1b2163(0x7ad)]=_0x5ab210['CriticalColor']||[0x0,0x0,0x0,0x0],this['_flashColor']=_0x5ab210['CriticalColor'][_0x1b2163(0x14e)](0x0),this[_0x1b2163(0x2aa)]=_0x5ab210[_0x1b2163(0x963)]||0x1;},Sprite_Damage[_0x29c7b3(0xc03)][_0x29c7b3(0x612)]=function(_0x56f31e,_0xc7c5f8){const _0x514b9d=_0x29c7b3;this['_flashColor']=_0xc7c5f8[_0x514b9d(0x6c9)]||[0x0,0x0,0x0,0x0],this[_0x514b9d(0xb5a)]=JsonEx[_0x514b9d(0xa87)](this[_0x514b9d(0xb5a)]),this[_0x514b9d(0x2aa)]=_0xc7c5f8[_0x514b9d(0x745)]||0x0;const _0x53344f=this[_0x514b9d(0x4b7)](),_0xd13be5=Math[_0x514b9d(0x1ec)](_0x53344f*0x1e),_0x35735e=this[_0x514b9d(0x491)](_0xd13be5,_0x53344f);_0x35735e[_0x514b9d(0xc2a)]['textColor']=ColorManager[_0x514b9d(0xa0d)](_0xc7c5f8[_0x514b9d(0x16d)]),_0x35735e[_0x514b9d(0xc2a)][_0x514b9d(0x946)](_0x56f31e,0x0,0x0,_0xd13be5,_0x53344f,'center'),_0x35735e['dy']=0x0;},Sprite_Damage['prototype'][_0x29c7b3(0x55a)]=function(_0x32f1ee,_0x3abbfa,_0x27bdb3){const _0x50df3b=_0x29c7b3,_0x18fb9f=Math[_0x50df3b(0xbaf)](this['fontSize'](),ImageManager[_0x50df3b(0x98e)]),_0x169394=Math[_0x50df3b(0x1ec)](_0x18fb9f*0x1e),_0x379518=this[_0x50df3b(0x491)](_0x169394,_0x18fb9f),_0x594e28=ImageManager['iconWidth']/0x2,_0x1ab484=_0x379518[_0x50df3b(0xc2a)]['measureTextWidth'](_0x3abbfa+'\x20');_0x379518[_0x50df3b(0xc2a)][_0x50df3b(0x16d)]=ColorManager[_0x50df3b(0xa0d)](_0x27bdb3[_0x50df3b(0x16d)]),_0x379518[_0x50df3b(0xc2a)][_0x50df3b(0x946)](_0x3abbfa,_0x594e28,0x0,_0x169394-_0x594e28,_0x18fb9f,_0x50df3b(0x5cb));const _0x12a640=Math[_0x50df3b(0x50f)]((_0x18fb9f-ImageManager[_0x50df3b(0x98e)])/0x2),_0x228505=_0x169394/0x2-ImageManager[_0x50df3b(0xb33)]-_0x1ab484/0x2+_0x594e28/0x2,_0x118a49=ImageManager['loadSystem']('IconSet'),_0x3b2893=ImageManager[_0x50df3b(0xb33)],_0x27bf19=ImageManager[_0x50df3b(0x98e)],_0x5f01fa=_0x32f1ee%0x10*_0x3b2893,_0x1511a9=Math[_0x50df3b(0x1ec)](_0x32f1ee/0x10)*_0x27bf19;_0x379518[_0x50df3b(0xc2a)][_0x50df3b(0x554)](_0x118a49,_0x5f01fa,_0x1511a9,_0x3b2893,_0x27bf19,_0x228505,_0x12a640),this[_0x50df3b(0xb5a)]=_0x27bdb3['flashColor']||[0x0,0x0,0x0,0x0],this[_0x50df3b(0xb5a)]=JsonEx[_0x50df3b(0xa87)](this[_0x50df3b(0xb5a)]),this['_flashDuration']=_0x27bdb3['flashDuration']||0x0,_0x379518['dy']=0x0,_0x27bdb3[_0x50df3b(0x3e9)]&&(_0x379518['x']+=_0x27bdb3['offsetX']),_0x27bdb3['offsetY']&&(_0x379518['dy']+=_0x27bdb3[_0x50df3b(0xa79)]);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x825)]=Sprite_Damage[_0x29c7b3(0xc03)]['createChildSprite'],Sprite_Damage['prototype']['createChildSprite']=function(_0x4829e4,_0x3ae5cd){const _0x196a79=_0x29c7b3;return _0x3ae5cd=Math[_0x196a79(0x50f)](_0x3ae5cd*1.2),VisuMZ[_0x196a79(0x2e2)]['Sprite_Damage_createChildSprite'][_0x196a79(0x8d6)](this,_0x4829e4,_0x3ae5cd);},VisuMZ[_0x29c7b3(0x2e2)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon['prototype']['updateFrame'],Sprite_StateIcon[_0x29c7b3(0xc03)][_0x29c7b3(0xa4f)]=function(){const _0x3311bf=_0x29c7b3;VisuMZ[_0x3311bf(0x2e2)]['Sprite_StateIcon_updateFrame'][_0x3311bf(0x8d6)](this),this[_0x3311bf(0x81b)]=this[_0x3311bf(0x138)]>0x0?0xff:0x0;},VisuMZ[_0x29c7b3(0x2e2)]['Sprite_Weapon_loadBitmap']=Sprite_Weapon[_0x29c7b3(0xc03)][_0x29c7b3(0x37b)],Sprite_Weapon[_0x29c7b3(0xc03)][_0x29c7b3(0x37b)]=function(){const _0x203aa1=_0x29c7b3;VisuMZ[_0x203aa1(0x2e2)]['Sprite_Weapon_loadBitmap'][_0x203aa1(0x8d6)](this),this[_0x203aa1(0xc2a)]&&(this[_0x203aa1(0xc2a)]['smooth']=VisuMZ[_0x203aa1(0x2e2)][_0x203aa1(0xc14)][_0x203aa1(0x953)][_0x203aa1(0x8a0)]);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x14f)]=Sprite_Gauge['prototype'][_0x29c7b3(0x9fe)],Sprite_Gauge[_0x29c7b3(0xc03)][_0x29c7b3(0x9fe)]=function(){const _0xdeba08=_0x29c7b3;return this[_0xdeba08(0x528)]!=='time'?VisuMZ[_0xdeba08(0x2e2)][_0xdeba08(0xc14)][_0xdeba08(0x579)]['AniDuration']??0x14:VisuMZ[_0xdeba08(0x2e2)]['Sprite_Gauge_smoothness'][_0xdeba08(0x8d6)](this);};function Sprite_GaugeRate(){const _0x50788c=_0x29c7b3;this[_0x50788c(0x1a0)](...arguments);}Sprite_GaugeRate[_0x29c7b3(0xc03)]=Object['create'](Sprite_Gauge[_0x29c7b3(0xc03)]),Sprite_GaugeRate['prototype'][_0x29c7b3(0xba3)]=Sprite_GaugeRate,Sprite_GaugeRate['prototype'][_0x29c7b3(0x1a0)]=function(){const _0x222022=_0x29c7b3;Sprite_Gauge[_0x222022(0xc03)]['initialize'][_0x222022(0x8d6)](this),this[_0x222022(0x80c)]=![];},Sprite_GaugeRate[_0x29c7b3(0xc03)][_0x29c7b3(0xb49)]=function(_0x536f6d,_0x2378ba){const _0x2f5f16=_0x29c7b3;this[_0x2f5f16(0x80c)]=!![],Sprite_Gauge[_0x2f5f16(0xc03)][_0x2f5f16(0xb49)][_0x2f5f16(0x8d6)](this,_0x536f6d,_0x2378ba),this[_0x2f5f16(0x80c)]=![];},Sprite_GaugeRate['prototype']['currentValue']=function(){const _0x4ef788=_0x29c7b3;if(this['_updateTargetValue']){const _0xc723b5=Sprite_Gauge[_0x4ef788(0xc03)][_0x4ef788(0x9fd)][_0x4ef788(0x8d6)](this),_0x1248a1=this['currentMaxValue']();if(_0x1248a1<=0x0)return _0x4ef788(0x22f);return Math[_0x4ef788(0x1ec)](_0xc723b5/_0x1248a1*0x64)+'%';}else return Sprite_Gauge['prototype'][_0x4ef788(0x9fd)]['call'](this);},Sprite_GaugeRate['prototype'][_0x29c7b3(0xb28)]=function(){const _0x2c4f06=_0x29c7b3,_0x38afa1=Sprite_Gauge[_0x2c4f06(0xc03)][_0x2c4f06(0x9fd)][_0x2c4f06(0x8d6)](this),_0x47140d=this[_0x2c4f06(0x219)]();if(_0x47140d<=0x0)return'100%';return Math[_0x2c4f06(0x1ec)](_0x38afa1/_0x47140d*0x64)+'%';},Sprite_GaugeRate[_0x29c7b3(0xc03)][_0x29c7b3(0x779)]=function(){const _0x436f75=_0x29c7b3;if(this[_0x436f75(0x219)]()<=0x0)return 0x1;return Sprite_Gauge[_0x436f75(0xc03)][_0x436f75(0x779)][_0x436f75(0x8d6)](this);},Sprite_GaugeRate[_0x29c7b3(0xc03)][_0x29c7b3(0x521)]=function(){const _0x39d1fa=_0x29c7b3;if(this[_0x39d1fa(0x219)]()<=0x0)return ColorManager[_0x39d1fa(0x49d)]();return Sprite_Gauge[_0x39d1fa(0xc03)]['valueColor'][_0x39d1fa(0x8d6)](this);},Sprite_GaugeRate['prototype'][_0x29c7b3(0x15c)]=function(){const _0x3a7a02=_0x29c7b3;this[_0x3a7a02(0x528)]==='mp'&&this[_0x3a7a02(0x219)]()<=0x0&&($gameTemp[_0x3a7a02(0x43f)]=!![]),Sprite_Gauge[_0x3a7a02(0xc03)][_0x3a7a02(0x15c)][_0x3a7a02(0x8d6)](this),$gameTemp[_0x3a7a02(0x43f)]=undefined;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x39e)]=ColorManager[_0x29c7b3(0xa7f)],ColorManager[_0x29c7b3(0xa7f)]=function(_0x25566c){const _0x2012ab=_0x29c7b3;if($gameTemp[_0x2012ab(0x43f)])return ColorManager[_0x2012ab(0x49d)]();return VisuMZ[_0x2012ab(0x2e2)]['ColorManager_mpColor'][_0x2012ab(0x8d6)](this,_0x25566c);};function Sprite_HpGauge(){const _0x2781e9=_0x29c7b3;this[_0x2781e9(0x1a0)](...arguments);}Sprite_HpGauge[_0x29c7b3(0xc03)]=Object[_0x29c7b3(0x57e)](Sprite_Gauge[_0x29c7b3(0xc03)]),Sprite_HpGauge[_0x29c7b3(0xc03)]['constructor']=Sprite_HpGauge,Sprite_HpGauge[_0x29c7b3(0xc03)]['initialize']=function(){const _0x441a0a=_0x29c7b3;Sprite_Gauge[_0x441a0a(0xc03)][_0x441a0a(0x1a0)][_0x441a0a(0x8d6)](this);},Sprite_HpGauge[_0x29c7b3(0xc03)][_0x29c7b3(0x934)]=function(){return 0x0;},Sprite_HpGauge[_0x29c7b3(0xc03)][_0x29c7b3(0x15c)]=function(){const _0x2ed97e=_0x29c7b3;this[_0x2ed97e(0xc2a)][_0x2ed97e(0x917)]();const _0x22256a=this[_0x2ed97e(0x9fd)]();!isNaN(_0x22256a)&&this['drawGauge']();};function Sprite_EnemyName(){const _0x2619b8=_0x29c7b3;this[_0x2619b8(0x1a0)](...arguments);}Sprite_EnemyName['prototype']=Object[_0x29c7b3(0x57e)](Sprite_Name['prototype']),Sprite_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0xba3)]=Sprite_EnemyName,Sprite_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x1a0)]=function(){const _0x45cc13=_0x29c7b3;Sprite_Name[_0x45cc13(0xc03)][_0x45cc13(0x1a0)][_0x45cc13(0x8d6)](this),this[_0x45cc13(0x11c)]();},Sprite_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x2e9)]=function(){const _0x373aa7=_0x29c7b3;Sprite_Name['prototype'][_0x373aa7(0x2e9)]['call'](this),this[_0x373aa7(0x81b)]=0x0,this[_0x373aa7(0x734)]=null,this[_0x373aa7(0x3f8)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName['prototype'][_0x29c7b3(0x11c)]=function(){const _0x50314a=_0x29c7b3;VisuMZ[_0x50314a(0x2e2)]['Settings'][_0x50314a(0xac6)]['NameAttachStateIcon']&&(this[_0x50314a(0x8e9)]=new Sprite_StateIcon(),this[_0x50314a(0xa56)](this['_stateIconSprite']));},Sprite_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0xb38)]=function(){const _0x4757a0=_0x29c7b3;return Graphics[_0x4757a0(0xc0c)];},Sprite_EnemyName[_0x29c7b3(0xc03)]['bitmapHeight']=function(){const _0x4bb073=_0x29c7b3;return this[_0x4bb073(0x127)]=this[_0x4bb073(0x127)]||Window_Base[_0x4bb073(0xc03)][_0x4bb073(0x956)]()||0x24,this[_0x4bb073(0x127)]*0x4;},Sprite_EnemyName['prototype'][_0x29c7b3(0x4b7)]=function(){const _0x2bca3e=_0x29c7b3;return VisuMZ[_0x2bca3e(0x2e2)][_0x2bca3e(0xc14)]['Enemy'][_0x2bca3e(0x6dd)]||$gameSystem[_0x2bca3e(0x792)]();},Sprite_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x4c1)]=function(_0x9111f1){const _0x1fd86a=_0x29c7b3;this[_0x1fd86a(0x734)]=_0x9111f1;},Sprite_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x592)]=function(){const _0x286926=_0x29c7b3;Sprite_Name[_0x286926(0xc03)]['update'][_0x286926(0x8d6)](this),this['updateLink'](),this['updatePosition'](),this[_0x286926(0x9db)](),this[_0x286926(0x2bc)]();},Sprite_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x15c)]=function(){const _0x3b556d=_0x29c7b3;this[_0x3b556d(0xa97)]=undefined;const _0x4c557b=this[_0x3b556d(0x161)](),_0x242f99=this['bitmapWidth'](),_0x57bc2b=Window_Base[_0x3b556d(0xc03)]['lineHeight']();this['setupFont'](),this[_0x3b556d(0xc2a)][_0x3b556d(0x917)](),this[_0x3b556d(0xc2a)][_0x3b556d(0x946)](_0x4c557b,0x0,0x0,_0x242f99,_0x57bc2b,_0x3b556d(0x5cb));},Sprite_EnemyName['prototype'][_0x29c7b3(0x4f4)]=function(){const _0x531858=_0x29c7b3;if(!this[_0x531858(0x734)])return;this[_0x531858(0x3e8)]!==this[_0x531858(0x734)]['_battler']&&this['setup'](this['_linkedSprite'][_0x531858(0x3e8)]);},Sprite_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x975)]=function(){const _0x40ee15=_0x29c7b3;if(!this[_0x40ee15(0x734)])return;this[_0x40ee15(0x127)]=this[_0x40ee15(0x127)]||Window_Base[_0x40ee15(0xc03)][_0x40ee15(0x956)](),this['x']=Math['round'](this[_0x40ee15(0x734)][_0x40ee15(0xa3a)]),this['y']=Math[_0x40ee15(0x50f)](this[_0x40ee15(0x734)]['_baseY']-this[_0x40ee15(0x127)]*0.5);const _0x5d876a=VisuMZ[_0x40ee15(0x2e2)][_0x40ee15(0xc14)]['Enemy'];this['x']+=Math['round'](_0x5d876a[_0x40ee15(0xba5)]||0x0),this['y']+=Math['round'](_0x5d876a[_0x40ee15(0x12d)]||0x0);},Sprite_EnemyName['prototype'][_0x29c7b3(0x9db)]=function(){const _0x27a6d0=_0x29c7b3;this[_0x27a6d0(0x5b9)]();},Sprite_EnemyName['prototype'][_0x29c7b3(0x5b9)]=function(){const _0x5e79ee=_0x29c7b3;if(!this['_stateIconSprite'])return;this['_battler']!==this['_stateIconSprite'][_0x5e79ee(0x3e8)]&&this[_0x5e79ee(0x8e9)]['setup'](this[_0x5e79ee(0x3e8)]);const _0x5e7293=this[_0x5e79ee(0x644)]();this['_lineHeight']=this[_0x5e79ee(0x127)]||Window_Base[_0x5e79ee(0xc03)][_0x5e79ee(0x956)](),this[_0x5e79ee(0x8e9)]['x']=Math[_0x5e79ee(0x50f)]((_0x5e7293+ImageManager['iconWidth'])/0x2)+0x8,this[_0x5e79ee(0x8e9)]['y']=this[_0x5e79ee(0x127)]/0x2;const _0x1b2d82=VisuMZ[_0x5e79ee(0x2e2)]['Settings'][_0x5e79ee(0xac6)];this['_stateIconSprite']['x']+=_0x1b2d82[_0x5e79ee(0xb65)]||0x0,this['_stateIconSprite']['y']+=_0x1b2d82[_0x5e79ee(0x158)]||0x0;},Sprite_EnemyName['prototype']['updateOpacity']=function(){const _0x26aaf7=_0x29c7b3,_0x26b198=this[_0x26aaf7(0x411)]();if(_0x26b198&&this[_0x26aaf7(0x81b)]<0xff)this[_0x26aaf7(0x81b)]+=0x10;else!_0x26b198&&this['opacity']>0x0&&(this[_0x26aaf7(0x81b)]-=0x10);},Sprite_EnemyName['prototype'][_0x29c7b3(0x411)]=function(){const _0x1e2a92=_0x29c7b3;if(this['isAlwaysHidden']())return![];else{if(!this[_0x1e2a92(0x3e8)])return![];else{if(!this['_battler']['isAppeared']())return![];else{if(this[_0x1e2a92(0x2cb)]())return!![];else{if(this[_0x1e2a92(0x3e8)][_0x1e2a92(0x7cd)]())return![];else{if(this[_0x1e2a92(0x4c2)]())return!![];else{if(this['compatibilityVisible']())return!![];else{if(this['isAlwaysVisible']())return!![];else{if(this['isIncludedInEnemyWindow']())return!![];else{if(this['opacity']>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x29c7b3(0xc03)]['temporaryVisibile']=function(){const _0x13a7ee=_0x29c7b3;return this[_0x13a7ee(0x3e8)]&&this['_battler'][_0x13a7ee(0x8e0)]();},Sprite_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x743)]=function(){const _0x10a6ff=_0x29c7b3;return VisuMZ[_0x10a6ff(0x2e2)][_0x10a6ff(0xc14)][_0x10a6ff(0xac6)][_0x10a6ff(0x789)];},Sprite_EnemyName[_0x29c7b3(0xc03)]['isBattlerTargeted']=function(){const _0x1aac9b=_0x29c7b3;if(!VisuMZ[_0x1aac9b(0x2e2)][_0x1aac9b(0xc14)][_0x1aac9b(0xac6)][_0x1aac9b(0x91d)])return![];if(BattleManager[_0x1aac9b(0x7f1)]()&&!BattleManager[_0x1aac9b(0x43a)]())return![];return this['_battler']&&BattleManager[_0x1aac9b(0x215)]&&BattleManager[_0x1aac9b(0x48a)]['includes'](this[_0x1aac9b(0x3e8)]);},Sprite_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x72c)]=function(){return![];},Sprite_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x21e)]=function(){const _0x428138=_0x29c7b3;return VisuMZ[_0x428138(0x2e2)][_0x428138(0xc14)]['Enemy'][_0x428138(0x3a6)];},Sprite_EnemyName['prototype'][_0x29c7b3(0x63a)]=function(){const _0x49781f=_0x29c7b3;return VisuMZ[_0x49781f(0x2e2)]['Settings'][_0x49781f(0xac6)][_0x49781f(0x6f2)]?this['_battler'][_0x49781f(0xa5a)]():SceneManager['_scene'][_0x49781f(0x174)]&&SceneManager[_0x49781f(0x364)][_0x49781f(0x174)][_0x49781f(0x33d)]&&SceneManager[_0x49781f(0x364)][_0x49781f(0x174)]['_enemies'][_0x49781f(0xba2)](this[_0x49781f(0x3e8)]);},Sprite_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x644)]=function(){const _0x1ddb63=_0x29c7b3;if(!this['_battler'])return 0x0;if(this[_0x1ddb63(0xa97)])return this[_0x1ddb63(0xa97)];let _0x4c0d0d=this[_0x1ddb63(0x161)]();return this[_0x1ddb63(0xac7)](),Imported[_0x1ddb63(0x149)]&&TextManager[_0x1ddb63(0x966)]&&(_0x4c0d0d=TextManager[_0x1ddb63(0x966)](_0x4c0d0d)),this['_cacheTextWidth']=this['bitmap'][_0x1ddb63(0x58d)](_0x4c0d0d)||0x1,this[_0x1ddb63(0xa97)];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x14c)]=Sprite_Battleback[_0x29c7b3(0xc03)]['adjustPosition'],Sprite_Battleback[_0x29c7b3(0xc03)][_0x29c7b3(0xb7d)]=function(){const _0x4ac2fc=_0x29c7b3,_0x47f63e=VisuMZ['BattleCore'][_0x4ac2fc(0xc14)][_0x4ac2fc(0xc06)];if(!_0x47f63e)return VisuMZ['BattleCore'][_0x4ac2fc(0x14c)][_0x4ac2fc(0x8d6)](this);const _0xe11141=String(_0x47f63e[_0x4ac2fc(0x352)])||'MZ';switch(_0xe11141){case'MZ':VisuMZ[_0x4ac2fc(0x2e2)][_0x4ac2fc(0x14c)][_0x4ac2fc(0x8d6)](this);break;case _0x4ac2fc(0x645):this['adjustPosition_1for1']();break;case'ScaleToFit':this[_0x4ac2fc(0x2cf)]();break;case'ScaleDown':this[_0x4ac2fc(0x105)]();break;case _0x4ac2fc(0x256):this[_0x4ac2fc(0x666)]();break;}},Sprite_Battleback['prototype']['adjustPosition_1for1']=function(){const _0x2f9ba3=_0x29c7b3,_0x277d15=VisuMZ[_0x2f9ba3(0x2e2)][_0x2f9ba3(0xc14)]['BattlebackScale'];if(_0x277d15&&_0x277d15['jsOneForOne'])return _0x277d15['jsOneForOne'][_0x2f9ba3(0x8d6)](this);this[_0x2f9ba3(0x580)]=Graphics[_0x2f9ba3(0x580)],this[_0x2f9ba3(0x719)]=Graphics[_0x2f9ba3(0x719)];const _0x2ff229=0x1;this[_0x2f9ba3(0xaa0)]['x']=_0x2ff229,this[_0x2f9ba3(0xaa0)]['y']=_0x2ff229,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x29c7b3(0xc03)][_0x29c7b3(0x2cf)]=function(){const _0x4d62f7=_0x29c7b3,_0x196609=VisuMZ[_0x4d62f7(0x2e2)][_0x4d62f7(0xc14)][_0x4d62f7(0xc06)];if(_0x196609&&_0x196609[_0x4d62f7(0x537)])return _0x196609['jsScaleToFit'][_0x4d62f7(0x8d6)](this);this[_0x4d62f7(0x580)]=Graphics['width'],this[_0x4d62f7(0x719)]=Graphics[_0x4d62f7(0x719)];const _0x30f5d2=this[_0x4d62f7(0x580)]/this['bitmap']['width'],_0x39fef7=this[_0x4d62f7(0x719)]/this[_0x4d62f7(0xc2a)]['height'],_0x335466=Math[_0x4d62f7(0xbaf)](_0x30f5d2,_0x39fef7);this['scale']['x']=_0x335466,this[_0x4d62f7(0xaa0)]['y']=_0x335466,this['x']=(Graphics['width']-this[_0x4d62f7(0x580)])/0x2,this['y']=Graphics[_0x4d62f7(0x719)]-this[_0x4d62f7(0x719)];},Sprite_Battleback[_0x29c7b3(0xc03)][_0x29c7b3(0x105)]=function(){const _0x2f56cb=_0x29c7b3,_0x3189ad=VisuMZ[_0x2f56cb(0x2e2)][_0x2f56cb(0xc14)][_0x2f56cb(0xc06)];if(_0x3189ad&&_0x3189ad['jsScaleDown'])return _0x3189ad[_0x2f56cb(0xbde)][_0x2f56cb(0x8d6)](this);this[_0x2f56cb(0x580)]=Graphics[_0x2f56cb(0x580)],this['height']=Graphics['height'];const _0x1e50c7=Math[_0x2f56cb(0xbce)](0x1,this['width']/this[_0x2f56cb(0xc2a)][_0x2f56cb(0x580)]),_0x3444ae=Math[_0x2f56cb(0xbce)](0x1,this[_0x2f56cb(0x719)]/this['bitmap']['height']),_0x49053b=Math[_0x2f56cb(0xbaf)](_0x1e50c7,_0x3444ae);this[_0x2f56cb(0xaa0)]['x']=_0x49053b,this[_0x2f56cb(0xaa0)]['y']=_0x49053b,this['x']=(Graphics[_0x2f56cb(0x580)]-this[_0x2f56cb(0x580)])/0x2,this['y']=Graphics[_0x2f56cb(0x719)]-this[_0x2f56cb(0x719)];},Sprite_Battleback[_0x29c7b3(0xc03)][_0x29c7b3(0x666)]=function(){const _0x43f19e=_0x29c7b3,_0xd33436=VisuMZ[_0x43f19e(0x2e2)][_0x43f19e(0xc14)]['BattlebackScale'];if(_0xd33436&&_0xd33436[_0x43f19e(0xbe2)])return _0xd33436[_0x43f19e(0xbe2)][_0x43f19e(0x8d6)](this);this[_0x43f19e(0x580)]=Graphics[_0x43f19e(0x580)],this['height']=Graphics[_0x43f19e(0x719)];const _0x537cf8=Math[_0x43f19e(0xbaf)](0x1,this[_0x43f19e(0x580)]/this[_0x43f19e(0xc2a)][_0x43f19e(0x580)]),_0x3b2c83=Math[_0x43f19e(0xbaf)](0x1,this[_0x43f19e(0x719)]/this[_0x43f19e(0xc2a)][_0x43f19e(0x719)]),_0x432957=Math[_0x43f19e(0xbaf)](_0x537cf8,_0x3b2c83);this['scale']['x']=_0x432957,this[_0x43f19e(0xaa0)]['y']=_0x432957,this['x']=(Graphics[_0x43f19e(0x580)]-this[_0x43f19e(0x580)])/0x2,this['y']=Graphics[_0x43f19e(0x719)]-this[_0x43f19e(0x719)];},Spriteset_Battle[_0x29c7b3(0x6a9)]=VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)]['BattleLayout'][_0x29c7b3(0xb20)]??!![],Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x66c)]=function(){const _0xf08619=_0x29c7b3;if(!$gameSystem[_0xf08619(0x204)]())return![];return![];},Spriteset_Battle[_0x29c7b3(0xc03)]['animationBaseDelay']=function(){return 0x0;},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x4d1)]=function(){return 0x0;},VisuMZ['BattleCore'][_0x29c7b3(0xc10)]=Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x875)],Spriteset_Battle[_0x29c7b3(0xc03)]['createLowerLayer']=function(){const _0x1ac49c=_0x29c7b3;VisuMZ[_0x1ac49c(0x2e2)][_0x1ac49c(0xc10)][_0x1ac49c(0x8d6)](this),this[_0x1ac49c(0x1f0)](),this[_0x1ac49c(0x484)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x3ab)]=Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x592)],Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x592)]=function(){const _0xcaf46a=_0x29c7b3;VisuMZ[_0xcaf46a(0x2e2)]['Spriteset_Battle_update'][_0xcaf46a(0x8d6)](this),this[_0xcaf46a(0x354)](),this[_0xcaf46a(0x3a7)](),this[_0xcaf46a(0x380)](),this[_0xcaf46a(0x8fd)]();},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x1f0)]=function(){const _0x358f6d=_0x29c7b3;this[_0x358f6d(0xc11)]=new Weather(),this[_0x358f6d(0x218)][_0x358f6d(0xa56)](this[_0x358f6d(0xc11)]);},Spriteset_Battle[_0x29c7b3(0xc03)]['updateWeather']=function(){const _0x1bda49=_0x29c7b3;this[_0x1bda49(0xc11)][_0x1bda49(0x65f)]=$gameScreen['weatherType'](),this[_0x1bda49(0xc11)][_0x1bda49(0x17e)]=$gameScreen[_0x1bda49(0xa24)]();},Game_Interpreter[_0x29c7b3(0xc03)][_0x29c7b3(0x8c0)]=function(_0x2f4f96){const _0xd883d2=_0x29c7b3;$gameScreen[_0xd883d2(0xa61)](_0x2f4f96[0x0],_0x2f4f96[0x1],_0x2f4f96[0x2]);if(_0x2f4f96[0x3])this[_0xd883d2(0x60f)](_0x2f4f96[0x2]);return!![];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x79d)]=Game_Interpreter[_0x29c7b3(0xc03)][_0x29c7b3(0x597)],Game_Interpreter[_0x29c7b3(0xc03)]['command283']=function(_0x4a3b62){const _0x5cdb9f=_0x29c7b3;return VisuMZ[_0x5cdb9f(0x2e2)][_0x5cdb9f(0x79d)][_0x5cdb9f(0x8d6)](this,_0x4a3b62),SceneManager[_0x5cdb9f(0x429)]()&&SceneManager[_0x5cdb9f(0x364)]['_spriteset']['changeBattlebacks'](_0x4a3b62[0x0],_0x4a3b62[0x1]),!![];},Sprite_Battleback[_0x29c7b3(0xc03)][_0x29c7b3(0x67f)]=function(){const _0x5135e2=_0x29c7b3;if($gameMap['battleback1Name']()!==null)return $gameMap[_0x5135e2(0x67f)]();else{if(BattleManager[_0x5135e2(0x700)]())return $dataSystem['battleback1Name'];else return $gameMap[_0x5135e2(0x100)]()?this['overworldBattleback1Name']():'';}},Sprite_Battleback[_0x29c7b3(0xc03)][_0x29c7b3(0x729)]=function(){const _0x488830=_0x29c7b3;if($gameMap[_0x488830(0x729)]()!==null)return $gameMap['battleback2Name']();else{if(BattleManager[_0x488830(0x700)]())return $dataSystem[_0x488830(0x729)];else return $gameMap[_0x488830(0x100)]()?this['overworldBattleback2Name']():'';}},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x665)]=function(_0x39c173,_0x31b57d){const _0x48d6b3=_0x29c7b3;_0x39c173[_0x48d6b3(0xc2a)]=_0x31b57d;},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x69b)]=function(_0x3b633a,_0x4b6da5){const _0x29524c=_0x29c7b3;_0x3b633a=_0x3b633a||'',_0x4b6da5=_0x4b6da5||'';_0x3b633a===''&&_0x4b6da5===''&&(_0x3b633a=this[_0x29524c(0x814)]['battleback1Name'](),_0x4b6da5=this[_0x29524c(0xc15)][_0x29524c(0x729)]());const _0x49acb0=ImageManager['loadBattleback1'](_0x3b633a),_0x49d613=ImageManager[_0x29524c(0x19c)](_0x4b6da5);_0x49acb0[_0x29524c(0xbbf)](this[_0x29524c(0x321)][_0x29524c(0x86e)](this,this[_0x29524c(0x814)],this[_0x29524c(0xc15)],_0x49acb0,_0x49d613));},Spriteset_Battle['prototype']['updateBattlebackBitmap1']=function(_0x423955,_0x2f476a,_0x2cba4f,_0xc08083){const _0x1df9b7=_0x29c7b3;_0xc08083['addLoadListener'](this[_0x1df9b7(0x981)][_0x1df9b7(0x86e)](this,_0x423955,_0x2f476a,_0x2cba4f,_0xc08083));},Spriteset_Battle[_0x29c7b3(0xc03)]['updateBattlebackBitmap2']=function(_0x4ef08f,_0x515068,_0x5445aa,_0x26f5b5){const _0x322511=_0x29c7b3;_0x4ef08f[_0x322511(0xc2a)]=_0x5445aa,_0x515068[_0x322511(0xc2a)]=_0x26f5b5,_0x4ef08f[_0x322511(0xb7d)](),_0x515068[_0x322511(0xb7d)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x4b1)]=Spriteset_Battle['prototype'][_0x29c7b3(0x947)],Spriteset_Battle[_0x29c7b3(0xc03)]['createBattleField']=function(){const _0x2faa31=_0x29c7b3;VisuMZ['BattleCore'][_0x2faa31(0x4b1)][_0x2faa31(0x8d6)](this),this['createBattleFieldBattleCore']();},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x930)]=function(){const _0x4ff463=_0x29c7b3;this[_0x4ff463(0xaef)](),this['createUIContainer'](),this[_0x4ff463(0x33c)](),this[_0x4ff463(0xafb)](),this[_0x4ff463(0x460)]();},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xaef)]=function(){const _0x200407=_0x29c7b3;this[_0x200407(0x533)]=new Sprite(),this[_0x200407(0x218)]['addChild'](this[_0x200407(0x533)]),this[_0x200407(0xc17)]=new Sprite(),this[_0x200407(0x218)][_0x200407(0xa56)](this[_0x200407(0xc17)]);},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x33c)]=function(){const _0x442a66=_0x29c7b3;this['_animationContainer']=new Sprite(),Spriteset_Battle[_0x442a66(0x6a9)]?this[_0x442a66(0xa56)](this[_0x442a66(0xb71)]):this[_0x442a66(0x218)]['addChild'](this[_0x442a66(0xb71)]);},Spriteset_Battle[_0x29c7b3(0xc03)]['createDamageContainer']=function(){const _0x1260a1=_0x29c7b3;this[_0x1260a1(0x3ff)]=new Sprite(),this[_0x1260a1(0x3ff)]['x']=this[_0x1260a1(0x218)]['x'],this[_0x1260a1(0x3ff)]['y']=this[_0x1260a1(0x218)]['y'],this['addChild'](this[_0x1260a1(0x3ff)]);},Spriteset_Battle['prototype'][_0x29c7b3(0x460)]=function(){const _0xca8fce=_0x29c7b3;if(!this[_0xca8fce(0x66c)]())return;this[_0xca8fce(0xc17)][_0xca8fce(0xaa0)]['x']=-0x1,this['_battlerContainer']['x']=this[_0xca8fce(0x218)]['width'],this['_uiContainer'][_0xca8fce(0xaa0)]['x']=-0x1,this[_0xca8fce(0x4d0)]['x']=this[_0xca8fce(0x218)]['width'],this[_0xca8fce(0xb71)][_0xca8fce(0xaa0)]['x']=-0x1,this[_0xca8fce(0xb71)]['x']=this[_0xca8fce(0x218)][_0xca8fce(0x580)],this[_0xca8fce(0x3ff)][_0xca8fce(0xaa0)]['x']=-0x1,this[_0xca8fce(0x3ff)]['x']=this[_0xca8fce(0x218)]['x']+this[_0xca8fce(0x218)][_0xca8fce(0x580)];},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x471)]=function(){const _0x1945d8=_0x29c7b3;Imported[_0x1945d8(0x50c)]&&this[_0x1945d8(0xac0)]()&&this[_0x1945d8(0x505)]();const _0x3dc514=$gameTroop['members'](),_0x5006c5=[];for(const _0x1abad7 of _0x3dc514){_0x5006c5['push'](new Sprite_Enemy(_0x1abad7));}_0x5006c5[_0x1945d8(0x3ae)](this[_0x1945d8(0x494)][_0x1945d8(0x86e)](this));for(const _0xafc09a of _0x5006c5){this[_0x1945d8(0xc17)][_0x1945d8(0xa56)](_0xafc09a);}this[_0x1945d8(0x3e4)]=_0x5006c5;},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x8d2)]=function(){const _0x47b0a5=_0x29c7b3;this[_0x47b0a5(0x6fb)]=[];for(let _0x37d6ce=0x0;_0x37d6ce<$gameParty['maxBattleMembers']();_0x37d6ce++){const _0xd5f799=$gameParty['battleMembers']()[_0x37d6ce],_0x2de0e2=new Sprite_Actor();_0x2de0e2[_0x47b0a5(0xbd7)](_0xd5f799),_0x2de0e2[_0x47b0a5(0xbdd)](_0xd5f799),_0x2de0e2[_0x47b0a5(0x592)](),this[_0x47b0a5(0x6fb)][_0x47b0a5(0x13a)](_0x2de0e2),this[_0x47b0a5(0xc17)][_0x47b0a5(0xa56)](_0x2de0e2);}},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x869)]=function(_0x59f9cd,_0x550364,_0x4b59be,_0x2ab0bb){const _0x406e8e=_0x29c7b3,_0x1ae805=this[_0x406e8e(0x5f8)](_0x550364),_0x1b0b2f=new(_0x1ae805?Sprite_AnimationMV:Sprite_Animation)(),_0x2ee901=this['makeTargetSprites'](_0x59f9cd);this[_0x406e8e(0xbe3)](_0x59f9cd[0x0])&&(_0x4b59be=!_0x4b59be),_0x1b0b2f[_0x406e8e(0xa3b)]=_0x59f9cd,_0x1b0b2f[_0x406e8e(0xb10)](_0x2ee901,_0x550364,_0x4b59be,_0x2ab0bb),this[_0x406e8e(0x1fa)](_0x1b0b2f);},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x1fa)]=function(_0x4cbff8){const _0xee6f69=_0x29c7b3;this[_0xee6f69(0x56e)](_0x4cbff8)?(this[_0xee6f69(0x61e)]()[_0xee6f69(0xa56)](_0x4cbff8),_0x4cbff8['battleStatusSprite']=!![]):(Spriteset_Battle['ANTI_TINT_UI']&&(this[_0xee6f69(0xb71)]['x']=this[_0xee6f69(0x6d7)]['x'],this['_animationContainer']['y']=this['_effectsContainer']['y']),this[_0xee6f69(0x533)]&&_0x4cbff8['isUnderAnimation']&&_0x4cbff8[_0xee6f69(0x3eb)]()?(this[_0xee6f69(0x533)][_0xee6f69(0xa56)](_0x4cbff8),this['_underAnimationContainer']['x']=this['_animationContainer']['x'],this[_0xee6f69(0x533)]['y']=this['_animationContainer']['y']):this['_animationContainer']['addChild'](_0x4cbff8)),this['_animationSprites']['push'](_0x4cbff8);},Spriteset_Battle['prototype'][_0x29c7b3(0x56e)]=function(_0x1bee8c){const _0x551022=_0x29c7b3;if(!_0x1bee8c)return![];if(!_0x1bee8c[_0x551022(0x2e8)])return![];if(!_0x1bee8c[_0x551022(0xa3b)][0x0])return![];if(_0x1bee8c[_0x551022(0xa3b)][0x0][_0x551022(0xa27)]&&!_0x1bee8c[_0x551022(0xa3b)][0x0]['isActor']())return![];if($gameSystem[_0x551022(0x204)]())return![];if(!this[_0x551022(0x61e)]())return![];if(_0x1bee8c[_0x551022(0xba3)]===Sprite_Animation){const _0x4c66dd=VisuMZ[_0x551022(0x2e2)][_0x551022(0xc14)]['Actor'];_0x4c66dd[_0x551022(0xa64)]=_0x4c66dd[_0x551022(0xa64)]??!![];if(_0x1bee8c[_0x551022(0x2e8)][_0x551022(0x664)]===0x0&&!_0x4c66dd[_0x551022(0xa64)])return![];_0x4c66dd[_0x551022(0x5f2)]=_0x4c66dd[_0x551022(0x5f2)]??!![];if(_0x1bee8c[_0x551022(0x2e8)][_0x551022(0x664)]===0x1&&!_0x4c66dd[_0x551022(0x5f2)])return![];_0x4c66dd[_0x551022(0x343)]=_0x4c66dd[_0x551022(0x343)]??![];if(_0x1bee8c[_0x551022(0x2e8)][_0x551022(0x664)]===0x2&&!_0x4c66dd[_0x551022(0x343)])return![];}else{if(_0x1bee8c['constructor']===Sprite_AnimationMV){if(_0x1bee8c[_0x551022(0x2e8)][_0x551022(0x4e3)]===0x3)return![];}}return!![];const _0x25f98a=Window_BattleStatus['prototype'][_0x551022(0x815)]();return['xp','portrait']['contains'](_0x25f98a);},Spriteset_Battle['prototype'][_0x29c7b3(0x61e)]=function(){const _0x13d203=_0x29c7b3;if(!SceneManager[_0x13d203(0x364)])return null;if(!SceneManager[_0x13d203(0x364)][_0x13d203(0x92e)])return null;if(!SceneManager[_0x13d203(0x364)][_0x13d203(0x92e)][_0x13d203(0x6d7)])return null;return SceneManager[_0x13d203(0x364)][_0x13d203(0x92e)][_0x13d203(0x6d7)];},Spriteset_Battle['prototype'][_0x29c7b3(0x1c1)]=function(_0x37088a){const _0x21226d=_0x29c7b3;this['removeAnimationFromContainer'](_0x37088a);for(const _0x2a58ce of _0x37088a[_0x21226d(0xa3b)]){_0x2a58ce[_0x21226d(0x38c)]&&_0x2a58ce[_0x21226d(0x38c)]();}_0x37088a[_0x21226d(0x314)]();},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x2e5)]=function(_0x2cba60){const _0x5886e3=_0x29c7b3;this[_0x5886e3(0x56e)](_0x2cba60)?this[_0x5886e3(0x61e)]()[_0x5886e3(0xbdc)](_0x2cba60):this['_animationContainer'][_0x5886e3(0xbdc)](_0x2cba60);this[_0x5886e3(0x533)]&&this['_underAnimationContainer']['removeChild'](_0x2cba60);this[_0x5886e3(0x6d7)][_0x5886e3(0xbdc)](_0x2cba60),this[_0x5886e3(0xb71)]['removeChild'](_0x2cba60),this[_0x5886e3(0x38d)][_0x5886e3(0x5e2)](_0x2cba60);if(this[_0x5886e3(0x907)])this[_0x5886e3(0x907)][_0x5886e3(0x5e2)](_0x2cba60);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x3ec)]=Spriteset_Battle[_0x29c7b3(0xc03)]['updateActors'],Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xbeb)]=function(){const _0x52c390=_0x29c7b3;VisuMZ[_0x52c390(0x2e2)][_0x52c390(0x3ec)][_0x52c390(0x8d6)](this),this[_0x52c390(0x354)]();},Spriteset_Battle['prototype'][_0x29c7b3(0x354)]=function(){const _0x2e4ed1=_0x29c7b3;this[_0x2e4ed1(0xc17)]['children']['sort'](this[_0x2e4ed1(0x4ce)]['bind'](this)),this['putActiveBattlerOnTop']();if(!this[_0x2e4ed1(0xc17)])return;this[_0x2e4ed1(0xc17)][_0x2e4ed1(0x81b)]=this[_0x2e4ed1(0xb2f)]();},Spriteset_Battle['prototype'][_0x29c7b3(0x4ce)]=function(_0x7c6881,_0x16a701){const _0x59a135=_0x29c7b3;if(VisuMZ[_0x59a135(0x2e2)]['Settings'][_0x59a135(0x953)][_0x59a135(0x17f)]){if(_0x7c6881[_0x59a135(0x3e8)]&&_0x16a701[_0x59a135(0x3e8)]){if(_0x7c6881['_battler']['isActor']()&&_0x16a701[_0x59a135(0x3e8)][_0x59a135(0xb3d)]())return 0x1;else{if(_0x16a701[_0x59a135(0x3e8)][_0x59a135(0xa27)]()&&_0x7c6881[_0x59a135(0x3e8)][_0x59a135(0xb3d)]())return-0x1;}}}return _0x7c6881[_0x59a135(0x488)]!==_0x16a701['_baseY']?_0x7c6881[_0x59a135(0x488)]-_0x16a701[_0x59a135(0x488)]:_0x16a701[_0x59a135(0x287)]-_0x7c6881['spriteId'];},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0xaa8)]=function(){const _0x2b8be2=_0x29c7b3;if(!VisuMZ[_0x2b8be2(0x2e2)][_0x2b8be2(0xc14)]['Actor'][_0x2b8be2(0x563)])return;const _0x81dd29=BattleManager[_0x2b8be2(0x215)];if(_0x81dd29){if(_0x81dd29[_0x2b8be2(0xa27)]()&&!$gameSystem[_0x2b8be2(0x204)]())return;if(_0x81dd29===BattleManager[_0x2b8be2(0xb4d)]())return;const _0x599317=_0x81dd29[_0x2b8be2(0xa65)]();if(_0x599317&&_0x81dd29[_0x2b8be2(0xa27)]())this['_battlerContainer'][_0x2b8be2(0xa56)](_0x599317);}},Spriteset_Battle[_0x29c7b3(0xc03)]['processEscape']=function(){const _0x5bc9ed=_0x29c7b3;for(const _0x3069e6 of $gameParty['aliveMembers']()){if(!_0x3069e6)continue;if(!_0x3069e6[_0x5bc9ed(0xa65)]())continue;_0x3069e6[_0x5bc9ed(0xa65)]()[_0x5bc9ed(0x159)]=!![],_0x3069e6[_0x5bc9ed(0xa65)]()[_0x5bc9ed(0x910)]();}},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x9f5)]=function(){const _0x167af2=_0x29c7b3;this[_0x167af2(0x4d0)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x167af2(0xa56)](this[_0x167af2(0x4d0)]):this[_0x167af2(0x218)][_0x167af2(0xa56)](this['_uiContainer']),SceneManager['_scene']['_uiContainer']=this[_0x167af2(0x4d0)];},Spriteset_Battle['prototype'][_0x29c7b3(0x484)]=function(){const _0x2b821a=_0x29c7b3;if(VisuMZ[_0x2b821a(0x2e2)][_0x2b821a(0xc14)][_0x2b821a(0xac6)][_0x2b821a(0x638)])return;this['_enemyNameContainer']=new Sprite(),BattleManager[_0x2b821a(0x694)](this[_0x2b821a(0xb43)]);for(const _0x411b9b of this[_0x2b821a(0x3e4)]){const _0x5682e7=new Sprite_EnemyName();this[_0x2b821a(0xb43)]['addChild'](_0x5682e7),_0x5682e7['linkSprite'](_0x411b9b);}},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x3a7)]=function(){const _0x1dc2a3=_0x29c7b3;if(!this[_0x1dc2a3(0x3ff)])return;if(!this[_0x1dc2a3(0x4d0)])return;const _0x511ad4=Spriteset_Battle[_0x1dc2a3(0x6a9)]?this['_damageContainer']['x']:0x0,_0x24c642=Spriteset_Battle[_0x1dc2a3(0x6a9)]?this[_0x1dc2a3(0x3ff)]['y']:0x0,_0x4d0d73=Imported['VisuMZ_3_ActSeqCamera']?this[_0x1dc2a3(0x218)]['x']:0x0,_0x10dfcd=Imported[_0x1dc2a3(0x92c)]?this[_0x1dc2a3(0x218)]['y']:0x0;this[_0x1dc2a3(0x4d0)]['x']=_0x511ad4+_0x4d0d73,this['_uiContainer']['y']=_0x24c642+_0x10dfcd;},BattleManager[_0x29c7b3(0x694)]=function(_0xc80157){const _0x3ad666=_0x29c7b3;if(!SceneManager['_scene'][_0x3ad666(0x4d0)])return;SceneManager[_0x3ad666(0x364)][_0x3ad666(0x4d0)][_0x3ad666(0xa56)](_0xc80157);},BattleManager[_0x29c7b3(0x51c)]=function(_0x181c9e){const _0x5c1071=_0x29c7b3;if(!SceneManager[_0x5c1071(0x364)][_0x5c1071(0x4d0)])return;SceneManager['_scene'][_0x5c1071(0x4d0)][_0x5c1071(0xbdc)](_0x181c9e);},Spriteset_Battle[_0x29c7b3(0xc03)]['targetBattlerContainerOpacity']=function(){return 0xff;},Spriteset_Battle['prototype'][_0x29c7b3(0x980)]=function(){return![];},Spriteset_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x4e8)]=function(){const _0x5617bc=_0x29c7b3;return this['battlerSprites']()['some'](_0x514ebe=>_0x514ebe[_0x5617bc(0x25a)]());},Spriteset_Battle['prototype']['isAnyoneJumping']=function(){const _0x1225e7=_0x29c7b3;return this[_0x1225e7(0x26a)]()['some'](_0x7bfb72=>_0x7bfb72[_0x1225e7(0x6f3)]());},Spriteset_Battle['prototype'][_0x29c7b3(0x7d1)]=function(){const _0x5d619d=_0x29c7b3;return this['battlerSprites']()['some'](_0x660930=>_0x660930[_0x5d619d(0x996)]());},Spriteset_Battle['prototype'][_0x29c7b3(0x568)]=function(){const _0x342079=_0x29c7b3;return this[_0x342079(0x26a)]()['some'](_0x266600=>_0x266600[_0x342079(0x879)]());},Spriteset_Battle['prototype'][_0x29c7b3(0xa73)]=function(){const _0x3d3171=_0x29c7b3;return this[_0x3d3171(0x26a)]()[_0x3d3171(0x5af)](_0x219a1c=>_0x219a1c[_0x3d3171(0xb41)]());},Spriteset_Battle[_0x29c7b3(0xc03)]['isAnyoneChangingOpacity']=function(){const _0x2a4b51=_0x29c7b3;return this[_0x2a4b51(0x26a)]()[_0x2a4b51(0x5af)](_0x151788=>_0x151788[_0x2a4b51(0xb5d)]());},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xbd9)]=Window_ItemList[_0x29c7b3(0xc03)]['maxCols'],Window_ItemList[_0x29c7b3(0xc03)][_0x29c7b3(0x357)]=function(){const _0xcd7dd0=_0x29c7b3;return SceneManager['isSceneBattle']()?SceneManager[_0xcd7dd0(0x364)][_0xcd7dd0(0x815)]()==='border'?VisuMZ[_0xcd7dd0(0x2e2)][_0xcd7dd0(0xc14)][_0xcd7dd0(0xaf9)][_0xcd7dd0(0xad4)]:VisuMZ[_0xcd7dd0(0x2e2)][_0xcd7dd0(0xc14)][_0xcd7dd0(0xaf9)][_0xcd7dd0(0x1f6)]:VisuMZ[_0xcd7dd0(0x2e2)]['Window_ItemList_maxCols'][_0xcd7dd0(0x8d6)](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x29e)]=Window_SkillList[_0x29c7b3(0xc03)]['maxCols'],Window_SkillList['prototype'][_0x29c7b3(0x357)]=function(){const _0x40c9c0=_0x29c7b3;return SceneManager[_0x40c9c0(0x429)]()?SceneManager[_0x40c9c0(0x364)][_0x40c9c0(0x815)]()==='border'?VisuMZ[_0x40c9c0(0x2e2)][_0x40c9c0(0xc14)][_0x40c9c0(0xaf9)][_0x40c9c0(0xad4)]:VisuMZ['BattleCore'][_0x40c9c0(0xc14)]['BattleLayout'][_0x40c9c0(0x1f6)]:VisuMZ[_0x40c9c0(0x2e2)][_0x40c9c0(0x29e)]['call'](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x8a6)]=Window_Options[_0x29c7b3(0xc03)][_0x29c7b3(0x6f9)],Window_Options[_0x29c7b3(0xc03)]['addGeneralOptions']=function(){const _0x371849=_0x29c7b3;VisuMZ[_0x371849(0x2e2)][_0x371849(0x8a6)][_0x371849(0x8d6)](this),this['addAutoBattleCommands'](),this['addShowHpGaugeCommand']();},Window_Options[_0x29c7b3(0xc03)]['addAutoBattleCommands']=function(){const _0x551de1=_0x29c7b3;VisuMZ['BattleCore'][_0x551de1(0xc14)][_0x551de1(0x19e)][_0x551de1(0xc1e)]&&(this[_0x551de1(0x39c)](),this['addBattleCoreAutoBattleStyleCommand']());},Window_Options[_0x29c7b3(0xc03)]['addShowHpGaugeCommand']=function(){const _0x24deba=_0x29c7b3;if(!VisuMZ['BattleCore'][_0x24deba(0xc14)][_0x24deba(0x579)]['AddHpGaugeOption'])return;const _0x212a4a=TextManager['visualHpGauge'],_0x2c5179=_0x24deba(0x146);this[_0x24deba(0xb4a)](_0x212a4a,_0x2c5179);},Window_Options[_0x29c7b3(0xc03)][_0x29c7b3(0x39c)]=function(){const _0x2dac4a=_0x29c7b3,_0x2c4db4=TextManager[_0x2dac4a(0x39d)],_0x11b279='autoBattleAtStart';this[_0x2dac4a(0xb4a)](_0x2c4db4,_0x11b279);},Window_Options[_0x29c7b3(0xc03)][_0x29c7b3(0x772)]=function(){const _0x1a03f2=_0x29c7b3,_0x5457c5=TextManager[_0x1a03f2(0x453)],_0x44fb21=_0x1a03f2(0x154);this['addCommand'](_0x5457c5,_0x44fb21);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x98a)]=Window_Options[_0x29c7b3(0xc03)]['statusText'],Window_Options[_0x29c7b3(0xc03)][_0x29c7b3(0x909)]=function(_0x26c44f){const _0x5f0c45=_0x29c7b3,_0x4980cf=this[_0x5f0c45(0x36d)](_0x26c44f);return _0x4980cf===_0x5f0c45(0x154)?this[_0x5f0c45(0x50b)]():VisuMZ[_0x5f0c45(0x2e2)][_0x5f0c45(0x98a)][_0x5f0c45(0x8d6)](this,_0x26c44f);},Window_Options[_0x29c7b3(0xc03)]['statusTextAutoBattleStyle']=function(){const _0xcf2379=_0x29c7b3,_0x1f7dc3=VisuMZ[_0xcf2379(0x2e2)][_0xcf2379(0xc14)][_0xcf2379(0x19e)],_0xa22f8e=this[_0xcf2379(0x25f)](_0xcf2379(0x154));return _0xa22f8e?_0x1f7dc3[_0xcf2379(0x115)]:_0x1f7dc3['StyleOFF'];},Window_ShopStatus['prototype']['getItemDamageAmountLabelBattleCore']=function(){const _0x4adbec=_0x29c7b3,_0x2ab674=DataManager['getDamageStyle'](this[_0x4adbec(0x296)]),_0x38c4ac=VisuMZ[_0x4adbec(0xbbe)][_0x2ab674];if(!_0x38c4ac)return this[_0x4adbec(0x319)]();const _0x2ef87f=_0x4adbec(0x27d)[_0x4adbec(0x77d)](this[_0x4adbec(0x296)]['damage'][_0x4adbec(0x65f)]),_0x596fb2=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item'][_0x4adbec(0x969)][_0x4adbec(0x65f)]];return _0x38c4ac[_0x2ef87f][_0x4adbec(0x77d)](_0x596fb2);},Window_ShopStatus['prototype'][_0x29c7b3(0x923)]=function(){const _0x5a90bd=_0x29c7b3,_0x331728=DataManager[_0x5a90bd(0x7c4)](this[_0x5a90bd(0x296)]),_0x5532b6=VisuMZ[_0x5a90bd(0xbbe)][_0x331728];if(!_0x5532b6)return this[_0x5a90bd(0x3b4)]();return _0x5532b6[_0x5a90bd(0xab6)]['call'](this);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xa01)]=Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x1a0)],Window_PartyCommand['prototype'][_0x29c7b3(0x1a0)]=function(_0x40ada5){const _0x2adc15=_0x29c7b3;VisuMZ[_0x2adc15(0x2e2)][_0x2adc15(0xa01)][_0x2adc15(0x8d6)](this,_0x40ada5),this[_0x2adc15(0x1f9)](_0x40ada5);},Window_PartyCommand['prototype'][_0x29c7b3(0x1f9)]=function(_0x20c69f){const _0x45170f=_0x29c7b3,_0x3315ee=new Rectangle(0x0,0x0,_0x20c69f['width'],_0x20c69f['height']);this['_commandNameWindow']=new Window_Base(_0x3315ee),this[_0x45170f(0x230)][_0x45170f(0x81b)]=0x0,this[_0x45170f(0xa56)](this['_commandNameWindow']),this[_0x45170f(0x9d4)]();},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x989)]=function(){const _0x7d2800=_0x29c7b3;Window_Command[_0x7d2800(0xc03)][_0x7d2800(0x989)]['call'](this);if(this[_0x7d2800(0x230)])this['updateCommandNameWindow']();},Window_PartyCommand[_0x29c7b3(0xc03)]['updateCommandNameWindow']=function(){const _0xf9256c=_0x29c7b3,_0x272a51=this['_commandNameWindow'];_0x272a51[_0xf9256c(0x6b6)][_0xf9256c(0x917)]();const _0x5673eb=this[_0xf9256c(0xae1)](this[_0xf9256c(0xb21)]());if(_0x5673eb===_0xf9256c(0x564)&&this[_0xf9256c(0x428)]()>0x0){const _0x41067a=this[_0xf9256c(0x657)](this['index']());let _0x2ef20d=this[_0xf9256c(0x4a9)](this[_0xf9256c(0xb21)]());_0x2ef20d=_0x2ef20d[_0xf9256c(0xa2c)](/\\I\[(\d+)\]/gi,''),_0x272a51[_0xf9256c(0x738)](),this[_0xf9256c(0x468)](_0x2ef20d,_0x41067a),this[_0xf9256c(0x702)](_0x2ef20d,_0x41067a),this['commandNameWindowCenter'](_0x2ef20d,_0x41067a);}},Window_PartyCommand['prototype']['commandNameWindowDrawBackground']=function(_0x1d8279,_0x40b714){},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x702)]=function(_0xf06ded,_0x43d58d){const _0x4a217a=_0x29c7b3,_0x4e2ca9=this[_0x4a217a(0x230)];_0x4e2ca9[_0x4a217a(0x946)](_0xf06ded,0x0,_0x43d58d['y'],_0x4e2ca9[_0x4a217a(0x6aa)],_0x4a217a(0x5cb));},Window_PartyCommand['prototype'][_0x29c7b3(0xb70)]=function(_0x3b4682,_0x252eed){const _0x482aac=_0x29c7b3,_0x4f14ea=this[_0x482aac(0x230)],_0x2115e0=$gameSystem['windowPadding'](),_0x1584fa=_0x252eed['x']+Math[_0x482aac(0x1ec)](_0x252eed[_0x482aac(0x580)]/0x2)+_0x2115e0;_0x4f14ea['x']=_0x4f14ea[_0x482aac(0x580)]/-0x2+_0x1584fa,_0x4f14ea['y']=Math[_0x482aac(0x1ec)](_0x252eed['height']/0x2);},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x206)]=function(){const _0x51191f=_0x29c7b3;this[_0x51191f(0x3aa)](),this['addAutoBattleCommand'](),this[_0x51191f(0x46f)](),this[_0x51191f(0xa6c)](),this[_0x51191f(0x62e)](),this[_0x51191f(0x2ab)]();},Window_PartyCommand['prototype']['addFightCommand']=function(){const _0x509f2f=_0x29c7b3,_0x297d9d=this['commandStyle'](),_0x5f0127=VisuMZ[_0x509f2f(0x2e2)]['Settings'][_0x509f2f(0xa04)]['CmdIconFight'],_0x554fa4=_0x297d9d===_0x509f2f(0x391)?TextManager[_0x509f2f(0x6b0)]:'\x5cI[%1]%2'['format'](_0x5f0127,TextManager[_0x509f2f(0x6b0)]),_0x418975=this[_0x509f2f(0xa0b)]();this[_0x509f2f(0xb4a)](_0x554fa4,_0x509f2f(0x6b0),_0x418975);},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0xa0b)]=function(){return!![];},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x1cf)]=function(){const _0x1d3a85=_0x29c7b3;if(!this[_0x1d3a85(0x639)]())return;const _0x46662f=this[_0x1d3a85(0x5d1)](),_0x82c901=VisuMZ[_0x1d3a85(0x2e2)]['Settings'][_0x1d3a85(0xa04)][_0x1d3a85(0x780)],_0x2b4c65=_0x46662f===_0x1d3a85(0x391)?TextManager[_0x1d3a85(0x285)]:_0x1d3a85(0x88f)[_0x1d3a85(0x77d)](_0x82c901,TextManager[_0x1d3a85(0x285)]),_0x262b1c=this[_0x1d3a85(0x3de)]();this[_0x1d3a85(0xb4a)](_0x2b4c65,_0x1d3a85(0x285),_0x262b1c);},Window_PartyCommand['prototype']['isAutoBattleCommandAdded']=function(){const _0x43fd22=_0x29c7b3;return VisuMZ['BattleCore'][_0x43fd22(0xc14)][_0x43fd22(0xa04)]['CommandAddAutoBattle'];},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x3de)]=function(){return!![];},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x46f)]=function(){},Window_PartyCommand['prototype'][_0x29c7b3(0xa6c)]=function(){const _0x5f4e2b=_0x29c7b3,_0x177484=VisuMZ[_0x5f4e2b(0x2e2)]['Settings'][_0x5f4e2b(0xa04)]['CommandAddStatus']??!![];if(!_0x177484)return;const _0x33b266=this[_0x5f4e2b(0x5d1)](),_0x5ca85d=VisuMZ[_0x5f4e2b(0x2e2)]['Settings'][_0x5f4e2b(0x63c)][_0x5f4e2b(0x1a6)]??0x57,_0x4e3cf4=_0x33b266===_0x5f4e2b(0x391)?TextManager[_0x5f4e2b(0x7b7)]:'\x5cI[%1]%2'[_0x5f4e2b(0x77d)](_0x5ca85d,TextManager[_0x5f4e2b(0x7b7)]),_0xace619=!![];this[_0x5f4e2b(0xb4a)](_0x4e3cf4,_0x5f4e2b(0x7b7),_0xace619);},Window_PartyCommand['prototype'][_0x29c7b3(0x62e)]=function(){const _0x463324=_0x29c7b3;if(!this[_0x463324(0x937)]())return;const _0x275894=this[_0x463324(0x5d1)](),_0x4c4173=VisuMZ[_0x463324(0x2e2)]['Settings'][_0x463324(0xa04)][_0x463324(0x1d7)],_0x308db4=_0x275894==='text'?TextManager['options']:_0x463324(0x88f)[_0x463324(0x77d)](_0x4c4173,TextManager['options']),_0x592b4f=this['isOptionsCommandEnabled']();this[_0x463324(0xb4a)](_0x308db4,'options',_0x592b4f);},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x937)]=function(){const _0x1f3ca0=_0x29c7b3;return VisuMZ[_0x1f3ca0(0x2e2)][_0x1f3ca0(0xc14)][_0x1f3ca0(0xa04)][_0x1f3ca0(0x384)];},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x2f4)]=function(){return!![];},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x2ab)]=function(){const _0x573912=_0x29c7b3,_0x5d1ae7=this[_0x573912(0x5d1)](),_0x5b0bbb=VisuMZ[_0x573912(0x2e2)][_0x573912(0xc14)][_0x573912(0xa04)][_0x573912(0x71e)],_0x32739e=_0x5d1ae7===_0x573912(0x391)?TextManager[_0x573912(0x3a2)]:'\x5cI[%1]%2'[_0x573912(0x77d)](_0x5b0bbb,TextManager[_0x573912(0x3a2)]),_0xc107ce=this[_0x573912(0xad2)]();this[_0x573912(0xb4a)](_0x32739e,_0x573912(0x3a2),_0xc107ce);},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0xad2)]=function(){const _0x22fe4c=_0x29c7b3;return BattleManager[_0x22fe4c(0x175)]();},Window_PartyCommand['prototype'][_0x29c7b3(0x451)]=function(){const _0x3ef873=_0x29c7b3;return VisuMZ['BattleCore']['Settings'][_0x3ef873(0xa04)][_0x3ef873(0x22b)];},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x71d)]=function(_0x264976){const _0x1ca361=_0x29c7b3,_0x1e4995=this[_0x1ca361(0xae1)](_0x264976);if(_0x1e4995==='iconText')this[_0x1ca361(0x17b)](_0x264976);else _0x1e4995===_0x1ca361(0x564)?this[_0x1ca361(0x6c3)](_0x264976):Window_Command[_0x1ca361(0xc03)][_0x1ca361(0x71d)]['call'](this,_0x264976);},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x5d1)]=function(){const _0x179d5f=_0x29c7b3;return VisuMZ[_0x179d5f(0x2e2)][_0x179d5f(0xc14)][_0x179d5f(0xa04)][_0x179d5f(0x324)];},Window_PartyCommand['prototype'][_0x29c7b3(0xae1)]=function(_0x4c4050){const _0x56e91d=_0x29c7b3;if(_0x4c4050<0x0)return _0x56e91d(0x391);const _0x53ac63=this['commandStyle']();if(_0x53ac63!=='auto')return _0x53ac63;else{if(this[_0x56e91d(0x428)]()>0x0){const _0xaeee13=this[_0x56e91d(0x4a9)](_0x4c4050);if(_0xaeee13[_0x56e91d(0x290)](/\\I\[(\d+)\]/i)){const _0x2f389d=this[_0x56e91d(0x657)](_0x4c4050),_0xfad1b=this['textSizeEx'](_0xaeee13)[_0x56e91d(0x580)];return _0xfad1b<=_0x2f389d[_0x56e91d(0x580)]?_0x56e91d(0xa18):'icon';}}}return _0x56e91d(0x391);},Window_PartyCommand['prototype'][_0x29c7b3(0x17b)]=function(_0x18b2d7){const _0x4d22d3=_0x29c7b3,_0xf424cc=this[_0x4d22d3(0x657)](_0x18b2d7),_0x240b09=this[_0x4d22d3(0x4a9)](_0x18b2d7),_0x30dffd=this[_0x4d22d3(0x33f)](_0x240b09)['width'];this['changePaintOpacity'](this['isCommandEnabled'](_0x18b2d7));const _0x49b67c=this['itemTextAlign']();if(_0x49b67c===_0x4d22d3(0xc23))this[_0x4d22d3(0x914)](_0x240b09,_0xf424cc['x']+_0xf424cc[_0x4d22d3(0x580)]-_0x30dffd,_0xf424cc['y'],_0x30dffd);else{if(_0x49b67c===_0x4d22d3(0x5cb)){const _0x2fa4ec=_0xf424cc['x']+Math[_0x4d22d3(0x1ec)]((_0xf424cc[_0x4d22d3(0x580)]-_0x30dffd)/0x2);this['drawTextEx'](_0x240b09,_0x2fa4ec,_0xf424cc['y'],_0x30dffd);}else this[_0x4d22d3(0x914)](_0x240b09,_0xf424cc['x'],_0xf424cc['y'],_0x30dffd);}},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x6c3)]=function(_0xfa412d){const _0x52f953=_0x29c7b3;this[_0x52f953(0x4a9)](_0xfa412d)[_0x52f953(0x290)](/\\I\[(\d+)\]/i);const _0x26f93b=Number(RegExp['$1'])||0x0,_0x3e63e0=this[_0x52f953(0x657)](_0xfa412d),_0x368a3f=_0x3e63e0['x']+Math[_0x52f953(0x1ec)]((_0x3e63e0[_0x52f953(0x580)]-ImageManager['iconWidth'])/0x2),_0x19241d=_0x3e63e0['y']+(_0x3e63e0[_0x52f953(0x719)]-ImageManager[_0x52f953(0x98e)])/0x2;this[_0x52f953(0x23d)](_0x26f93b,_0x368a3f,_0x19241d);},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x459)]=function(){},Window_PartyCommand['prototype'][_0x29c7b3(0x5ad)]=function(){const _0x1cfb38=_0x29c7b3;Window_Command[_0x1cfb38(0xc03)][_0x1cfb38(0x5ad)][_0x1cfb38(0x8d6)](this);const _0x399ad8=this[_0x1cfb38(0x815)]();_0x399ad8===_0x1cfb38(0x5d2)&&this[_0x1cfb38(0x685)]();},Window_PartyCommand['prototype']['battleLayoutStyle']=function(){const _0x5bfb81=_0x29c7b3;if(this[_0x5bfb81(0x199)])return this[_0x5bfb81(0x199)];return this['_battleLayoutStyle']=SceneManager['_scene'][_0x5bfb81(0x815)](),this[_0x5bfb81(0x199)];},Window_PartyCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x1c2)]=function(){const _0xa64815=_0x29c7b3,_0x173138=VisuMZ[_0xa64815(0x2e2)][_0xa64815(0xc14)][_0xa64815(0xa04)],_0x1e15c8=this[_0xa64815(0x802)]();switch(_0x1e15c8){case _0xa64815(0x6b0):this[_0xa64815(0xb47)][_0xa64815(0x21d)](_0x173138[_0xa64815(0x701)]);break;case _0xa64815(0x285):this['_helpWindow'][_0xa64815(0x21d)](_0x173138[_0xa64815(0x56d)]);break;case _0xa64815(0x967):this[_0xa64815(0xb47)][_0xa64815(0x21d)](_0x173138[_0xa64815(0x23b)]);break;case _0xa64815(0x3a2):this[_0xa64815(0xb47)]['setText'](_0x173138[_0xa64815(0x5fc)]);break;case _0xa64815(0x7b7):this['_helpWindow'][_0xa64815(0x21d)](Window_InBattleStatus[_0xa64815(0x234)][_0xa64815(0x227)]);break;default:this[_0xa64815(0xb47)]['setText']('');break;}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x860)]=Window_ActorCommand[_0x29c7b3(0xc03)]['initialize'],Window_ActorCommand['prototype']['initialize']=function(_0x5f0640){const _0x36afbc=_0x29c7b3;VisuMZ[_0x36afbc(0x2e2)]['Window_ActorCommand_initialize'][_0x36afbc(0x8d6)](this,_0x5f0640),this[_0x36afbc(0x1f9)](_0x5f0640);},Window_ActorCommand[_0x29c7b3(0xc03)]['createCommandNameWindow']=function(_0x1739ca){const _0x460fdc=_0x29c7b3,_0x488bdd=new Rectangle(0x0,0x0,_0x1739ca[_0x460fdc(0x580)],_0x1739ca[_0x460fdc(0x719)]);this['_commandNameWindow']=new Window_Base(_0x488bdd),this[_0x460fdc(0x230)][_0x460fdc(0x81b)]=0x0,this[_0x460fdc(0xa56)](this[_0x460fdc(0x230)]),this[_0x460fdc(0x9d4)]();},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x989)]=function(){const _0x163597=_0x29c7b3;Window_Command[_0x163597(0xc03)]['callUpdateHelp'][_0x163597(0x8d6)](this);if(this[_0x163597(0x230)])this[_0x163597(0x9d4)]();},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x9d4)]=function(){const _0x3d8830=_0x29c7b3,_0x26d8c6=this[_0x3d8830(0x230)];_0x26d8c6[_0x3d8830(0x6b6)][_0x3d8830(0x917)]();const _0x5f3618=this[_0x3d8830(0xae1)](this['index']());if(_0x5f3618===_0x3d8830(0x564)&&this[_0x3d8830(0x428)]()>0x0){const _0x360ce0=this[_0x3d8830(0x657)](this[_0x3d8830(0xb21)]());let _0x435ec1=this[_0x3d8830(0x4a9)](this[_0x3d8830(0xb21)]());_0x435ec1=_0x435ec1[_0x3d8830(0xa2c)](/\\I\[(\d+)\]/gi,''),_0x26d8c6[_0x3d8830(0x738)](),this[_0x3d8830(0x468)](_0x435ec1,_0x360ce0),this[_0x3d8830(0x702)](_0x435ec1,_0x360ce0),this['commandNameWindowCenter'](_0x435ec1,_0x360ce0);}},Window_ActorCommand['prototype']['commandNameWindowDrawBackground']=function(_0x38dc61,_0xbdaeba){},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x702)]=function(_0x164067,_0x5e3f41){const _0x1d2151=_0x29c7b3,_0x5e70b4=this[_0x1d2151(0x230)];_0x5e70b4[_0x1d2151(0x946)](_0x164067,0x0,_0x5e3f41['y'],_0x5e70b4[_0x1d2151(0x6aa)],_0x1d2151(0x5cb));},Window_ActorCommand[_0x29c7b3(0xc03)]['commandNameWindowCenter']=function(_0x349ae1,_0x135b3d){const _0x5eb8f4=_0x29c7b3,_0x183a87=this[_0x5eb8f4(0x230)],_0x17c980=$gameSystem[_0x5eb8f4(0x8d3)](),_0x40fd14=_0x135b3d['x']+Math[_0x5eb8f4(0x1ec)](_0x135b3d['width']/0x2)+_0x17c980;_0x183a87['x']=_0x183a87[_0x5eb8f4(0x580)]/-0x2+_0x40fd14,_0x183a87['y']=Math[_0x5eb8f4(0x1ec)](_0x135b3d[_0x5eb8f4(0x719)]/0x2);},Window_ActorCommand['prototype'][_0x29c7b3(0x206)]=function(){const _0x333d6d=_0x29c7b3;if(!this[_0x333d6d(0x778)])return;const _0x21f1e2=this[_0x333d6d(0x778)]['battleCommands']();for(const _0x605cce of _0x21f1e2){this[_0x333d6d(0x29a)](_0x605cce[_0x333d6d(0x36b)]()[_0x333d6d(0x89a)]());}},Window_ActorCommand['prototype'][_0x29c7b3(0x29a)]=function(_0x38705d){const _0x5d4191=_0x29c7b3;_0x38705d===_0x5d4191(0x620)&&this[_0x5d4191(0x48e)]();['STYPES',_0x5d4191(0x8dc)]['includes'](_0x38705d)&&this[_0x5d4191(0x21f)]();_0x38705d==='GUARD'&&this[_0x5d4191(0x1ac)]();_0x38705d===_0x5d4191(0xb3f)&&this['addItemCommand']();_0x38705d===_0x5d4191(0x237)&&this[_0x5d4191(0xa6c)]();_0x38705d===_0x5d4191(0xb57)&&this[_0x5d4191(0x2ab)]();_0x38705d===_0x5d4191(0xb00)&&this[_0x5d4191(0x1cf)]();if(_0x38705d[_0x5d4191(0x290)](/STYPE: (\d+)/i)){const _0x131cdf=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x131cdf);}else{if(_0x38705d['match'](/STYPE: (.*)/i)){const _0x3680da=DataManager['getStypeIdWithName'](RegExp['$1']);this['addSkillTypeCommand'](_0x3680da);}}_0x38705d==='ALL\x20SKILLS'&&this['addSingleSkillCommands']();if(_0x38705d['match'](/SKILL: (\d+)/i)){const _0x424367=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x424367]);}else{if(_0x38705d[_0x5d4191(0x290)](/SKILL: (.*)/i)){const _0x1c39b4=DataManager[_0x5d4191(0xb0e)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x1c39b4]);}}_0x38705d===_0x5d4191(0xb68)&&Imported[_0x5d4191(0x2c9)]&&this[_0x5d4191(0x410)](),['COMBATLOG',_0x5d4191(0x374)][_0x5d4191(0xba2)](_0x38705d)&&Imported['VisuMZ_4_CombatLog']&&this[_0x5d4191(0x2fc)](),_0x38705d===_0x5d4191(0x339)&&Imported[_0x5d4191(0x8e5)]&&this['addWeaponSwapCommand'](!![]),_0x38705d===_0x5d4191(0x387)&&Imported[_0x5d4191(0x79b)]&&this[_0x5d4191(0x5c0)]();},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x48e)]=function(){const _0x25d0f6=_0x29c7b3,_0x30e0b3=$dataSkills[this[_0x25d0f6(0x778)][_0x25d0f6(0x881)]()];if(!_0x30e0b3)return;if(!this['canAddSkillCommand'](_0x30e0b3))return;const _0x2b1628=this[_0x25d0f6(0x5d1)](),_0xd736b3=DataManager[_0x25d0f6(0xa05)](_0x30e0b3),_0x2e622b=DataManager[_0x25d0f6(0x9a0)](_0x30e0b3),_0x9075d5=_0x2b1628===_0x25d0f6(0x391)?_0xd736b3:_0x25d0f6(0x88f)['format'](_0x2e622b,_0xd736b3);this[_0x25d0f6(0xb4a)](_0x9075d5,_0x25d0f6(0x1dc),this['_actor'][_0x25d0f6(0x48b)]());},Window_ActorCommand[_0x29c7b3(0xc03)]['addGuardCommand']=function(){const _0x3ffcd2=_0x29c7b3,_0x41366d=$dataSkills[this[_0x3ffcd2(0x778)]['guardSkillId']()];if(!_0x41366d)return;if(!this[_0x3ffcd2(0x598)](_0x41366d))return;const _0x4d9e67=this[_0x3ffcd2(0x5d1)](),_0x59f231=DataManager[_0x3ffcd2(0xa05)](_0x41366d),_0x52aee1=DataManager[_0x3ffcd2(0x9a0)](_0x41366d),_0x406087=_0x4d9e67===_0x3ffcd2(0x391)?_0x59f231:'\x5cI[%1]%2'[_0x3ffcd2(0x77d)](_0x52aee1,_0x59f231);this[_0x3ffcd2(0xb4a)](_0x406087,_0x3ffcd2(0x9b0),this[_0x3ffcd2(0x778)][_0x3ffcd2(0x1e6)]());},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x398)]=function(){const _0x5195f0=_0x29c7b3,_0x19279b=this[_0x5195f0(0x5d1)](),_0x1e9bd2=VisuMZ['BattleCore'][_0x5195f0(0xc14)][_0x5195f0(0xa31)][_0x5195f0(0x4fa)],_0x5e7f0d=_0x19279b===_0x5195f0(0x391)?TextManager[_0x5195f0(0x7cc)]:_0x5195f0(0x88f)[_0x5195f0(0x77d)](_0x1e9bd2,TextManager[_0x5195f0(0x7cc)]),_0x3bdec6=this['isItemCommandEnabled']();this[_0x5195f0(0xb4a)](_0x5e7f0d,_0x5195f0(0x7cc),_0x3bdec6);},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0xa6a)]=function(){const _0x15669b=_0x29c7b3;return this[_0x15669b(0x778)]&&this[_0x15669b(0x778)][_0x15669b(0xaeb)]();},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x21f)]=function(){const _0x464f70=_0x29c7b3,_0x1952c8=this['_actor'][_0x464f70(0x82e)]();for(const _0x476d6e of _0x1952c8){this['addSkillTypeCommand'](_0x476d6e);}},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x7e6)]=function(_0x2f17bb){const _0x5520dd=_0x29c7b3;let _0xdbb567=$dataSystem['skillTypes'][_0x2f17bb];if(!_0xdbb567)return;let _0x2f727b=_0xdbb567;const _0x5df72e=this[_0x5520dd(0x5d1)]();if(_0x5df72e==='text')_0x2f727b=_0x2f727b[_0x5520dd(0xa2c)](/\x1I\[(\d+)\]/gi,''),_0x2f727b=_0x2f727b[_0x5520dd(0xa2c)](/\\I\[(\d+)\]/gi,'');else{if(!_0xdbb567[_0x5520dd(0x290)](/\\I\[(\d+)\]/i)){const _0x842df1=Imported[_0x5520dd(0xacd)]?VisuMZ['SkillsStatesCore'][_0x5520dd(0xc14)][_0x5520dd(0x145)]:VisuMZ[_0x5520dd(0x2e2)]['Settings'][_0x5520dd(0xa31)],_0x2a2043=$dataSystem[_0x5520dd(0x31d)][_0x5520dd(0xba2)](_0x2f17bb),_0x429675=_0x2a2043?_0x842df1['IconStypeMagic']:_0x842df1[_0x5520dd(0x74e)];_0x2f727b=_0x5520dd(0x88f)[_0x5520dd(0x77d)](_0x429675,_0xdbb567);}}this['addCommand'](_0x2f727b,_0x5520dd(0xa1a),!![],_0x2f17bb);},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x1cb)]=function(){const _0x3b46e7=_0x29c7b3,_0x487440=this[_0x3b46e7(0x778)][_0x3b46e7(0x82e)](),_0x3f9162=this[_0x3b46e7(0x778)][_0x3b46e7(0x93c)]();for(const _0x3a3414 of _0x3f9162){if(!_0x3a3414)continue;if(Imported[_0x3b46e7(0xacd)]){if(this[_0x3b46e7(0x9c8)](_0x3a3414))continue;if(this[_0x3b46e7(0x47e)](_0x3a3414))continue;}else{if(!_0x487440['includes'](_0x3a3414[_0x3b46e7(0x81d)]))continue;}this[_0x3b46e7(0x378)](_0x3a3414);}},Window_ActorCommand[_0x29c7b3(0xc03)]['noSimilarSTypes']=function(_0x4fff22){const _0x48678e=_0x29c7b3,_0x1992bb=this[_0x48678e(0x778)][_0x48678e(0x82e)](),_0x28b53a=_0x1992bb['filter'](_0x30eee4=>DataManager[_0x48678e(0x4b8)](_0x4fff22)[_0x48678e(0xba2)](_0x30eee4));return _0x28b53a['length']<=0x0;},Window_ActorCommand['prototype'][_0x29c7b3(0x47e)]=function(_0x299055){const _0xdcde5a=_0x29c7b3;if(Imported[_0xdcde5a(0xacd)]){if(VisuMZ[_0xdcde5a(0x33e)][_0xdcde5a(0x65e)]>=1.24){if(this[_0xdcde5a(0x778)]){if(!VisuMZ[_0xdcde5a(0x33e)][_0xdcde5a(0x9d7)](this[_0xdcde5a(0x778)],_0x299055))return!![];if(!VisuMZ['SkillsStatesCore']['CheckVisibleSwitchNotetags'](this[_0xdcde5a(0x778)],_0x299055))return!![];if(!VisuMZ['SkillsStatesCore']['CheckVisibleSkillNotetags'](this[_0xdcde5a(0x778)],_0x299055))return!![];}}else{if(!Window_SkillList[_0xdcde5a(0xc03)]['checkShowHideBattleNotetags']['call'](this,_0x299055))return!![];if(!Window_SkillList[_0xdcde5a(0xc03)][_0xdcde5a(0x8e1)]['call'](this,_0x299055))return!![];if(!Window_SkillList[_0xdcde5a(0xc03)][_0xdcde5a(0xa02)][_0xdcde5a(0x8d6)](this,_0x299055))return!![];}}return![];},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x378)]=function(_0x14fc6e){const _0x5156c8=_0x29c7b3;if(!_0x14fc6e)return;if(!this[_0x5156c8(0x598)](_0x14fc6e))return;const _0x3097d1=this[_0x5156c8(0x5d1)](),_0x50d452=DataManager[_0x5156c8(0xa05)](_0x14fc6e),_0x367bbc=DataManager[_0x5156c8(0x9a0)](_0x14fc6e),_0x11afb8=_0x3097d1===_0x5156c8(0x391)?_0x50d452:_0x5156c8(0x88f)[_0x5156c8(0x77d)](_0x367bbc,_0x50d452),_0x1c87c5=this['_actor'][_0x5156c8(0x133)](_0x14fc6e);this[_0x5156c8(0xb4a)](_0x11afb8,_0x5156c8(0x954),_0x1c87c5,_0x14fc6e['id']);},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x598)]=function(_0x509039){const _0x242644=_0x29c7b3,_0x23a800=_0x509039[_0x242644(0x124)];if(_0x23a800['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x242644(0x778)]['isLearnedSkill'](_0x509039['id']))return![];}if(_0x23a800[_0x242644(0x290)](/<COMMAND REQUIRE ACCESS>/i)){if(!this['_actor'][_0x242644(0x3b2)](_0x509039['id']))return![];}const _0x5ded67=VisuMZ[_0x242644(0x2e2)]['createKeyJS'](_0x509039,_0x242644(0x73e));if(VisuMZ['BattleCore']['JS'][_0x5ded67]){if(!VisuMZ[_0x242644(0x2e2)]['JS'][_0x5ded67][_0x242644(0x8d6)](this,this[_0x242644(0x778)],_0x509039))return![];}return VisuMZ[_0x242644(0x2e2)][_0x242644(0x774)](_0x509039);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x774)]=function(_0x2e5377){const _0x458e1d=_0x29c7b3,_0x1c0412=_0x2e5377['note'];if(_0x1c0412[_0x458e1d(0x290)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x93ac03=JSON[_0x458e1d(0xa55)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x2b2489 of _0x93ac03){if(!$gameSwitches['value'](_0x2b2489))return![];}return!![];}if(_0x1c0412['match'](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x198cdd=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x81a788 of _0x198cdd){if(!$gameSwitches[_0x458e1d(0x8b1)](_0x81a788))return![];}return!![];}if(_0x1c0412[_0x458e1d(0x290)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3259cc=JSON[_0x458e1d(0xa55)]('['+RegExp['$1'][_0x458e1d(0x290)](/\d+/g)+']');for(const _0x51f196 of _0x3259cc){if($gameSwitches[_0x458e1d(0x8b1)](_0x51f196))return!![];}return![];}if(_0x1c0412[_0x458e1d(0x290)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x249413=JSON[_0x458e1d(0xa55)]('['+RegExp['$1'][_0x458e1d(0x290)](/\d+/g)+']');for(const _0x5a3b4b of _0x249413){if(!$gameSwitches[_0x458e1d(0x8b1)](_0x5a3b4b))return!![];}return![];}if(_0x1c0412[_0x458e1d(0x290)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1a8ece=JSON[_0x458e1d(0xa55)]('['+RegExp['$1'][_0x458e1d(0x290)](/\d+/g)+']');for(const _0x4ff77b of _0x1a8ece){if(!$gameSwitches[_0x458e1d(0x8b1)](_0x4ff77b))return!![];}return![];}if(_0x1c0412[_0x458e1d(0x290)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x35b09f=JSON[_0x458e1d(0xa55)]('['+RegExp['$1'][_0x458e1d(0x290)](/\d+/g)+']');for(const _0xc677aa of _0x35b09f){if($gameSwitches[_0x458e1d(0x8b1)](_0xc677aa))return![];}return!![];}return!![];},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0xa6c)]=function(){const _0x166f67=_0x29c7b3,_0x3e5e2b=this[_0x166f67(0x5d1)](),_0x8f0d59=VisuMZ['BattleCore'][_0x166f67(0xc14)][_0x166f67(0x63c)][_0x166f67(0x1a6)]??0x57,_0x5536e3=_0x3e5e2b==='text'?TextManager[_0x166f67(0x7b7)]:_0x166f67(0x88f)[_0x166f67(0x77d)](_0x8f0d59,TextManager[_0x166f67(0x7b7)]),_0x450cee=!![];this['addCommand'](_0x5536e3,_0x166f67(0x7b7),_0x450cee);},Window_ActorCommand['prototype'][_0x29c7b3(0x2ab)]=function(){const _0x2e4867=_0x29c7b3,_0x39a711=this[_0x2e4867(0x5d1)](),_0x5451a3=VisuMZ[_0x2e4867(0x2e2)][_0x2e4867(0xc14)][_0x2e4867(0xa04)][_0x2e4867(0x71e)],_0xd7f243=_0x39a711===_0x2e4867(0x391)?TextManager['escape']:_0x2e4867(0x88f)['format'](_0x5451a3,TextManager[_0x2e4867(0x3a2)]),_0xe8e0d3=this['isEscapeCommandEnabled']();this[_0x2e4867(0xb4a)](_0xd7f243,_0x2e4867(0x3a2),_0xe8e0d3);},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0xad2)]=function(){const _0x42713f=_0x29c7b3;return BattleManager[_0x42713f(0x175)]();},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x1cf)]=function(){const _0x4edf62=_0x29c7b3,_0x15f814=this[_0x4edf62(0x5d1)](),_0x5d9b68=VisuMZ[_0x4edf62(0x2e2)][_0x4edf62(0xc14)]['PartyCmd'][_0x4edf62(0x780)],_0x571c4e=_0x15f814===_0x4edf62(0x391)?TextManager[_0x4edf62(0x285)]:_0x4edf62(0x88f)['format'](_0x5d9b68,TextManager[_0x4edf62(0x285)]),_0x1ffdab=this['isAutoBattleCommandEnabled']();this[_0x4edf62(0xb4a)](_0x571c4e,_0x4edf62(0x285),_0x1ffdab);},Window_ActorCommand[_0x29c7b3(0xc03)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x451)]=function(){const _0x5e8989=_0x29c7b3;return VisuMZ[_0x5e8989(0x2e2)][_0x5e8989(0xc14)][_0x5e8989(0xa31)][_0x5e8989(0x22b)];},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x71d)]=function(_0x52c236){const _0x15026a=_0x29c7b3,_0x3fffa3=this['commandStyleCheck'](_0x52c236);if(_0x3fffa3==='iconText')this['drawItemStyleIconText'](_0x52c236);else _0x3fffa3===_0x15026a(0x564)?this[_0x15026a(0x6c3)](_0x52c236):Window_Command[_0x15026a(0xc03)][_0x15026a(0x71d)][_0x15026a(0x8d6)](this,_0x52c236);this[_0x15026a(0x38f)](_0x52c236);},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x5d1)]=function(){const _0x14315e=_0x29c7b3;return VisuMZ[_0x14315e(0x2e2)][_0x14315e(0xc14)]['ActorCmd'][_0x14315e(0x324)];},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0xae1)]=function(_0x3c11a8){const _0x802556=_0x29c7b3;if(_0x3c11a8<0x0)return _0x802556(0x391);const _0x4a57ff=this[_0x802556(0x5d1)]();if(_0x4a57ff!==_0x802556(0x826))return _0x4a57ff;else{if(this['maxItems']()>0x0){const _0x85fd50=this['commandName'](_0x3c11a8);if(_0x85fd50[_0x802556(0x290)](/\\I\[(\d+)\]/i)){const _0x142be8=this[_0x802556(0x657)](_0x3c11a8),_0x173628=this[_0x802556(0x33f)](_0x85fd50)[_0x802556(0x580)];return _0x173628<=_0x142be8[_0x802556(0x580)]?'iconText':_0x802556(0x564);}}}return _0x802556(0x391);},Window_ActorCommand[_0x29c7b3(0xc03)]['drawItemStyleIconText']=function(_0xa13be){const _0x42715f=_0x29c7b3,_0x397301=this[_0x42715f(0x657)](_0xa13be),_0x2511ee=this[_0x42715f(0x4a9)](_0xa13be),_0x1e0967=this['textSizeEx'](_0x2511ee)['width'];this[_0x42715f(0x3ea)](this[_0x42715f(0xbc8)](_0xa13be));const _0x1aa3cb=this[_0x42715f(0x451)]();if(_0x1aa3cb===_0x42715f(0xc23))this[_0x42715f(0x914)](_0x2511ee,_0x397301['x']+_0x397301[_0x42715f(0x580)]-_0x1e0967,_0x397301['y'],_0x1e0967);else{if(_0x1aa3cb==='center'){const _0x429643=_0x397301['x']+Math[_0x42715f(0x1ec)]((_0x397301[_0x42715f(0x580)]-_0x1e0967)/0x2);this[_0x42715f(0x914)](_0x2511ee,_0x429643,_0x397301['y'],_0x1e0967);}else this[_0x42715f(0x914)](_0x2511ee,_0x397301['x'],_0x397301['y'],_0x1e0967);}},Window_ActorCommand['prototype']['drawItemStyleIcon']=function(_0x3b5642){const _0x1f3150=_0x29c7b3;this['commandName'](_0x3b5642)[_0x1f3150(0x290)](/\\I\[(\d+)\]/i);const _0xeee557=Number(RegExp['$1'])||0x0,_0x28ab65=this['itemLineRect'](_0x3b5642),_0x9427cc=_0x28ab65['x']+Math['floor']((_0x28ab65['width']-ImageManager[_0x1f3150(0xb33)])/0x2),_0x1490a5=_0x28ab65['y']+(_0x28ab65[_0x1f3150(0x719)]-ImageManager[_0x1f3150(0x98e)])/0x2;this['drawIcon'](_0xeee557,_0x9427cc,_0x1490a5);},Window_ActorCommand[_0x29c7b3(0xc03)]['drawSingleSkillCost']=function(_0x65ff36){const _0x468de2=_0x29c7b3;if(!(VisuMZ['BattleCore'][_0x468de2(0xc14)][_0x468de2(0xa31)]['ShowCosts']??!![]))return;const _0x38e970=this['commandSymbol'](_0x65ff36);if(!['attack','guard',_0x468de2(0x954)][_0x468de2(0xba2)](_0x38e970))return;const _0x3c97e2=this['itemLineRect'](_0x65ff36);let _0x5135fd=null;if(_0x38e970===_0x468de2(0x1dc))_0x5135fd=$dataSkills[this['_actor'][_0x468de2(0x881)]()];else _0x38e970===_0x468de2(0x9b0)?_0x5135fd=$dataSkills[this[_0x468de2(0x778)][_0x468de2(0x7a7)]()]:_0x5135fd=$dataSkills[this[_0x468de2(0x3ad)][_0x65ff36][_0x468de2(0xbd0)]];this[_0x468de2(0xbff)](this[_0x468de2(0x778)],_0x5135fd,_0x3c97e2['x'],_0x3c97e2['y'],_0x3c97e2['width']);},Window_ActorCommand['prototype'][_0x29c7b3(0xbff)]=function(_0x16a2ca,_0x3f6842,_0x53783f,_0x282290,_0x548743){const _0x246512=_0x29c7b3;if(!_0x3f6842)return;Imported[_0x246512(0xacd)]?Window_Command[_0x246512(0xc03)]['drawSkillCost']['call'](this,_0x16a2ca,_0x3f6842,_0x53783f,_0x282290,_0x548743):Window_SkillList['prototype']['drawSkillCost'][_0x246512(0x8d6)](this,_0x3f6842,_0x53783f,_0x282290,_0x548743);},Window_ActorCommand['prototype'][_0x29c7b3(0x459)]=function(){},Window_ActorCommand['prototype'][_0x29c7b3(0x5ad)]=function(){const _0x2bcb1b=_0x29c7b3;Window_Command[_0x2bcb1b(0xc03)]['activate'][_0x2bcb1b(0x8d6)](this);const _0xb817c7=this[_0x2bcb1b(0x815)]();_0xb817c7===_0x2bcb1b(0x5d2)&&this[_0x2bcb1b(0x685)]();},Window_ActorCommand['prototype'][_0x29c7b3(0x815)]=function(){const _0x2fa71e=_0x29c7b3;if(this[_0x2fa71e(0x199)])return this['_battleLayoutStyle'];return this[_0x2fa71e(0x199)]=SceneManager[_0x2fa71e(0x364)][_0x2fa71e(0x815)](),this[_0x2fa71e(0x199)];},VisuMZ['BattleCore'][_0x29c7b3(0x8f8)]=Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0xb10)],Window_ActorCommand['prototype'][_0x29c7b3(0xb10)]=function(_0x311d26){const _0x1c2264=_0x29c7b3,_0x1fb6bb=this[_0x1c2264(0x815)]();if(_0x311d26&&['xp','portrait']['includes'](_0x1fb6bb))this[_0x1c2264(0x241)](_0x311d26);else _0x311d26&&['border']['includes'](_0x1fb6bb)&&(this[_0x1c2264(0x9de)](_0x311d26),this[_0x1c2264(0x685)]());VisuMZ[_0x1c2264(0x2e2)][_0x1c2264(0x8f8)][_0x1c2264(0x8d6)](this,_0x311d26),_0x311d26&&$gameTroop[_0x1c2264(0x89d)]()[_0x1c2264(0xba7)]>0x0&&_0x311d26[_0x1c2264(0xa65)]()&&_0x311d26[_0x1c2264(0xa65)]()[_0x1c2264(0x7fe)]();},Window_ActorCommand['prototype']['resizeWindowXPStyle']=function(_0x140214){const _0xd6e698=_0x29c7b3,_0x8a0a6f=VisuMZ['BattleCore'][_0xd6e698(0xc14)][_0xd6e698(0xaf9)]['CommandWidth'],_0x18734c=Math['round'](Graphics[_0xd6e698(0xc0c)]/0x3),_0x1d41c8=Math[_0xd6e698(0x50f)](Graphics[_0xd6e698(0xc0c)]/$gameParty[_0xd6e698(0xaad)]()[_0xd6e698(0xba7)]),_0x3491b4=Math['max'](Math[_0xd6e698(0xbce)](_0x18734c,_0x1d41c8),_0x8a0a6f),_0x6972bc=this['fittingHeight'](VisuMZ[_0xd6e698(0x2e2)][_0xd6e698(0xc14)][_0xd6e698(0xaf9)][_0xd6e698(0x6ec)]),_0x2d968a=Math[_0xd6e698(0x1ec)]((Graphics[_0xd6e698(0xc0c)]-Graphics[_0xd6e698(0x580)])/0x2),_0xf5039d=Graphics[_0xd6e698(0xc0c)]-_0x2d968a,_0xefc0ce=(Math[_0xd6e698(0x50f)](_0x1d41c8*_0x140214['index']())+Math[_0xd6e698(0x50f)]((_0x1d41c8-_0x3491b4)/0x2))[_0xd6e698(0x582)](_0x2d968a,_0xf5039d-_0x3491b4),_0x428bb8=Math['round'](SceneManager[_0xd6e698(0x364)][_0xd6e698(0x92e)]['y']-_0x6972bc);this[_0xd6e698(0x392)](_0xefc0ce,_0x428bb8,_0x3491b4,_0x6972bc),this['createContents'](),this[_0xd6e698(0x64d)](0x1);},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x9de)]=function(_0x4ece7b){const _0xf97ff4=_0x29c7b3,_0x7f521e=SceneManager[_0xf97ff4(0x364)][_0xf97ff4(0x83d)]();this[_0xf97ff4(0x392)](_0x7f521e['x'],_0x7f521e['y'],_0x7f521e[_0xf97ff4(0x580)],_0x7f521e[_0xf97ff4(0x719)]),this[_0xf97ff4(0x874)](),this['setBackgroundType'](0x0);},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x91b)]=function(){const _0x34c2d5=_0x29c7b3;if(this[_0x34c2d5(0x868)]){const _0x3e3224=this[_0x34c2d5(0x868)][_0x34c2d5(0xc2a)],_0xa40d20=this[_0x34c2d5(0x580)]-0x8,_0x221aa5=this[_0x34c2d5(0x719)],_0x542612=this[_0x34c2d5(0x5bb)],_0x65ee2d=ColorManager[_0x34c2d5(0x377)](),_0x4da8b9=ColorManager[_0x34c2d5(0x221)]();this[_0x34c2d5(0x868)]['x']=0x4,_0x3e3224['resize'](_0xa40d20,_0x221aa5),_0x3e3224[_0x34c2d5(0xb2b)](0x0,0x0,_0xa40d20,_0x542612,_0x4da8b9,_0x65ee2d,!![]),_0x3e3224[_0x34c2d5(0x292)](0x0,_0x542612,_0xa40d20,_0x221aa5-_0x542612*0x2,_0x65ee2d),_0x3e3224[_0x34c2d5(0xb2b)](0x0,_0x221aa5-_0x542612,_0xa40d20,_0x542612,_0x65ee2d,_0x4da8b9,!![]),this[_0x34c2d5(0x868)][_0x34c2d5(0xa90)](0x0,0x0,_0xa40d20,_0x221aa5);}},Window_ActorCommand['prototype']['updateHelp']=function(){const _0x29326d=_0x29c7b3;if(!this[_0x29326d(0x778)])return;const _0x343db0=VisuMZ['BattleCore'][_0x29326d(0xc14)][_0x29326d(0xa31)],_0x304907=this[_0x29326d(0x802)]();switch(_0x304907){case _0x29326d(0x1dc):this[_0x29326d(0x41f)]($dataSkills[this[_0x29326d(0x778)][_0x29326d(0x881)]()]);break;case _0x29326d(0x9b0):this[_0x29326d(0x41f)]($dataSkills[this[_0x29326d(0x778)][_0x29326d(0x7a7)]()]);break;case'skill':const _0x4bde00=_0x343db0['HelpSkillType'],_0x573813=_0x4bde00['format']($dataSystem['skillTypes'][this[_0x29326d(0xbfc)]()]);this[_0x29326d(0xb47)]['setText'](_0x573813);break;case _0x29326d(0x954):this['setHelpWindowItem']($dataSkills[this['currentExt']()]);break;case _0x29326d(0x7cc):this[_0x29326d(0xb47)]['setText'](_0x343db0[_0x29326d(0xc24)]);break;case _0x29326d(0x3a2):this['_helpWindow'][_0x29326d(0x21d)](_0x343db0['HelpEscape']);break;case'autoBattle':this[_0x29326d(0xb47)][_0x29326d(0x21d)](_0x343db0['HelpAutoBattle']);break;case'status':this[_0x29326d(0xb47)]['setText'](Window_InBattleStatus[_0x29326d(0x234)][_0x29326d(0x227)]);break;default:this[_0x29326d(0xb47)][_0x29326d(0x21d)]('');break;}},Window_ActorCommand['prototype'][_0x29c7b3(0x547)]=function(){const _0x4f41fa=_0x29c7b3;this[_0x4f41fa(0x1f7)](0x0);if(this[_0x4f41fa(0x778)]&&ConfigManager['commandRemember']){const _0x48e5cf=this[_0x4f41fa(0x778)][_0x4f41fa(0x9be)]();this[_0x4f41fa(0x9bd)](_0x48e5cf);if(_0x48e5cf===_0x4f41fa(0xa1a)){const _0x42be41=this[_0x4f41fa(0x778)][_0x4f41fa(0x1b4)]();if(_0x42be41){const _0x3acb45=this[_0x4f41fa(0x830)](_0x4f41fa(0xa1a),_0x42be41[_0x4f41fa(0x81d)]);this[_0x4f41fa(0x8a3)](_0x3acb45||0x0);}}else{if(_0x48e5cf===_0x4f41fa(0x954)){const _0x384401=this[_0x4f41fa(0x778)][_0x4f41fa(0x1b4)]();if(_0x384401){const _0x418ebc=this[_0x4f41fa(0x830)](_0x4f41fa(0x954),_0x384401['id']);this['select'](_0x418ebc||0x0);}}}}},Window_ActorCommand[_0x29c7b3(0xc03)][_0x29c7b3(0x830)]=function(_0x11b424,_0x171ee2){const _0x4e4337=_0x29c7b3;return this['_list'][_0x4e4337(0x479)](_0x5ae225=>_0x5ae225[_0x4e4337(0x2ce)]===_0x11b424&&_0x5ae225[_0x4e4337(0xbd0)]===_0x171ee2);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x56c)]=Window_BattleStatus['prototype'][_0x29c7b3(0x1a0)],Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x1a0)]=function(_0x14d3de){const _0x28591f=_0x29c7b3;VisuMZ['BattleCore'][_0x28591f(0x56c)]['call'](this,_0x14d3de),this[_0x28591f(0x7be)](),this[_0x28591f(0x95f)]();},Window_BattleStatus['prototype']['battleLayoutStyle']=function(){const _0x460c9c=_0x29c7b3;if(this[_0x460c9c(0x199)])return this[_0x460c9c(0x199)];return this['_battleLayoutStyle']=SceneManager[_0x460c9c(0x364)][_0x460c9c(0x815)](),this[_0x460c9c(0x199)];},Window_BattleStatus['prototype']['initBattleCore']=function(){const _0x100551=_0x29c7b3;this['frameVisible']=this[_0x100551(0x6cc)]();const _0x9fbd47=VisuMZ[_0x100551(0x2e2)][_0x100551(0xc14)]['BattleLayout'];_0x9fbd47['StatusWindowSkinHide']&&(this[_0x100551(0x81b)]=0x0);},Window_BattleStatus[_0x29c7b3(0xc03)]['isFrameVisible']=function(){const _0x1584fd=_0x29c7b3,_0x29712e=VisuMZ[_0x1584fd(0x2e2)][_0x1584fd(0xc14)][_0x1584fd(0xaf9)];if(_0x29712e[_0x1584fd(0xbb4)])return!![];const _0x42dab1=this['battleLayoutStyle']();switch(_0x42dab1){case _0x1584fd(0x72f):case _0x1584fd(0x5d2):return!![];break;case _0x1584fd(0x959):case'xp':case _0x1584fd(0xa7c):default:return![];break;}},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x6e6)]=function(){const _0x2212fc=_0x29c7b3;return this[_0x2212fc(0x6cc)]()?0x0:0xa;},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x357)]=function(){const _0x416726=_0x29c7b3,_0x14572d=this['battleLayoutStyle']();switch(_0x14572d){case _0x416726(0x72f):return 0x1;break;case'xp':case _0x416726(0xa7c):return $gameParty[_0x416726(0xaad)]()[_0x416726(0xba7)];break;case _0x416726(0x959):default:return $gameParty[_0x416726(0x33b)]();break;}},Window_BattleStatus[_0x29c7b3(0xc03)]['itemHeight']=function(){const _0x29e90a=_0x29c7b3,_0x9f4d69=this['battleLayoutStyle']();switch(_0x9f4d69){case _0x29e90a(0x72f):return Window_StatusBase[_0x29e90a(0xc03)]['itemHeight']['call'](this);break;case _0x29e90a(0x959):case'xp':case _0x29e90a(0xa7c):default:return this['innerHeight'];break;}},Window_BattleStatus['prototype'][_0x29c7b3(0x5b8)]=function(){const _0x44f7d4=_0x29c7b3,_0x300238=this['battleLayoutStyle']();switch(_0x300238){case _0x44f7d4(0x72f):return Window_StatusBase['prototype'][_0x44f7d4(0x5b8)][_0x44f7d4(0x8d6)](this);break;case'default':case'xp':case _0x44f7d4(0xa7c):default:return 0x0;break;}},Window_BattleStatus[_0x29c7b3(0xc03)]['updatePadding']=function(){const _0x520283=_0x29c7b3;this['isFrameVisible']()?Window_StatusBase[_0x520283(0xc03)][_0x520283(0x3c4)][_0x520283(0x8d6)](this):this[_0x520283(0x5bb)]=0x8;},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x38a)]=function(){const _0x2dae29=_0x29c7b3,_0x44e9a3=VisuMZ[_0x2dae29(0x2e2)][_0x2dae29(0xc14)][_0x2dae29(0xaf9)];_0x44e9a3['StatusWindowSkinFilename']?this['windowskin']=ImageManager[_0x2dae29(0x16c)](_0x44e9a3[_0x2dae29(0xbb4)]):Window_StatusBase[_0x2dae29(0xc03)][_0x2dae29(0x38a)][_0x2dae29(0x8d6)](this);},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x294)]=function(_0x5839fc){const _0x1012e2=_0x29c7b3,_0x5cb8fc=VisuMZ['BattleCore'][_0x1012e2(0xc14)][_0x1012e2(0xaf9)];if(_0x5cb8fc[_0x1012e2(0x1c9)])return;Window_StatusBase[_0x1012e2(0xc03)]['drawItemBackground'][_0x1012e2(0x8d6)](this,_0x5839fc);},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x4f2)]=function(){const _0x543a5e=_0x29c7b3;this[_0x543a5e(0x252)]=!![];},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x592)]=function(){const _0x1516ea=_0x29c7b3;Window_StatusBase['prototype'][_0x1516ea(0x592)][_0x1516ea(0x8d6)](this),this[_0x1516ea(0x1a7)](),this[_0x1516ea(0x637)]();if(this[_0x1516ea(0x815)]()===_0x1516ea(0x5d2))this[_0x1516ea(0x178)]();},Window_BattleStatus[_0x29c7b3(0xc03)]['updateRefresh']=function(){const _0x399d71=_0x29c7b3;if($gameTemp[_0x399d71(0x4f5)]())this[_0x399d71(0x426)](),this[_0x399d71(0x252)]=![],$gameTemp[_0x399d71(0x771)]();else this[_0x399d71(0x252)]&&(this[_0x399d71(0x252)]=![],this[_0x399d71(0x842)](),this['updateAttachmentSprites']());},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0xb6f)]=function(){const _0x338f73=_0x29c7b3;Window_StatusBase['prototype'][_0x338f73(0xb6f)]['call'](this);if(!$gameSystem[_0x338f73(0x204)]())this[_0x338f73(0x842)]();},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x459)]=function(){const _0xc47bbc=_0x29c7b3;if(this[_0xc47bbc(0xba3)]===Window_BattleStatus)return;Window_StatusBase[_0xc47bbc(0xc03)]['hide'][_0xc47bbc(0x8d6)](this);},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x1df)]=function(_0x1b30b4){const _0x445f16=_0x29c7b3,_0x553760=this[_0x445f16(0x815)]();switch(_0x553760){case'xp':case'portrait':break;case _0x445f16(0x959):case _0x445f16(0x72f):case _0x445f16(0x5d2):default:return Window_StatusBase[_0x445f16(0xc03)][_0x445f16(0x1df)][_0x445f16(0x8d6)](this,_0x1b30b4);break;}},VisuMZ['BattleCore'][_0x29c7b3(0x31a)]=Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0xb56)],Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0xb56)]=function(_0x57d8dc){const _0x4b314a=_0x29c7b3,_0x3285f5=this[_0x4b314a(0x815)]();switch(_0x3285f5){case'list':this['drawItemImageListStyle'](_0x57d8dc);break;case'xp':this[_0x4b314a(0x6b2)](_0x57d8dc);break;case _0x4b314a(0xa7c):this[_0x4b314a(0x80d)](_0x57d8dc);break;case _0x4b314a(0x959):case _0x4b314a(0x5d2):default:VisuMZ[_0x4b314a(0x2e2)][_0x4b314a(0x31a)]['call'](this,_0x57d8dc);break;}},Window_BattleStatus[_0x29c7b3(0xc03)]['drawItemStatus']=function(_0x4c0677){const _0x4dbb85=_0x29c7b3,_0x1283a7=this['battleLayoutStyle']();if(!$gameSystem['isSideView']())this[_0x4dbb85(0x6a8)](_0x4c0677);switch(_0x1283a7){case _0x4dbb85(0x72f):this['drawItemStatusListStyle'](_0x4c0677);break;case'xp':case _0x4dbb85(0xa7c):case _0x4dbb85(0x959):case _0x4dbb85(0x5d2):default:this[_0x4dbb85(0x517)](_0x4c0677);break;}},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x5b4)]=function(){const _0x34bcc5=_0x29c7b3,_0x3d124e=this[_0x34bcc5(0x815)]();if(['xp'][_0x34bcc5(0xba2)](_0x3d124e)&&!$gameSystem[_0x34bcc5(0x204)]()){this[_0x34bcc5(0x502)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x34bcc5(0xc03)][_0x34bcc5(0x5b4)][_0x34bcc5(0x8d6)](this);},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x6a8)]=function(_0x5226b4){const _0x54dc56=_0x29c7b3,_0x4e25ad=this[_0x54dc56(0xb4d)](_0x5226b4)[_0x54dc56(0xa65)]();if(!_0x4e25ad)return;const _0x44aea7=this[_0x54dc56(0x815)](),_0x5333ce=this['itemRect'](_0x5226b4);let _0x238fac=Math[_0x54dc56(0x50f)](_0x5333ce['x']+_0x5333ce[_0x54dc56(0x580)]/0x2)+this[_0x54dc56(0x5bb)];[_0x54dc56(0x72f)][_0x54dc56(0xba2)](_0x44aea7)&&(_0x238fac=_0x5333ce[_0x54dc56(0x580)]/$gameParty[_0x54dc56(0xaad)]()['length'],_0x238fac*=_0x5226b4,_0x238fac+=_0x5333ce['width']/$gameParty[_0x54dc56(0xaad)]()[_0x54dc56(0xba7)]/0x2);let _0x27b65d=Math[_0x54dc56(0x50f)](this[_0x54dc56(0x891)](_0x5226b4,_0x4e25ad,_0x5333ce));_0x4e25ad[_0x54dc56(0x4ff)](_0x238fac,_0x27b65d),this[_0x54dc56(0x34f)](_0x4e25ad,0x1),_0x4e25ad[_0x54dc56(0xb6f)](),this[_0x54dc56(0x443)](),this['updateAttachmentSprites']();},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x891)]=function(_0x978ee4,_0x562bff,_0x3bfff1){const _0x2f924e=_0x29c7b3,_0xc49787=VisuMZ[_0x2f924e(0x2e2)][_0x2f924e(0xc14)][_0x2f924e(0xaf9)],_0x2a6a4b=this['battleLayoutStyle']();if(_0x2a6a4b==='xp'){const _0x166645=_0xc49787[_0x2f924e(0x49c)];switch(_0x166645[_0x2f924e(0x6fd)]()['trim']()){case'bottom':return _0x3bfff1['height']-_0x562bff['_shadowSprite'][_0x2f924e(0x719)]/0x4;break;case _0x2f924e(0x5cb):const _0x71ea9b=_0xc49787[_0x2f924e(0x615)];return(_0x3bfff1[_0x2f924e(0x719)]+(_0x562bff[_0x2f924e(0x719)]||_0x71ea9b))/0x2;break;case'top':return 0x0;case _0x2f924e(0x161):default:return this['nameY'](_0x3bfff1);break;}}else{if(_0x2a6a4b==='portrait'){}}return _0x562bff[_0x2f924e(0x719)];},Sprite_Name['prototype'][_0x29c7b3(0x5a1)]=function(){return 0x24;},Sprite_Name['prototype'][_0x29c7b3(0x15c)]=function(){const _0x21ccdd=_0x29c7b3,_0x179204=this[_0x21ccdd(0x161)](),_0x3b1f62=this[_0x21ccdd(0xb38)](),_0x618507=this['bitmapHeight']();this[_0x21ccdd(0xac7)](),this['bitmap'][_0x21ccdd(0x917)](),this['bitmap'][_0x21ccdd(0x9eb)](_0x179204,0x4,0x0,_0x3b1f62,_0x618507,_0x21ccdd(0x608));},Bitmap[_0x29c7b3(0xc03)][_0x29c7b3(0x9eb)]=function(_0xeaf999,_0x436d15,_0x50c2c8,_0x29d29b,_0x26d682,_0x4885fa){const _0x399ccc=_0x29c7b3;TextManager[_0x399ccc(0x966)]&&(_0xeaf999=TextManager[_0x399ccc(0x966)](_0xeaf999));const _0x30e02d=this[_0x399ccc(0x606)],_0x225127=_0x30e02d[_0x399ccc(0x449)];_0x29d29b=_0x29d29b||0xffffffff;let _0x39ff2c=_0x436d15,_0x23aaa0=Math[_0x399ccc(0x50f)](_0x50c2c8+0x18/0x2+this[_0x399ccc(0x4b7)]*0.35);_0x4885fa==='center'&&(_0x39ff2c+=_0x29d29b/0x2),_0x4885fa===_0x399ccc(0xc23)&&(_0x39ff2c+=_0x29d29b),_0x30e02d[_0x399ccc(0x6c4)](),_0x30e02d[_0x399ccc(0xc29)]=this['_makeFontNameText'](),_0x30e02d[_0x399ccc(0x9b5)]=_0x4885fa,_0x30e02d['textBaseline']=_0x399ccc(0xb85),_0x30e02d[_0x399ccc(0x449)]=0x1,this[_0x399ccc(0x96e)](_0xeaf999,_0x39ff2c,_0x23aaa0,_0x29d29b),_0x30e02d[_0x399ccc(0x449)]=_0x225127,this[_0x399ccc(0x242)](_0xeaf999,_0x39ff2c,_0x23aaa0,_0x29d29b),_0x30e02d[_0x399ccc(0x7a2)](),this[_0x399ccc(0x3f4)]['update']();},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x91c)]=function(_0x56ca8c){const _0x24adbf=_0x29c7b3;return this[_0x24adbf(0x6f5)](_0x56ca8c)-this[_0x24adbf(0x3a3)]();},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x58b)]=function(_0x915c19){const _0x3faff3=_0x29c7b3;if(!VisuMZ[_0x3faff3(0x2e2)][_0x3faff3(0xc14)]['BattleLayout'][_0x3faff3(0x5b5)])return;const _0x46dff1=this[_0x3faff3(0xb4d)](_0x915c19),_0x555325=this[_0x3faff3(0x47a)](_0x915c19);_0x555325[_0x3faff3(0x580)]=ImageManager[_0x3faff3(0x220)],_0x555325['height']-=0x2,this[_0x3faff3(0x6c5)](_0x46dff1,_0x555325['x']+0x1,_0x555325['y']+0x1,_0x555325[_0x3faff3(0x580)],_0x555325[_0x3faff3(0x719)]);},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0xba9)]=function(_0x5c4210){const _0x2e8bd8=_0x29c7b3,_0xf85f50=VisuMZ[_0x2e8bd8(0x2e2)][_0x2e8bd8(0xc14)]['BattleLayout'],_0x32fb77=$dataSystem[_0x2e8bd8(0xc1d)]?0x4:0x3,_0x3009a5=_0x32fb77*0x80+(_0x32fb77-0x1)*0x8+0x4,_0x5c395a=this['actor'](_0x5c4210),_0x53b285=this[_0x2e8bd8(0x47a)](_0x5c4210);let _0x371add=_0x53b285['x']+this[_0x2e8bd8(0x5bb)];_0xf85f50[_0x2e8bd8(0x5b5)]?_0x371add=_0x53b285['x']+ImageManager['faceWidth']+0x8:_0x371add+=ImageManager[_0x2e8bd8(0xb33)];const _0x321d61=Math[_0x2e8bd8(0x50f)](Math[_0x2e8bd8(0xbce)](_0x53b285['x']+_0x53b285['width']-_0x3009a5,_0x371add)),_0x2008c0=Math['round'](_0x53b285['y']+(_0x53b285[_0x2e8bd8(0x719)]-Sprite_Name['prototype'][_0x2e8bd8(0x5a1)]())/0x2),_0x205cbf=Math[_0x2e8bd8(0x50f)](_0x321d61-ImageManager[_0x2e8bd8(0xb33)]/0x2-0x4),_0x23d429=Math[_0x2e8bd8(0x50f)](_0x53b285['y']+(_0x53b285['height']-ImageManager[_0x2e8bd8(0x98e)])/0x2+ImageManager['iconHeight']/0x2);let _0xaf6a8d=_0x321d61+0x88;const _0x3e2617=_0x2008c0;this[_0x2e8bd8(0x4de)](_0x5c395a,_0x321d61-0x4+(_0xf85f50[_0x2e8bd8(0x9dc)]||0x0),_0x2008c0+(_0xf85f50['TpbGaugeOffsetY']||0x0)),this[_0x2e8bd8(0x20a)](_0x5c395a,_0x321d61+(_0xf85f50[_0x2e8bd8(0xba5)]||0x0),_0x2008c0+(_0xf85f50[_0x2e8bd8(0x12d)]||0x0)),this[_0x2e8bd8(0x9d1)](_0x5c395a,_0x205cbf+(_0xf85f50[_0x2e8bd8(0x961)]||0x0),_0x23d429+(_0xf85f50[_0x2e8bd8(0xa06)]||0x0)),this[_0x2e8bd8(0xaa3)](_0x5c395a,'hp',_0xaf6a8d+0x88*0x0+(_0xf85f50[_0x2e8bd8(0x96a)]||0x0),_0x3e2617+(_0xf85f50[_0x2e8bd8(0xb7f)]||0x0)),this[_0x2e8bd8(0xaa3)](_0x5c395a,'mp',_0xaf6a8d+0x88*0x1+(_0xf85f50[_0x2e8bd8(0x43b)]||0x0),_0x3e2617+(_0xf85f50[_0x2e8bd8(0x7b9)]||0x0)),$dataSystem['optDisplayTp']&&this['placeGauge'](_0x5c395a,'tp',_0xaf6a8d+0x88*0x2+(_0xf85f50[_0x2e8bd8(0xa5c)]||0x0),_0x3e2617+(_0xf85f50[_0x2e8bd8(0x7e3)]||0x0));},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x6b2)]=function(_0x1aaf24){const _0x43b867=_0x29c7b3;if(!$gameSystem[_0x43b867(0x204)]())return;VisuMZ[_0x43b867(0x2e2)][_0x43b867(0x31a)][_0x43b867(0x8d6)](this,_0x1aaf24);},Window_BattleStatus['prototype'][_0x29c7b3(0x517)]=function(_0x4614cf){const _0x4b2878=_0x29c7b3,_0x1307ce=VisuMZ[_0x4b2878(0x2e2)][_0x4b2878(0xc14)][_0x4b2878(0xaf9)],_0x5bb21e=this[_0x4b2878(0xb4d)](_0x4614cf),_0x568084=this['itemRect'](_0x4614cf),_0xfb719=Math[_0x4b2878(0x50f)](_0x568084['x']+(_0x568084[_0x4b2878(0x580)]-0x80)/0x2),_0x41e29e=this[_0x4b2878(0x91c)](_0x568084);let _0x1bee47=_0xfb719-ImageManager['iconWidth']/0x2-0x4,_0x3ef7ba=_0x41e29e+ImageManager['iconHeight']/0x2;_0x1bee47-ImageManager[_0x4b2878(0xb33)]/0x2<_0x568084['x']&&(_0x1bee47=_0xfb719+ImageManager[_0x4b2878(0xb33)]/0x2-0x4,_0x3ef7ba=_0x41e29e-ImageManager[_0x4b2878(0x98e)]/0x2);const _0x579191=_0xfb719,_0x480b6a=this['basicGaugesY'](_0x568084);this[_0x4b2878(0x4de)](_0x5bb21e,_0xfb719+(_0x1307ce[_0x4b2878(0x9dc)]||0x0),_0x41e29e+(_0x1307ce[_0x4b2878(0xac3)]||0x0)),this[_0x4b2878(0x20a)](_0x5bb21e,_0xfb719+(_0x1307ce[_0x4b2878(0xba5)]||0x0),_0x41e29e+(_0x1307ce[_0x4b2878(0x12d)]||0x0)),this[_0x4b2878(0x9d1)](_0x5bb21e,_0x1bee47+(_0x1307ce[_0x4b2878(0x961)]||0x0),_0x3ef7ba+(_0x1307ce['StateIconOffsetY']||0x0)),this['placeGauge'](_0x5bb21e,'hp',_0x579191+(_0x1307ce[_0x4b2878(0x96a)]||0x0),_0x480b6a+(_0x1307ce[_0x4b2878(0xb7f)]||0x0)),this[_0x4b2878(0xaa3)](_0x5bb21e,'mp',_0x579191+(_0x1307ce[_0x4b2878(0x43b)]||0x0),_0x480b6a+this[_0x4b2878(0x3a3)]()+(_0x1307ce['MpGaugeOffsetY']||0x0)),$dataSystem[_0x4b2878(0xc1d)]&&this['placeGauge'](_0x5bb21e,'tp',_0x579191+(_0x1307ce['TpGaugeOffsetX']||0x0),_0x480b6a+this[_0x4b2878(0x3a3)]()*0x2+(_0x1307ce[_0x4b2878(0x7e3)]||0x0));},Window_BattleStatus['prototype'][_0x29c7b3(0xb1c)]=function(_0x957b11){const _0x4165c4=_0x29c7b3;if(!VisuMZ['BattleCore'][_0x4165c4(0xc14)]['BattleLayout'][_0x4165c4(0x7b4)])return![];if(_0x957b11['getBattlePortrait']())return!![];return Imported[_0x4165c4(0x358)]&&_0x957b11[_0x4165c4(0x6d2)]();},Game_Actor['prototype'][_0x29c7b3(0x92b)]=function(){const _0x3c9543=_0x29c7b3;if(this[_0x3c9543(0xb4d)]()['note'][_0x3c9543(0x290)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x3c9543(0xb4d)]()['note'][_0x3c9543(0x290)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x29c7b3(0xc03)][_0x29c7b3(0x4fb)]=function(){const _0x80355a=_0x29c7b3;if(this[_0x80355a(0xb4d)]()['note'][_0x80355a(0x290)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x80355a(0x124)][_0x80355a(0x290)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x80d)]=function(_0x4b601a){const _0x19b32c=_0x29c7b3,_0x495d2d=this[_0x19b32c(0xb4d)](_0x4b601a);if(this[_0x19b32c(0xb1c)](_0x495d2d)){const _0x51b378=_0x19b32c(0x9a8)['format'](_0x495d2d[_0x19b32c(0x2e6)]()),_0x2ba5be=this[_0x19b32c(0x628)](_0x51b378,Sprite),_0x145f0b=_0x495d2d['getBattlePortraitFilename']();_0x145f0b!==''?_0x2ba5be[_0x19b32c(0xc2a)]=ImageManager[_0x19b32c(0x832)](_0x145f0b):_0x2ba5be[_0x19b32c(0xc2a)]=ImageManager[_0x19b32c(0x9e5)];const _0x22a077=this[_0x19b32c(0x47a)](_0x4b601a);_0x2ba5be[_0x19b32c(0x3f8)]['x']=0.5,_0x2ba5be[_0x19b32c(0x3f8)]['y']=0x1;let _0x35ad1c=Math[_0x19b32c(0x50f)](_0x22a077['x']+_0x22a077[_0x19b32c(0x580)]/0x2)+this['padding'];_0x35ad1c+=_0x495d2d[_0x19b32c(0x92b)]();let _0x5644b2=Math[_0x19b32c(0x50f)](this['height']);_0x5644b2+=_0x495d2d['getBattlePortraitOffsetY'](),_0x2ba5be['move'](_0x35ad1c,_0x5644b2);const _0x26373b=VisuMZ['BattleCore'][_0x19b32c(0xc14)][_0x19b32c(0xaf9)][_0x19b32c(0x4da)];_0x2ba5be[_0x19b32c(0xaa0)]['x']=_0x26373b,_0x2ba5be[_0x19b32c(0xaa0)]['y']=_0x26373b,_0x2ba5be[_0x19b32c(0xb6f)]();}else{const _0x125b70=this[_0x19b32c(0x715)](_0x4b601a);this[_0x19b32c(0x6c5)](_0x495d2d,_0x125b70['x'],_0x125b70['y'],_0x125b70[_0x19b32c(0x580)],_0x125b70[_0x19b32c(0x719)]);}},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x628)]=function(_0x1dd2e3,_0x30cf7a){const _0x5139ae=_0x29c7b3,_0x391fb8=this[_0x5139ae(0x94c)];if(_0x391fb8[_0x1dd2e3])return _0x391fb8[_0x1dd2e3];else{const _0xa84887=new _0x30cf7a();return _0x391fb8[_0x1dd2e3]=_0xa84887,this[_0x5139ae(0x25e)](_0xa84887),this['addChildToBack'](this[_0x5139ae(0x6e5)]),_0xa84887;}},Window_BattleStatus['prototype'][_0x29c7b3(0x1fd)]=function(){const _0xc183e0=_0x29c7b3;this[_0xc183e0(0x40a)](),this[_0xc183e0(0x8f3)](),Window_StatusBase[_0xc183e0(0xc03)]['_createClientArea']['call'](this),this[_0xc183e0(0x2b6)]();},Window_BattleStatus['prototype'][_0x29c7b3(0x40a)]=function(){const _0xddb5ea=_0x29c7b3;this[_0xddb5ea(0x6e5)]=new Sprite(),this[_0xddb5ea(0x6e5)][_0xddb5ea(0xa40)]=[new PIXI['filters']['AlphaFilter']()],this[_0xddb5ea(0x6e5)][_0xddb5ea(0xb1e)]=new Rectangle(),this['_cursorArea'][_0xddb5ea(0x392)](this[_0xddb5ea(0x5f4)],this['_padding']),this['addChild'](this[_0xddb5ea(0x6e5)]);},Window_BattleStatus['prototype'][_0x29c7b3(0x8f3)]=function(){const _0x30e538=_0x29c7b3;this[_0x30e538(0x6d7)]=new Sprite(),this[_0x30e538(0xa56)](this['_effectsContainer']);},Window_BattleStatus['prototype'][_0x29c7b3(0x443)]=function(){const _0x32cae0=_0x29c7b3;this[_0x32cae0(0x6d7)]&&this[_0x32cae0(0xa56)](this['_effectsContainer']);},Window_BattleStatus[_0x29c7b3(0xc03)]['_createDamageContainer']=function(){const _0x2aded1=_0x29c7b3;this[_0x2aded1(0x3ff)]=new Sprite(),this['addChild'](this['_damageContainer']);},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0xa8c)]=function(){const _0x2505cd=_0x29c7b3;this['_cursorSprite']=new Sprite();for(let _0x2dfd74=0x0;_0x2dfd74<0x9;_0x2dfd74++){this[_0x2505cd(0x30d)][_0x2505cd(0xa56)](new Sprite());}this[_0x2505cd(0x6e5)][_0x2505cd(0xa56)](this['_cursorSprite']);},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x73b)]=function(){const _0x159856=_0x29c7b3;Window_StatusBase[_0x159856(0xc03)]['_updateClientArea'][_0x159856(0x8d6)](this),this['_updateCursorArea']();},Window_BattleStatus[_0x29c7b3(0xc03)]['_updateCursorArea']=function(){const _0x21706b=_0x29c7b3,_0x45e4a8=this[_0x21706b(0x5f4)];this[_0x21706b(0x6e5)][_0x21706b(0x392)](_0x45e4a8,_0x45e4a8),this[_0x21706b(0x6e5)]['x']=_0x45e4a8-this[_0x21706b(0x957)]['x'],this[_0x21706b(0x6e5)]['y']=_0x45e4a8-this[_0x21706b(0x957)]['y'],this[_0x21706b(0x6aa)]>0x0&&this['innerHeight']>0x0?this[_0x21706b(0x6e5)][_0x21706b(0xb81)]=this[_0x21706b(0x7bb)]():this[_0x21706b(0x6e5)][_0x21706b(0xb81)]=![];},Window_BattleStatus[_0x29c7b3(0xc03)]['_updateFilterArea']=function(){const _0x42ad8a=_0x29c7b3;Window_StatusBase[_0x42ad8a(0xc03)][_0x42ad8a(0xa14)][_0x42ad8a(0x8d6)](this),this[_0x42ad8a(0x7d8)]();},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x7d8)]=function(){const _0xbfc7ce=_0x29c7b3,_0x44aa7e=this['_cursorArea'][_0xbfc7ce(0xa5e)][_0xbfc7ce(0x5ed)](new Point(0x0,0x0)),_0x459311=this[_0xbfc7ce(0x6e5)]['filterArea'];_0x459311['x']=_0x44aa7e['x']+this[_0xbfc7ce(0x957)]['x'],_0x459311['y']=_0x44aa7e['y']+this[_0xbfc7ce(0x957)]['y'],_0x459311[_0xbfc7ce(0x580)]=this[_0xbfc7ce(0x6aa)],_0x459311[_0xbfc7ce(0x719)]=this[_0xbfc7ce(0x2d6)];},Window_BattleStatus['prototype'][_0x29c7b3(0x529)]=function(_0x5db0fe){const _0x17581c=_0x29c7b3;if(this[_0x17581c(0x815)]()!==_0x17581c(0xa7c))return;this[_0x17581c(0x80d)](_0x5db0fe['index']());},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0xb8e)]=function(_0xb3a05,_0x41dac7){const _0x4b41fe=_0x29c7b3;if(!this[_0x4b41fe(0x3ff)])return;if(!_0xb3a05)return;if(!_0x41dac7)return;const _0xbfd672=this[_0x4b41fe(0x47a)](_0x41dac7[_0x4b41fe(0xb21)]());_0xbfd672['x']+=_0xbfd672[_0x4b41fe(0x580)]/0x2+this['padding'],_0xb3a05['x']=_0xbfd672['x'],_0xb3a05['y']=_0xbfd672['y'],this['_damageContainer'][_0x4b41fe(0xa56)](_0xb3a05);},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0xbbb)]=function(_0x372c56){const _0x1e051d=_0x29c7b3;if(!this[_0x1e051d(0x3ff)])return;if(!_0x372c56)return;this[_0x1e051d(0x3ff)][_0x1e051d(0xbdc)](_0x372c56);},Window_BattleStatus[_0x29c7b3(0xc03)]['updateBorderStyle']=function(){const _0x599b7c=_0x29c7b3;if(!this[_0x599b7c(0x169)]())return;if(!this[_0x599b7c(0x5b1)])this['createBorderStylePortraitSprite']();this[_0x599b7c(0x328)](),this[_0x599b7c(0xc2b)]();},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x169)]=function(){const _0x30a6d0=_0x29c7b3;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0x30a6d0(0x429)]())return![];return VisuMZ[_0x30a6d0(0x2e2)][_0x30a6d0(0xc14)]['BattleLayout'][_0x30a6d0(0x7c2)];},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x168)]=function(){const _0x28861b=_0x29c7b3;this['_borderPortraitSprite']=new Sprite();const _0xbbf383=SceneManager[_0x28861b(0x364)],_0x3e6ccc=_0xbbf383['children'][_0x28861b(0x617)](_0xbbf383[_0x28861b(0x723)]);_0xbbf383[_0x28861b(0x34f)](this[_0x28861b(0x5b1)],_0x3e6ccc),this['_borderPortraitSprite'][_0x28861b(0x3f8)]['x']=0.5,this[_0x28861b(0x5b1)][_0x28861b(0x3f8)]['y']=0x1;const _0x548761=VisuMZ['BattleCore']['Settings'][_0x28861b(0xaf9)][_0x28861b(0x403)];this[_0x28861b(0x5b1)][_0x28861b(0xaa0)]['x']=_0x548761,this[_0x28861b(0x5b1)]['scale']['y']=_0x548761,this[_0x28861b(0x5b1)]['y']=this['y']+this[_0x28861b(0x719)],this[_0x28861b(0x456)]=0x0;},Window_BattleStatus['prototype'][_0x29c7b3(0x446)]=function(){return BattleManager['isInputting']();},Window_BattleStatus[_0x29c7b3(0xc03)]['prepareBorderActor']=function(){const _0x2abb56=_0x29c7b3;this[_0x2abb56(0x5b1)][_0x2abb56(0xb81)]=this[_0x2abb56(0x446)]();const _0x1db734=BattleManager[_0x2abb56(0xb4d)](),_0x233471=_0x1db734?_0x1db734[_0x2abb56(0x757)]()||'':'';if(_0x1db734===this[_0x2abb56(0x5b1)][_0x2abb56(0xb4d)]&&_0x233471===this[_0x2abb56(0x5b1)]['lastFilename'])return;this['_borderPortraitSprite'][_0x2abb56(0xb4d)]=_0x1db734||this[_0x2abb56(0x5b1)][_0x2abb56(0xb4d)],this[_0x2abb56(0x5b1)][_0x2abb56(0xa6f)]=_0x233471;if(!_0x1db734)return;else{if(_0x233471===''){this[_0x2abb56(0x5b1)][_0x2abb56(0xc2a)]=ImageManager[_0x2abb56(0x9e5)],this['_borderPortraitSprite'][_0x2abb56(0xa6f)]='';return;}else{const _0xd69101=ImageManager[_0x2abb56(0x832)](_0x233471);this[_0x2abb56(0x5b1)][_0x2abb56(0x81b)]=0x0,_0xd69101[_0x2abb56(0xbbf)](this[_0x2abb56(0xa8a)][_0x2abb56(0x86e)](this,_0xd69101));}}},Window_BattleStatus['prototype'][_0x29c7b3(0xa8a)]=function(_0x20f794){const _0x25e09e=_0x29c7b3;this['_borderPortraitDuration']=0x14,this[_0x25e09e(0x5b1)][_0x25e09e(0xc2a)]=_0x20f794;SceneManager[_0x25e09e(0x364)][_0x25e09e(0x3da)]()?(this['_borderPortraitSprite']['x']=0x0,this[_0x25e09e(0x890)]=Math[_0x25e09e(0xc1a)](_0x20f794[_0x25e09e(0x580)]/0x2)):(this[_0x25e09e(0x5b1)]['x']=this[_0x25e09e(0x580)],this[_0x25e09e(0x890)]=this[_0x25e09e(0x580)]*0x3/0x4);this[_0x25e09e(0x5b1)][_0x25e09e(0x81b)]=0x0,this[_0x25e09e(0x5b1)]['y']=this['y']+this[_0x25e09e(0x719)];const _0x391a18=BattleManager[_0x25e09e(0xb4d)]();_0x391a18&&(this[_0x25e09e(0x890)]+=_0x391a18[_0x25e09e(0x92b)](),this['_borderPortraitSprite']['y']+=_0x391a18[_0x25e09e(0x4fb)]());},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0xc2b)]=function(){const _0x202c2b=_0x29c7b3;if(this[_0x202c2b(0x456)]>0x0){const _0x2c8195=this[_0x202c2b(0x456)],_0x4077fe=this['_borderPortraitSprite'];_0x4077fe['x']=(_0x4077fe['x']*(_0x2c8195-0x1)+this[_0x202c2b(0x890)])/_0x2c8195,_0x4077fe[_0x202c2b(0x81b)]=(_0x4077fe[_0x202c2b(0x81b)]*(_0x2c8195-0x1)+0xff)/_0x2c8195,this[_0x202c2b(0x456)]--;}},Window_BattleStatus[_0x29c7b3(0xc03)]['updateEffectContainers']=function(){const _0x257dd6=_0x29c7b3;return;this[_0x257dd6(0x6d7)]&&(this[_0x257dd6(0x6d7)]['x']=this['x'],this[_0x257dd6(0x6d7)]['y']=this['y']),this['_damageContainer']&&(this[_0x257dd6(0x3ff)]['x']=this['x'],this[_0x257dd6(0x3ff)]['y']=this['y']);},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x95f)]=function(){const _0x3c74cd=_0x29c7b3,_0x52d520=VisuMZ[_0x3c74cd(0x2e2)][_0x3c74cd(0xc14)][_0x3c74cd(0xaf9)];if(_0x52d520['StatusWindowAttachmentBack']){const _0x7abc8b=new Sprite();_0x7abc8b[_0x3c74cd(0xc2a)]=ImageManager[_0x3c74cd(0x16c)](_0x52d520['StatusWindowAttachmentBack']),_0x7abc8b['x']=_0x52d520[_0x3c74cd(0x360)]||0x0,_0x7abc8b['y']=_0x52d520['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x3c74cd(0x25e)](_0x7abc8b),this[_0x3c74cd(0xa0f)]=_0x7abc8b;}if(_0x52d520[_0x3c74cd(0x60d)]){const _0x52accd=new Sprite();_0x52accd[_0x3c74cd(0xc2a)]=ImageManager[_0x3c74cd(0x16c)](_0x52d520['StatusWindowAttachmentFront']),_0x52accd['x']=_0x52d520[_0x3c74cd(0x272)]||0x0,_0x52accd['y']=_0x52d520[_0x3c74cd(0x401)]||0x0,this[_0x3c74cd(0xa56)](_0x52accd),this[_0x3c74cd(0x1bf)]=_0x52accd;}},Window_BattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x501)]=function(){const _0x5803=_0x29c7b3;this[_0x5803(0x1bf)]&&this[_0x5803(0xa56)](this[_0x5803(0x1bf)]),this[_0x5803(0xa0f)]&&this['addChildToBack'](this[_0x5803(0xa0f)]);},Window_BattleActor[_0x29c7b3(0xc03)]['isCurrentItemEnabled']=function(){const _0x57d010=_0x29c7b3;return this[_0x57d010(0x8bc)]();},Window_BattleActor[_0x29c7b3(0xc03)][_0x29c7b3(0x8bc)]=function(){const _0x2151f5=_0x29c7b3,_0x3b9d71=BattleManager['inputtingAction']();if(!_0x3b9d71)return!![];if(!_0x3b9d71['item']())return!![];const _0x248201=this[_0x2151f5(0xb4d)](this[_0x2151f5(0xb21)]()),_0x562300=_0x3b9d71[_0x2151f5(0x7cc)]()[_0x2151f5(0x124)];if(_0x3b9d71[_0x2151f5(0xa63)]()){if(_0x248201===BattleManager[_0x2151f5(0xb4d)]())return![];}if(_0x3b9d71[_0x2151f5(0x9c5)]()){if(!_0x248201[_0x2151f5(0x7cd)]())return![];}if(_0x3b9d71[_0x2151f5(0x98b)]()){if(!_0x248201[_0x2151f5(0x475)]())return![];}return!![];},Window_BattleActor[_0x29c7b3(0xc03)][_0x29c7b3(0x99a)]=function(_0x287006){const _0x31f973=_0x29c7b3;this[_0x31f973(0x56b)]=_0x287006;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x705)]=Window_BattleActor[_0x29c7b3(0xc03)]['processTouch'],Window_BattleActor[_0x29c7b3(0xc03)][_0x29c7b3(0x46a)]=function(){const _0x1d9452=_0x29c7b3;Window_BattleStatus[_0x1d9452(0xc03)][_0x1d9452(0x46a)]['call'](this),this[_0x1d9452(0x56b)]?this['processEnemyModeTouchBattleCore']():VisuMZ[_0x1d9452(0x2e2)]['Window_BattleActor_processTouch'][_0x1d9452(0x8d6)](this);},Window_BattleActor[_0x29c7b3(0xc03)][_0x29c7b3(0x62a)]=function(){const _0x359215=_0x29c7b3,_0x710d2d=SceneManager['_scene'][_0x359215(0x174)];if(!_0x710d2d)return;this[_0x359215(0x6ab)]=![];const _0x4b1333=this[_0x359215(0x335)]();if(_0x4b1333>=0x0){this['select'](_0x4b1333);if(TouchInput[_0x359215(0x77c)]()){const _0x475eb0=$gameParty[_0x359215(0xa35)]()[_0x4b1333],_0x3833c4=_0x710d2d[_0x359215(0x865)][_0x359215(0x617)](_0x475eb0);_0x3833c4>=0x0&&(_0x710d2d[_0x359215(0x8a3)](_0x3833c4),_0x710d2d[_0x359215(0x631)]());}}},Window_BattleActor[_0x29c7b3(0xc03)]['_makeCursorAlpha']=function(){const _0x5026b1=_0x29c7b3;this[_0x5026b1(0x56b)]&&(this[_0x5026b1(0x86a)]++,this[_0x5026b1(0x33d)]=!![]);const _0x51b02e=Window_BattleStatus['prototype'][_0x5026b1(0x46c)][_0x5026b1(0x8d6)](this);return this[_0x5026b1(0x56b)]&&(this['active']=![]),_0x51b02e;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x24f)]=Window_BattleActor[_0x29c7b3(0xc03)]['show'],Window_BattleActor[_0x29c7b3(0xc03)][_0x29c7b3(0xb6f)]=function(){const _0x49b06e=_0x29c7b3;VisuMZ[_0x49b06e(0x2e2)][_0x49b06e(0x24f)][_0x49b06e(0x8d6)](this);const _0x75c4c5=BattleManager[_0x49b06e(0x83c)]();if(_0x75c4c5){const _0x18d5d2=$gameParty['aliveMembers']();_0x75c4c5[_0x49b06e(0x1b3)]()&&_0x18d5d2['length']>0x1&&this['setHandler']('pagedown',this[_0x49b06e(0x2f0)]['bind'](this));}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x1e1)]=Window_BattleActor['prototype']['hide'],Window_BattleActor[_0x29c7b3(0xc03)][_0x29c7b3(0x459)]=function(){const _0x5dd7c2=_0x29c7b3;VisuMZ[_0x5dd7c2(0x2e2)][_0x5dd7c2(0x1e1)][_0x5dd7c2(0x8d6)](this),delete this['_handlers']['pageup'],delete this[_0x5dd7c2(0xc02)]['pagedown'];},Window_BattleActor[_0x29c7b3(0xc03)][_0x29c7b3(0x2f0)]=function(){const _0x534f2d=_0x29c7b3,_0x5e2460=BattleManager['inputtingAction']();if(_0x5e2460)_0x5e2460[_0x534f2d(0x8cc)]('all\x20actors');this[_0x534f2d(0x631)]();},VisuMZ[_0x29c7b3(0x2e2)]['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x1a0)],Window_BattleEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x1a0)]=function(_0x1dc5d4){const _0x565cdd=_0x29c7b3;this[_0x565cdd(0xa38)]=null,VisuMZ[_0x565cdd(0x2e2)][_0x565cdd(0xb7e)][_0x565cdd(0x8d6)](this,_0x1dc5d4);if(Imported[_0x565cdd(0x586)]){if(VisuMZ[_0x565cdd(0x525)][_0x565cdd(0x65e)]<1.12){let _0x323e51='';_0x323e51+=_0x565cdd(0x131),_0x323e51+=_0x565cdd(0x680),_0x323e51+=_0x565cdd(0x4bc),alert(_0x323e51),SceneManager[_0x565cdd(0x99d)]();}}},Window_BattleEnemy['prototype'][_0x29c7b3(0x357)]=function(){const _0x2e263d=_0x29c7b3;return this[_0x2e263d(0x428)]();},VisuMZ[_0x29c7b3(0x2e2)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0xb6f)],Window_BattleEnemy['prototype'][_0x29c7b3(0xb6f)]=function(){const _0x5dd026=_0x29c7b3;VisuMZ['BattleCore'][_0x5dd026(0x2f8)][_0x5dd026(0x8d6)](this),this['y']=Graphics['height']*0xa,this[_0x5dd026(0x97f)]()&&this['openBattleActorWindow']();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x964)]=Window_BattleEnemy['prototype'][_0x29c7b3(0x459)],Window_BattleEnemy[_0x29c7b3(0xc03)]['hide']=function(){const _0x45dbca=_0x29c7b3;VisuMZ['BattleCore'][_0x45dbca(0x964)][_0x45dbca(0x8d6)](this),$gameParty['select'](null),delete this[_0x45dbca(0xc02)][_0x45dbca(0x925)],delete this[_0x45dbca(0xc02)][_0x45dbca(0x376)];},Window_BattleEnemy[_0x29c7b3(0xc03)]['validTargets']=function(){const _0x4f8d30=_0x29c7b3;let _0x5b6c19=$gameTroop[_0x4f8d30(0x89d)]();const _0xa0a68f=BattleManager['inputtingAction']();if(_0xa0a68f){_0xa0a68f[_0x4f8d30(0x1b3)]()&&_0x5b6c19[_0x4f8d30(0xba7)]>0x1&&this[_0x4f8d30(0x333)](_0x4f8d30(0x925),this[_0x4f8d30(0x8e7)][_0x4f8d30(0x86e)](this));if(_0xa0a68f[_0x4f8d30(0x50d)]()){const _0x4a90fe=$gameParty['aliveMembers']();_0x5b6c19=_0x5b6c19['concat'](_0x4a90fe),_0xa0a68f[_0x4f8d30(0x1b3)]()&&_0x4a90fe[_0x4f8d30(0xba7)]>0x1&&this[_0x4f8d30(0x333)](_0x4f8d30(0x376),this[_0x4f8d30(0x2f0)][_0x4f8d30(0x86e)](this));}}return _0x5b6c19;},Window_BattleEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x842)]=function(){const _0x5ef0eb=_0x29c7b3;this[_0x5ef0eb(0x865)]=this['validTargets'](),this[_0x5ef0eb(0x275)](),Window_Selectable[_0x5ef0eb(0xc03)][_0x5ef0eb(0x842)][_0x5ef0eb(0x8d6)](this);},Window_BattleEnemy[_0x29c7b3(0xc03)]['sortEnemies']=function(){const _0x44f7ce=_0x29c7b3;this[_0x44f7ce(0x865)]['sort']((_0x531073,_0x5e098e)=>{const _0x541193=_0x44f7ce;if(_0x531073[_0x541193(0xa27)]()!==_0x5e098e[_0x541193(0xa27)]()){if(_0x531073[_0x541193(0xb3d)]())return-0x1;if(_0x5e098e[_0x541193(0xb3d)]())return 0x1;}if(_0x531073['isActor']()&&_0x5e098e[_0x541193(0xa27)]())return _0x531073[_0x541193(0xb21)]()-_0x5e098e[_0x541193(0xb21)]();return _0x531073[_0x541193(0xa65)]()['_baseX']===_0x5e098e[_0x541193(0xa65)]()[_0x541193(0xa3a)]?_0x531073[_0x541193(0xa65)]()[_0x541193(0x488)]-_0x5e098e[_0x541193(0xa65)]()[_0x541193(0x488)]:_0x531073[_0x541193(0xa65)]()[_0x541193(0xa3a)]-_0x5e098e['battler']()[_0x541193(0xa3a)];}),SceneManager[_0x44f7ce(0xa4a)]()&&this['_enemies'][_0x44f7ce(0x9ad)]();},Window_BattleEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x87e)]=function(){const _0xa26ae7=_0x29c7b3,_0x421e60=VisuMZ['BattleCore'][_0xa26ae7(0xc14)][_0xa26ae7(0xac6)];_0x421e60[_0xa26ae7(0x1b1)]?this['autoSelectLastSelected']():this[_0xa26ae7(0x36f)]();},Window_BattleEnemy['prototype']['autoSelectLastSelected']=function(){const _0x274dbb=_0x29c7b3,_0x35b690=BattleManager['inputtingAction']();if(_0x35b690&&_0x35b690[_0x274dbb(0x50d)]()){if(_0x35b690[_0x274dbb(0x876)]()){if(this[_0x274dbb(0xb6d)]&&this['_enemies'][_0x274dbb(0xba2)](this[_0x274dbb(0xb6d)])){const _0x4e0edf=this['_enemies']['indexOf'](this[_0x274dbb(0xb6d)]);return this['forceSelect'](_0x4e0edf);}else return this['autoSelectPriority']();}}if(this['_lastEnemy']&&this[_0x274dbb(0x865)][_0x274dbb(0xba2)](this[_0x274dbb(0xa38)])){const _0x32b311=this['_enemies'][_0x274dbb(0x617)](this[_0x274dbb(0xa38)]);this[_0x274dbb(0x1f7)](_0x32b311);}else this[_0x274dbb(0x36f)]();},Window_BattleEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x36f)]=function(){const _0x539fc8=_0x29c7b3,_0x53616c=BattleManager['inputtingAction']();if(_0x53616c&&_0x53616c[_0x539fc8(0x50d)]()){const _0x17d28b=$gameParty[_0x539fc8(0x89d)]()[0x0];let _0x2b80fb=this[_0x539fc8(0x865)][_0x539fc8(0x617)](_0x17d28b);const _0xa46c4c=_0x53616c[_0x539fc8(0x7cc)]()[_0x539fc8(0x791)];if(_0xa46c4c[_0x539fc8(0x290)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x539fc8(0x1f7)](_0x2b80fb);return;}else{if(_0xa46c4c[_0x539fc8(0x290)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x539fc8(0x1f7)](_0x2b80fb-0x1);return;}}}const _0x54ee00=VisuMZ[_0x539fc8(0x2e2)][_0x539fc8(0xc14)][_0x539fc8(0xac6)];let _0x54b7d9=![];$gameSystem[_0x539fc8(0x204)]()?_0x54b7d9=_0x54ee00[_0x539fc8(0x8c1)]:_0x54b7d9=_0x54ee00[_0x539fc8(0x896)],this['forceSelect'](_0x54b7d9?this[_0x539fc8(0x428)]()-0x1:0x0);},Window_BattleEnemy['prototype'][_0x29c7b3(0x4a6)]=function(){const _0x5c8a32=_0x29c7b3;Window_Selectable[_0x5c8a32(0xc03)]['callOkHandler'][_0x5c8a32(0x8d6)](this);if(!this[_0x5c8a32(0x662)]())return;if(this['enemy']()[_0x5c8a32(0xb3d)]())this['_lastEnemy']=this[_0x5c8a32(0x662)]();if(this['enemy']()['isActor']())this[_0x5c8a32(0xb6d)]=this[_0x5c8a32(0x662)]();},Window_BattleEnemy['prototype'][_0x29c7b3(0x8a3)]=function(_0x2f70dc){const _0xe98ca5=_0x29c7b3;Window_Selectable[_0xe98ca5(0xc03)][_0xe98ca5(0x8a3)][_0xe98ca5(0x8d6)](this,_0x2f70dc),$gameTroop[_0xe98ca5(0x8a3)](this[_0xe98ca5(0x662)]()),$gameParty['select'](this[_0xe98ca5(0x662)]());if(!this[_0xe98ca5(0x662)]())return;if(this['meetsSelectFrontviewActorConditions']()){const _0xd9338c=SceneManager[_0xe98ca5(0x364)][_0xe98ca5(0x389)];this[_0xe98ca5(0x662)]()[_0xe98ca5(0xa27)]()?_0xd9338c[_0xe98ca5(0x8a3)](this[_0xe98ca5(0x662)]()[_0xe98ca5(0xb21)]()):_0xd9338c['deselect']();}},Window_BattleEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x97f)]=function(){const _0x2fca3b=_0x29c7b3;if(!this[_0x2fca3b(0xb81)])return![];if($gameSystem['isSideView']())return![];const _0x41470d=SceneManager[_0x2fca3b(0x364)][_0x2fca3b(0x815)](),_0x34d10e=['default',_0x2fca3b(0x72f),'xp','portrait','border'];return _0x34d10e[_0x2fca3b(0xba2)](_0x41470d);},Window_BattleEnemy['prototype'][_0x29c7b3(0xab1)]=function(){const _0xcc1685=_0x29c7b3,_0x475e7f=SceneManager['_scene'][_0xcc1685(0x389)];_0x475e7f[_0xcc1685(0xb6f)](),_0x475e7f[_0xcc1685(0x99a)](!![]),_0x475e7f['refresh'](),_0x475e7f[_0xcc1685(0x740)]();const _0x28c80f=SceneManager[_0xcc1685(0x364)][_0xcc1685(0x815)](),_0xc048d6=['xp',_0xcc1685(0xa7c),_0xcc1685(0x5d2)];if(_0xc048d6[_0xcc1685(0xba2)](_0x28c80f)){const _0x536c24=SceneManager['_scene'][_0xcc1685(0x92e)];_0x536c24[_0xcc1685(0xaa0)]['y']=0x0;}},Window_BattleEnemy[_0x29c7b3(0xc03)]['closeBattleActorWindow']=function(){const _0x35900d=_0x29c7b3,_0xabfd33=SceneManager['_scene'][_0x35900d(0x389)];_0xabfd33[_0x35900d(0x459)](),_0xabfd33[_0x35900d(0x99a)](![]),_0xabfd33[_0x35900d(0x740)]();const _0x720ced=SceneManager[_0x35900d(0x364)][_0x35900d(0x92e)];_0x720ced[_0x35900d(0xaa0)]['y']=0x1;},Window_BattleEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x8e7)]=function(){const _0x289636=_0x29c7b3,_0x3fb58a=BattleManager[_0x289636(0x83c)]();if(_0x3fb58a)_0x3fb58a['setTargetBattlerKey']('all\x20enemies');this['processOk']();},Window_BattleEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x2f0)]=function(){const _0x38bae2=_0x29c7b3,_0x43023f=BattleManager['inputtingAction']();if(_0x43023f)_0x43023f[_0x38bae2(0x8cc)](_0x38bae2(0x605));this[_0x38bae2(0x631)]();},Window_BattleEnemy['prototype'][_0x29c7b3(0xa54)]=function(){const _0x56485e=_0x29c7b3;return this[_0x56485e(0x8bc)]();},Window_BattleEnemy[_0x29c7b3(0xc03)][_0x29c7b3(0x8bc)]=function(){const _0x32d8aa=_0x29c7b3,_0x11c590=BattleManager[_0x32d8aa(0x83c)]();if(!_0x11c590)return!![];if(!_0x11c590['item']())return!![];const _0x4b10f0=this[_0x32d8aa(0x662)](),_0x4137a8=_0x11c590['item']()[_0x32d8aa(0x124)];if(_0x11c590[_0x32d8aa(0xa63)]()){if(_0x4b10f0===BattleManager['actor']())return![];}return!![];},Window_BattleItem[_0x29c7b3(0xc03)][_0x29c7b3(0xba2)]=function(_0xa78ce3){if(!_0xa78ce3)return![];return _0xa78ce3['occasion']===0x0||_0xa78ce3['occasion']===0x1;};function Window_AutoBattleCancel(){const _0x47ccb3=_0x29c7b3;this[_0x47ccb3(0x1a0)](...arguments);}Window_AutoBattleCancel['prototype']=Object[_0x29c7b3(0x57e)](Window_Base[_0x29c7b3(0xc03)]),Window_AutoBattleCancel[_0x29c7b3(0xc03)][_0x29c7b3(0xba3)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x29c7b3(0xc03)][_0x29c7b3(0x1a0)]=function(_0x2377f1){const _0xccf5b1=_0x29c7b3;Window_Base[_0xccf5b1(0xc03)][_0xccf5b1(0x1a0)][_0xccf5b1(0x8d6)](this,_0x2377f1),this[_0xccf5b1(0x64d)](this[_0xccf5b1(0x52f)]()),this['refresh']();},Window_AutoBattleCancel['prototype'][_0x29c7b3(0x52f)]=function(){const _0x2d0e8f=_0x29c7b3;return VisuMZ['BattleCore'][_0x2d0e8f(0xc14)][_0x2d0e8f(0x19e)][_0x2d0e8f(0x1f3)];},Window_AutoBattleCancel[_0x29c7b3(0xc03)][_0x29c7b3(0x842)]=function(){const _0x35fa98=_0x29c7b3;this[_0x35fa98(0x6b6)][_0x35fa98(0x917)]();const _0xa0135=VisuMZ[_0x35fa98(0x2e2)][_0x35fa98(0xc14)][_0x35fa98(0x19e)]['AutoBattleMsg'],_0x411281=_0xa0135['format'](this[_0x35fa98(0x123)](),this[_0x35fa98(0x2e1)]()),_0x4f81a4=this[_0x35fa98(0x33f)](_0x411281)['width'],_0x5100cb=Math['floor']((this[_0x35fa98(0x6aa)]-_0x4f81a4)/0x2);this['drawTextEx'](_0x411281,_0x5100cb,0x0,_0x4f81a4);},Window_AutoBattleCancel[_0x29c7b3(0xc03)][_0x29c7b3(0x123)]=function(){const _0x5e86a3=_0x29c7b3;return Imported[_0x5e86a3(0x50c)]?TextManager[_0x5e86a3(0x1a9)]('ok'):VisuMZ[_0x5e86a3(0x2e2)][_0x5e86a3(0xc14)][_0x5e86a3(0x19e)][_0x5e86a3(0x195)];},Window_AutoBattleCancel[_0x29c7b3(0xc03)][_0x29c7b3(0x2e1)]=function(){const _0x3a2dbb=_0x29c7b3;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x3a2dbb(0x1a9)](_0x3a2dbb(0xbc1)):VisuMZ['BattleCore']['Settings'][_0x3a2dbb(0x19e)][_0x3a2dbb(0x7e4)];},Window_AutoBattleCancel[_0x29c7b3(0xc03)]['update']=function(){const _0x434560=_0x29c7b3;Window_Base[_0x434560(0xc03)][_0x434560(0x592)][_0x434560(0x8d6)](this),this[_0x434560(0x346)](),this['updateCancel']();},Window_AutoBattleCancel['prototype'][_0x29c7b3(0x346)]=function(){const _0x10baeb=_0x29c7b3;this['visible']=BattleManager[_0x10baeb(0xb25)];},Window_AutoBattleCancel[_0x29c7b3(0xc03)]['updateCancel']=function(){const _0x2686f8=_0x29c7b3;if(!BattleManager[_0x2686f8(0xb25)])return;(Input[_0x2686f8(0xbbc)]('ok')||Input[_0x2686f8(0xbbc)](_0x2686f8(0xbc1))||TouchInput[_0x2686f8(0x77c)]()||TouchInput['isCancelled']())&&(SoundManager['playCancel'](),BattleManager[_0x2686f8(0xb25)]=![],Input[_0x2686f8(0x917)](),TouchInput[_0x2686f8(0x917)]());};function Window_EnemyName(){this['initialize'](...arguments);}Window_EnemyName[_0x29c7b3(0xc03)]=Object[_0x29c7b3(0x57e)](Window_StatusBase['prototype']),Window_EnemyName[_0x29c7b3(0xc03)]['constructor']=Window_EnemyName,Window_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x1a0)]=function(_0x54aec9){const _0x4fda85=_0x29c7b3;this[_0x4fda85(0x625)]=_0x54aec9,this[_0x4fda85(0x72d)]='';const _0x2fa85d=new Rectangle(0x0,0x0,Graphics['boxWidth'],this['lineHeight']()*0x4);Window_StatusBase[_0x4fda85(0xc03)]['initialize'][_0x4fda85(0x8d6)](this,_0x2fa85d),this[_0x4fda85(0x64d)](0x2),this['contentsOpacity']=0x0;},Window_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x3c4)]=function(){this['padding']=0x0;},Window_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x662)]=function(){const _0x46bca7=_0x29c7b3;return $gameTroop[_0x46bca7(0xa35)]()[this[_0x46bca7(0x625)]];},Window_EnemyName[_0x29c7b3(0xc03)][_0x29c7b3(0x592)]=function(){const _0x1e3110=_0x29c7b3;Window_StatusBase[_0x1e3110(0xc03)][_0x1e3110(0x592)]['call'](this),this['enemy']()&&this['enemy']()[_0x1e3110(0x161)]()!==this['_text']&&(this[_0x1e3110(0x72d)]=this['enemy']()[_0x1e3110(0x161)](),this[_0x1e3110(0x842)]()),this[_0x1e3110(0x2bc)](),this['updatePosition']();},Window_EnemyName[_0x29c7b3(0xc03)]['updateOpacity']=function(){const _0x2689e5=_0x29c7b3;if(!this[_0x2689e5(0x662)]()){if(this[_0x2689e5(0x4c9)]>0x0)this[_0x2689e5(0x4c9)]-=0x10;}else{if(this[_0x2689e5(0x662)]()[_0x2689e5(0x7cd)]()){if(this[_0x2689e5(0x4c9)]>0x0)this['contentsOpacity']-=0x10;}else{if(SceneManager['_scene'][_0x2689e5(0x174)]&&SceneManager[_0x2689e5(0x364)][_0x2689e5(0x174)][_0x2689e5(0x33d)]&&SceneManager[_0x2689e5(0x364)]['_enemyWindow'][_0x2689e5(0x865)]['includes'](this['enemy']())){if(this[_0x2689e5(0x4c9)]<0xff)this[_0x2689e5(0x4c9)]+=0x10;}else this[_0x2689e5(0x4c9)]>0x0&&(this['contentsOpacity']-=0x10);}}},Window_EnemyName[_0x29c7b3(0xc03)]['updatePosition']=function(){const _0x2a6e52=_0x29c7b3;if(!this['enemy']())return;SceneManager[_0x2a6e52(0xa4a)]()?this['x']=Graphics[_0x2a6e52(0xc0c)]-this['enemy']()['battler']()[_0x2a6e52(0xa3a)]:this['x']=this[_0x2a6e52(0x662)]()['battler']()[_0x2a6e52(0xa3a)];this['x']-=Math[_0x2a6e52(0x50f)](this[_0x2a6e52(0x580)]/0x2),this['y']=this[_0x2a6e52(0x662)]()['battler']()[_0x2a6e52(0x488)]-Math[_0x2a6e52(0x50f)](this[_0x2a6e52(0x956)]()*1.5);const _0x292afe=VisuMZ['BattleCore']['Settings'][_0x2a6e52(0xac6)];this['x']+=_0x292afe['NameOffsetX']||0x0,this['y']+=_0x292afe['NameOffsetY']||0x0;},Window_EnemyName['prototype'][_0x29c7b3(0x738)]=function(){const _0x2b8170=_0x29c7b3;Window_Base[_0x2b8170(0xc03)][_0x2b8170(0x738)][_0x2b8170(0x8d6)](this),this['contents'][_0x2b8170(0x4b7)]=VisuMZ[_0x2b8170(0x2e2)][_0x2b8170(0xc14)][_0x2b8170(0xac6)][_0x2b8170(0x6dd)];},Window_EnemyName['prototype']['refresh']=function(){const _0x387910=_0x29c7b3;Window_StatusBase[_0x387910(0xc03)][_0x387910(0x842)][_0x387910(0x8d6)](this),this[_0x387910(0x6b6)][_0x387910(0x917)]();if(!this[_0x387910(0x662)]())return;this['drawEnemyName']();},Window_EnemyName['prototype'][_0x29c7b3(0x62b)]=function(){const _0x561d42=_0x29c7b3;this[_0x561d42(0x72d)]=this[_0x561d42(0x662)]()[_0x561d42(0x161)]();const _0x2eb8dd=this[_0x561d42(0x33f)](this[_0x561d42(0x72d)])[_0x561d42(0x580)],_0x542acf=Math['round']((this['innerWidth']-_0x2eb8dd)/0x2);this[_0x561d42(0x914)](this['_text'],_0x542acf,0x0,_0x2eb8dd+0x8);},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x894)]=function(){const _0xc0f8da=_0x29c7b3;return VisuMZ[_0xc0f8da(0x2e2)]['Settings'][_0xc0f8da(0x911)][_0xc0f8da(0xb39)];},Window_BattleLog['prototype']['messageSpeed']=function(){const _0x4bf0f5=_0x29c7b3;return VisuMZ[_0x4bf0f5(0x2e2)]['Settings'][_0x4bf0f5(0x911)][_0x4bf0f5(0x557)];},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0xb07)]=function(){const _0x4692a3=_0x29c7b3;return VisuMZ['BattleCore']['Settings'][_0x4692a3(0x911)][_0x4692a3(0x33a)];},Window_BattleLog['prototype'][_0x29c7b3(0xb9f)]=function(){return![];},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x83f)]=function(_0x4bb40c,_0xf2e266){const _0x253a29=_0x29c7b3;this[_0x253a29(0x5ab)](_0x253a29(0x2fd)),BattleManager[_0x253a29(0xc28)](_0x4bb40c,_0xf2e266),this[_0x253a29(0x931)]();},Window_BattleLog['prototype'][_0x29c7b3(0x61a)]=function(_0x10c8a1,_0x1af0f2,_0x1654ce){const _0x37fc6d=_0x29c7b3;this[_0x37fc6d(0x5ab)](_0x37fc6d(0x2fd)),BattleManager[_0x37fc6d(0x5c2)](_0x10c8a1,_0x1af0f2,_0x1654ce),this[_0x37fc6d(0x931)]();},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x2fd)]=function(){this['callNextMethod']();},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x13a)]=function(_0x48f98c){const _0x24cda8=_0x29c7b3,_0x37b535=Array[_0x24cda8(0xc03)][_0x24cda8(0x14e)][_0x24cda8(0x8d6)](arguments,0x1),_0xa76ce3={'name':_0x48f98c,'params':_0x37b535},_0x1026c1=this['_methods']['map'](_0x341663=>_0x341663['name'])[_0x24cda8(0x617)](_0x24cda8(0x2fd));_0x1026c1>=0x0?this[_0x24cda8(0xa11)][_0x24cda8(0x36c)](_0x1026c1,0x0,_0xa76ce3):this[_0x24cda8(0xa11)][_0x24cda8(0x13a)](_0xa76ce3);},Window_BattleLog['prototype']['unshift']=function(_0x248b4e){const _0x4b88b5=_0x29c7b3,_0x15462a=Array['prototype'][_0x4b88b5(0x14e)][_0x4b88b5(0x8d6)](arguments,0x1);this[_0x4b88b5(0xa11)]['unshift']({'name':_0x248b4e,'params':_0x15462a});},Window_BattleLog[_0x29c7b3(0xc03)]['logActionList']=function(){const _0x18f1c5=_0x29c7b3;if(!$gameTemp[_0x18f1c5(0x472)]())return;console[_0x18f1c5(0x22d)](this['_methods'][_0x18f1c5(0x8ea)](_0x379ec2=>_0x379ec2[_0x18f1c5(0x161)])[_0x18f1c5(0x430)]('\x0a'));},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x152)]=Window_BattleLog['prototype'][_0x29c7b3(0x842)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x842)]=function(){const _0x37285e=_0x29c7b3;this[_0x37285e(0x252)]=!![];},VisuMZ[_0x29c7b3(0x2e2)]['Window_BattleLog_update']=Window_BattleLog[_0x29c7b3(0xc03)]['update'],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x592)]=function(){VisuMZ['BattleCore']['Window_BattleLog_update']['call'](this);if(this['_requestRefresh'])this['processRefresh']();},Window_BattleLog['prototype']['processRefresh']=function(){const _0x43447b=_0x29c7b3;this[_0x43447b(0x252)]=![],VisuMZ[_0x43447b(0x2e2)][_0x43447b(0x152)]['call'](this);},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x7f5)]=function(_0x3ef48f){const _0xe5418a=_0x29c7b3;let _0x3df541=VisuMZ[_0xe5418a(0x2e2)][_0xe5418a(0xc14)]['BattleLog']['TextAlign'][_0xe5418a(0x6fd)]()[_0xe5418a(0x89a)](),_0x19f54b=this[_0xe5418a(0x3d3)][_0x3ef48f];if(_0x19f54b[_0xe5418a(0x290)](/<LEFT>/i))_0x3df541=_0xe5418a(0x608);else{if(_0x19f54b[_0xe5418a(0x290)](/<CENTER>/i))_0x3df541=_0xe5418a(0x5cb);else _0x19f54b[_0xe5418a(0x290)](/<RIGHT>/i)&&(_0x3df541=_0xe5418a(0xc23));}_0x19f54b=_0x19f54b['replace'](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x19f54b=_0x19f54b[_0xe5418a(0xa2c)](/\\I\[0\]/gi,'');const _0x29d680=this['lineRect'](_0x3ef48f);this[_0xe5418a(0x6b6)]['clearRect'](_0x29d680['x'],_0x29d680['y'],_0x29d680[_0xe5418a(0x580)],_0x29d680[_0xe5418a(0x719)]);const _0x53fd91=this['textSizeEx'](_0x19f54b)['width'];let _0x23978b=_0x29d680['x'];if(_0x3df541===_0xe5418a(0x5cb))_0x23978b+=(_0x29d680[_0xe5418a(0x580)]-_0x53fd91)/0x2;else _0x3df541===_0xe5418a(0xc23)&&(_0x23978b+=_0x29d680[_0xe5418a(0x580)]-_0x53fd91);this[_0xe5418a(0x914)](_0x19f54b,_0x23978b,_0x29d680['y'],_0x53fd91+0x8);},Window_BattleLog['prototype'][_0x29c7b3(0x289)]=function(_0x39f750){const _0x27d513=_0x29c7b3;this['_lines'][_0x27d513(0x13a)](_0x39f750),this[_0x27d513(0x842)](),this[_0x27d513(0x931)]();},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0xa12)]=function(){const _0x531771=_0x29c7b3;let _0x2c5078=![];switch(this['_waitMode']){case _0x531771(0x5c4):_0x2c5078=this[_0x531771(0x690)][_0x531771(0x120)]();break;case _0x531771(0xb18):_0x2c5078=this[_0x531771(0x690)]['isAnyoneMoving']();break;case _0x531771(0x8db):_0x2c5078=this[_0x531771(0x690)]['isAnimationPlaying']();break;case'float':_0x2c5078=this[_0x531771(0x690)][_0x531771(0x4e8)]();break;case'jump':_0x2c5078=this[_0x531771(0x690)][_0x531771(0x845)]();break;case _0x531771(0x81b):_0x2c5078=this['_spriteset'][_0x531771(0x5ba)]();break;}return!_0x2c5078&&(this[_0x531771(0x863)]=''),_0x2c5078;},Window_BattleLog['prototype'][_0x29c7b3(0x59f)]=function(){const _0xc1298c=_0x29c7b3;this[_0xc1298c(0x493)](_0xc1298c(0x8db));},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x706)]=function(){this['setWaitMode']('float');},Window_BattleLog[_0x29c7b3(0xc03)]['waitForJump']=function(){const _0x357de8=_0x29c7b3;this[_0x357de8(0x493)](_0x357de8(0x994));},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0xa9e)]=function(){const _0x19047c=_0x29c7b3;this[_0x19047c(0x493)]('opacity');},Window_BattleLog['prototype']['startTurn']=function(){const _0x6e06b=_0x29c7b3,_0x4a1a98=VisuMZ['BattleCore'][_0x6e06b(0xc14)][_0x6e06b(0x911)];if(!_0x4a1a98[_0x6e06b(0x3e5)])return;this[_0x6e06b(0x13a)](_0x6e06b(0x289),_0x4a1a98['StartTurnMsg']['format']($gameTroop[_0x6e06b(0x9ef)]())),this[_0x6e06b(0x13a)]('waitCount',_0x4a1a98[_0x6e06b(0x7db)]),this[_0x6e06b(0x13a)](_0x6e06b(0x917));};var $subject,$action,$targets;Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x356)]=function(_0x16a33f,_0x125fa6,_0x579182){const _0x1f8e06=_0x29c7b3;$subject=_0x16a33f,$action=_0x125fa6,$targets=_0x579182,this[_0x1f8e06(0x382)](_0x125fa6)?BattleManager[_0x1f8e06(0xb97)]():this[_0x1f8e06(0x239)](_0x16a33f,_0x125fa6,_0x579182);},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x382)]=function(_0x52af4a){const _0x291e04=_0x29c7b3;if(!SceneManager[_0x291e04(0x429)]())return![];if(!_0x52af4a)return![];if(!_0x52af4a[_0x291e04(0x7cc)]())return![];if(_0x52af4a['item']()[_0x291e04(0x124)][_0x291e04(0x290)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x291e04(0xac5)](_0x52af4a['item']()))return!![];return![];},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x239)]=function(_0x37011f,_0x3cf308,_0x553be8){const _0xac56bb=_0x29c7b3;this[_0xac56bb(0x6fc)](_0x37011f,_0x3cf308,_0x553be8),this['createEffectActionSet'](_0x37011f,_0x3cf308,_0x553be8),this[_0xac56bb(0x3d9)](_0x37011f,_0x3cf308,_0x553be8);},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x1be)]=function(_0x353d43,_0x524642){const _0x33a915=_0x29c7b3,_0xdadbb8=VisuMZ[_0x33a915(0x2e2)]['Settings'][_0x33a915(0x911)];_0xdadbb8[_0x33a915(0x4e9)]&&this['push'](_0x33a915(0x289),_0x33a915(0x3d0)[_0x33a915(0x77d)](DataManager['battleDisplayText'](_0x524642)));if(DataManager[_0x33a915(0x94d)](_0x524642)){if(_0xdadbb8[_0x33a915(0xb84)])this[_0x33a915(0x798)](_0x524642[_0x33a915(0x75c)],_0x353d43,_0x524642);if(_0xdadbb8[_0x33a915(0x68c)])this['displayItemMessage'](_0x524642[_0x33a915(0x4d5)],_0x353d43,_0x524642);}else{if(_0xdadbb8['ActionItemMsg'])this['displayItemMessage'](TextManager[_0x33a915(0xb26)],_0x353d43,_0x524642);}},Window_BattleLog['prototype'][_0x29c7b3(0x6fc)]=function(_0x163119,_0x573326,_0x2ef45c){const _0x5ebd54=_0x29c7b3,_0x4abd77=_0x573326[_0x5ebd54(0x7cc)]();this[_0x5ebd54(0x1be)](_0x163119,_0x4abd77),this['push'](_0x5ebd54(0x901),_0x163119,_0x2ef45c,!![]),this[_0x5ebd54(0x13a)](_0x5ebd54(0xa85),_0x163119,_0x573326),this['push'](_0x5ebd54(0x2ae)),this[_0x5ebd54(0x13a)](_0x5ebd54(0x6d6),_0x163119,_0x573326),this[_0x5ebd54(0x13a)](_0x5ebd54(0x59f));},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x92f)]=function(_0x158ab7,_0x19d7a8,_0x51dda4){const _0x457f99=_0x29c7b3;if(this['isMeleeSingleTargetAction'](_0x19d7a8))this[_0x457f99(0x59e)](_0x158ab7,_0x19d7a8,_0x51dda4);else{if(this['isMeleeMultiTargetAction'](_0x19d7a8))this['autoMeleeMultiTargetActionSet'](_0x158ab7,_0x19d7a8,_0x51dda4);else _0x19d7a8[_0x457f99(0x331)]()?this['targetActionSet'](_0x158ab7,_0x19d7a8,_0x51dda4):this[_0x457f99(0xa3f)](_0x158ab7,_0x19d7a8,_0x51dda4);}},Window_BattleLog[_0x29c7b3(0xc03)]['addMeleeReturnActionSet']=function(_0x104a98,_0x554fef,_0x4e20c5,_0x246568){const _0x488ec0=_0x29c7b3;if(_0x554fef){const _0x24c8b7=_0x104a98['battler']();this[_0x488ec0(0x13a)](_0x488ec0(0x8d0),[_0x104a98],_0x4e20c5,_0x246568),this[_0x488ec0(0x13a)](_0x488ec0(0x8d1),_0x104a98,_0x24c8b7[_0x488ec0(0x755)],_0x24c8b7['_homeY'],_0x246568,![],_0x488ec0(0x2da)),this[_0x488ec0(0x13a)]('requestMotion',[_0x104a98],_0x488ec0(0x801)),this['push'](_0x488ec0(0x2ae)),this[_0x488ec0(0x13a)](_0x488ec0(0x635),[_0x104a98],_0x488ec0(0x926));}},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x7de)]=function(_0x123d2e){const _0x399eec=_0x29c7b3;if(!_0x123d2e['isPhysical']())return![];if(!_0x123d2e[_0x399eec(0xa78)]())return![];if(!_0x123d2e[_0x399eec(0x1a3)]())return![];return VisuMZ['BattleCore']['Settings'][_0x399eec(0x54f)][_0x399eec(0x322)];},Window_BattleLog['prototype'][_0x29c7b3(0x59e)]=function(_0x4ac624,_0x4fe672,_0x415c93){const _0x2ece4e=_0x29c7b3,_0x411a8a=_0x4ac624[_0x2ece4e(0x912)]()[_0x2ece4e(0x65f)]<0x2,_0x173543=0x14,_0x4a9da0=0x30;let _0x4db4c6=!![];_0x415c93['length']>0x0&&_0x4ac624[_0x2ece4e(0xa27)]()===_0x415c93[0x0][_0x2ece4e(0xa27)]()&&(_0x4db4c6=![]);_0x411a8a&&_0x4db4c6&&(this[_0x2ece4e(0x13a)](_0x2ece4e(0x8d0),[_0x4ac624],_0x4a9da0,_0x173543),this[_0x2ece4e(0x13a)](_0x2ece4e(0x35f),_0x4ac624,_0x415c93,_0x2ece4e(0x1ad),_0x173543,!![],_0x2ece4e(0x2da),!![]),this['push'](_0x2ece4e(0x635),[_0x4ac624],_0x2ece4e(0x926)),this[_0x2ece4e(0x13a)]('waitForMovement'));let _0x3d4d67=_0x4fe672['isAttack']()?this[_0x2ece4e(0x9e4)](_0x4ac624):0x1;for(let _0x4877b5=0x0;_0x4877b5<_0x3d4d67;_0x4877b5++){_0x4fe672[_0x2ece4e(0x6ea)]()&&_0x4ac624['isActor']()&&this[_0x2ece4e(0x13a)](_0x2ece4e(0x306),_0x4ac624,_0x4877b5),_0x4fe672[_0x2ece4e(0x7cc)]()[_0x2ece4e(0x2d9)]<0x0?this['targetActionSet'](_0x4ac624,_0x4fe672,_0x415c93):this[_0x2ece4e(0xa3f)](_0x4ac624,_0x4fe672,_0x415c93);}_0x4fe672['isAttack']()&&_0x4ac624['isActor']()&&this[_0x2ece4e(0x13a)](_0x2ece4e(0x19b),_0x4ac624),this['push']('applyImmortal',_0x4ac624,_0x415c93,![]),this[_0x2ece4e(0x559)](_0x4ac624,_0x411a8a,_0x4a9da0,_0x173543);},Window_BattleLog[_0x29c7b3(0xc03)]['isMeleeMultiTargetAction']=function(_0x45109b){const _0x3ae628=_0x29c7b3;if(!_0x45109b[_0x3ae628(0xa1f)]())return![];if(!_0x45109b[_0x3ae628(0xa4b)]())return![];if(!_0x45109b['isForOpponent']())return![];return VisuMZ['BattleCore'][_0x3ae628(0xc14)][_0x3ae628(0x54f)][_0x3ae628(0x4af)];},Window_BattleLog['prototype'][_0x29c7b3(0x5c3)]=function(_0x519d32,_0x16ef9c,_0x3184b6){const _0x4ffeee=_0x29c7b3,_0x4e488a=_0x519d32['getAttackMotion']()['type']<0x2,_0x296063=0x14,_0x53b67b=0x30;if(_0x4e488a){this[_0x4ffeee(0x13a)](_0x4ffeee(0x8d0),[_0x519d32],_0x53b67b,_0x296063);const _0x334b77=_0x3184b6[_0x4ffeee(0xba7)]>0x1?_0x4ffeee(0x79c):_0x4ffeee(0x1ad);this[_0x4ffeee(0x13a)](_0x4ffeee(0x35f),_0x519d32,_0x3184b6,_0x334b77,_0x296063,!![],'Linear',!![]),this[_0x4ffeee(0x13a)]('requestMotion',[_0x519d32],_0x4ffeee(0x926)),this[_0x4ffeee(0x13a)](_0x4ffeee(0x2ae));}let _0x8db7c7=_0x16ef9c[_0x4ffeee(0x6ea)]()?this[_0x4ffeee(0x9e4)](_0x519d32):0x1;for(let _0x28cddc=0x0;_0x28cddc<_0x8db7c7;_0x28cddc++){_0x16ef9c['isAttack']()&&_0x519d32[_0x4ffeee(0xa27)]()&&this[_0x4ffeee(0x13a)]('setActiveWeaponSet',_0x519d32,_0x28cddc),this['wholeActionSet'](_0x519d32,_0x16ef9c,_0x3184b6);}_0x16ef9c['isAttack']()&&_0x519d32[_0x4ffeee(0xa27)]()&&this[_0x4ffeee(0x13a)](_0x4ffeee(0x19b),_0x519d32),this[_0x4ffeee(0x13a)](_0x4ffeee(0x901),_0x519d32,_0x3184b6,![]),this['addMeleeReturnActionSet'](_0x519d32,_0x4e488a,_0x53b67b,_0x296063);},Window_BattleLog['prototype'][_0x29c7b3(0x531)]=function(_0x396edf,_0x2cbb4d,_0x318f9c){const _0xea3671=_0x29c7b3,_0x44e76a=_0x2cbb4d['item']();for(const _0x3ded4c of _0x318f9c){if(!_0x3ded4c)continue;this[_0xea3671(0x13a)]('performAction',_0x396edf,_0x2cbb4d),this['push'](_0xea3671(0x2d7),Sprite_Battler[_0xea3671(0x9ae)]),this[_0xea3671(0x13a)](_0xea3671(0x4cb),_0x396edf,[_0x3ded4c],_0x44e76a[_0xea3671(0x2d9)]),this[_0xea3671(0x13a)](_0xea3671(0x2d7),0x18),this[_0xea3671(0x13a)](_0xea3671(0x83f),_0x396edf,_0x3ded4c);}},Window_BattleLog['prototype'][_0x29c7b3(0xa3f)]=function(_0x47b8cf,_0x3f8d5e,_0x4156c4){const _0x18b1ac=_0x29c7b3,_0x596ecc=_0x3f8d5e[_0x18b1ac(0x7cc)]();let _0x559a75=_0x3f8d5e[_0x18b1ac(0x6ea)]()?0x1+_0x47b8cf[_0x18b1ac(0x41c)]():0x1;while(_0x559a75--){this['push'](_0x18b1ac(0x6bf),_0x47b8cf,_0x3f8d5e),this['push'](_0x18b1ac(0x2d7),Sprite_Battler[_0x18b1ac(0x9ae)]),this[_0x18b1ac(0x13a)](_0x18b1ac(0x4cb),_0x47b8cf,_0x4156c4[_0x18b1ac(0xb06)](),_0x596ecc[_0x18b1ac(0x2d9)]),this['push'](_0x18b1ac(0x59f));}for(const _0x5d8a78 of _0x4156c4){if(!_0x5d8a78)continue;this[_0x18b1ac(0x13a)](_0x18b1ac(0x83f),_0x47b8cf,_0x5d8a78);}},Window_BattleLog['prototype'][_0x29c7b3(0x3d9)]=function(_0x444fdc,_0x2e385c,_0x23fb53){const _0x130679=_0x29c7b3,_0x15f055=_0x2e385c[_0x130679(0x7cc)]();this[_0x130679(0x13a)]('applyImmortal',_0x444fdc,_0x23fb53,![]),this['push'](_0x130679(0x7c0)),this['push'](_0x130679(0x3bf)),this['push']('clear'),this['push'](_0x130679(0xc21),_0x444fdc),this[_0x130679(0x13a)](_0x130679(0x2ae));},Window_BattleLog['prototype'][_0x29c7b3(0xa0a)]=function(_0x357ce1){$subject=null,$action=null,$targets=[];},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x30b)]=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x788)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x788)]=function(_0x57bde8){const _0x774e36=_0x29c7b3;if(!VisuMZ[_0x774e36(0x2e2)][_0x774e36(0xc14)]['BattleLog'][_0x774e36(0x5a7)])return;VisuMZ['BattleCore'][_0x774e36(0x30b)][_0x774e36(0x8d6)](this,_0x57bde8);},Window_BattleLog['prototype'][_0x29c7b3(0x119)]=function(_0x5b0ec1){const _0x1fa68e=_0x29c7b3;this[_0x1fa68e(0x13a)](_0x1fa68e(0x633),_0x5b0ec1);VisuMZ['BattleCore']['Settings']['ActionSequence'][_0x1fa68e(0x2b9)]&&this['push'](_0x1fa68e(0x4cb),_0x5b0ec1,[BattleManager[_0x1fa68e(0x215)]],-0x1);if(!VisuMZ[_0x1fa68e(0x2e2)][_0x1fa68e(0xc14)][_0x1fa68e(0x911)][_0x1fa68e(0x8b3)])return;this['push']('addText',TextManager[_0x1fa68e(0x889)]['format'](_0x5b0ec1[_0x1fa68e(0x161)]()));const _0x45b7e2=VisuMZ[_0x1fa68e(0x2e2)]['Settings'][_0x1fa68e(0x911)][_0x1fa68e(0x892)]??0x0;if(_0x45b7e2>0x0)this[_0x1fa68e(0x13a)]('waitCount',_0x45b7e2);;},Window_BattleLog[_0x29c7b3(0xc03)]['displayReflection']=function(_0x4e5cd3){const _0x506a72=_0x29c7b3;this[_0x506a72(0x13a)](_0x506a72(0x63e),_0x4e5cd3);if(!VisuMZ[_0x506a72(0x2e2)][_0x506a72(0xc14)]['BattleLog']['ShowReflect'])return;this[_0x506a72(0x13a)](_0x506a72(0x289),TextManager[_0x506a72(0x587)][_0x506a72(0x77d)](_0x4e5cd3['name']()));const _0x19b0bc=VisuMZ[_0x506a72(0x2e2)][_0x506a72(0xc14)][_0x506a72(0x911)][_0x506a72(0x4eb)]??0x0;if(_0x19b0bc>0x0)this['push'](_0x506a72(0x2d7),_0x19b0bc);;},Window_BattleLog['prototype']['displayReflectionPlayBack']=function(_0x36b1f,_0x1f677f){const _0x39b92c=_0x29c7b3;if(VisuMZ[_0x39b92c(0x2e2)][_0x39b92c(0xc14)]['ActionSequence'][_0x39b92c(0x550)]){const _0x32d674=_0x1f677f[_0x39b92c(0x7cc)]();this[_0x39b92c(0x13a)](_0x39b92c(0x4cb),_0x36b1f,[_0x36b1f],_0x32d674[_0x39b92c(0x2d9)]);}},Window_BattleLog[_0x29c7b3(0xc03)]['displaySubstitute']=function(_0x1a0c0b,_0x3a231b){const _0x20ca39=_0x29c7b3;this[_0x20ca39(0x13a)]('performSubstitute',_0x1a0c0b,_0x3a231b);if(!VisuMZ[_0x20ca39(0x2e2)][_0x20ca39(0xc14)]['BattleLog'][_0x20ca39(0x95c)])return;const _0x1407bc=_0x1a0c0b[_0x20ca39(0x161)](),_0x267418=TextManager[_0x20ca39(0x2b3)][_0x20ca39(0x77d)](_0x1407bc,_0x3a231b[_0x20ca39(0x161)]());this[_0x20ca39(0x13a)](_0x20ca39(0x289),_0x267418);const _0x15240b=VisuMZ['BattleCore'][_0x20ca39(0xc14)][_0x20ca39(0x911)][_0x20ca39(0x9a1)]??0x0;if(_0x15240b>0x0)this[_0x20ca39(0x13a)](_0x20ca39(0x2d7),_0x15240b);;},VisuMZ['BattleCore'][_0x29c7b3(0x720)]=Window_BattleLog['prototype'][_0x29c7b3(0x7b0)],Window_BattleLog['prototype'][_0x29c7b3(0x7b0)]=function(_0x347331,_0x5651fc){const _0x3f0aa8=_0x29c7b3;VisuMZ[_0x3f0aa8(0x2e2)][_0x3f0aa8(0x720)][_0x3f0aa8(0x8d6)](this,_0x347331,_0x5651fc);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x4c5)]=Window_BattleLog['prototype'][_0x29c7b3(0xab2)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0xab2)]=function(_0x1444dd){const _0x12fd6a=_0x29c7b3;if(!VisuMZ[_0x12fd6a(0x2e2)][_0x12fd6a(0xc14)][_0x12fd6a(0x911)]['ShowFailure'])return;VisuMZ[_0x12fd6a(0x2e2)][_0x12fd6a(0x4c5)][_0x12fd6a(0x8d6)](this,_0x1444dd);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x9ed)]=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x76c)],Window_BattleLog[_0x29c7b3(0xc03)]['displayCritical']=function(_0xa722f0){const _0x27ac57=_0x29c7b3;if(!VisuMZ[_0x27ac57(0x2e2)][_0x27ac57(0xc14)][_0x27ac57(0x911)][_0x27ac57(0x44f)])return;VisuMZ[_0x27ac57(0x2e2)]['Window_BattleLog_displayCritical'][_0x27ac57(0x8d6)](this,_0xa722f0);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x678)]=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x85e)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x85e)]=function(_0x1207a8){const _0x41b567=_0x29c7b3;!VisuMZ[_0x41b567(0x2e2)][_0x41b567(0xc14)]['BattleLog'][_0x41b567(0x668)]?this[_0x41b567(0x13a)](_0x41b567(0x12f),_0x1207a8):VisuMZ[_0x41b567(0x2e2)][_0x41b567(0x678)]['call'](this,_0x1207a8);},VisuMZ[_0x29c7b3(0x2e2)]['Window_BattleLog_displayEvasion']=Window_BattleLog['prototype'][_0x29c7b3(0x42e)],Window_BattleLog['prototype'][_0x29c7b3(0x42e)]=function(_0x5f1b93){const _0xa04308=_0x29c7b3;!VisuMZ['BattleCore'][_0xa04308(0xc14)][_0xa04308(0x911)][_0xa04308(0x668)]?_0x5f1b93[_0xa04308(0x5ee)]()[_0xa04308(0x193)]?this[_0xa04308(0x13a)](_0xa04308(0x53e),_0x5f1b93):this[_0xa04308(0x13a)]('performMagicEvasion',_0x5f1b93):VisuMZ['BattleCore'][_0xa04308(0x2c2)]['call'](this,_0x5f1b93);},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x84a)]=function(_0x448217){const _0x331d80=_0x29c7b3;_0x448217[_0x331d80(0x5ee)]()['hpAffected']&&(_0x448217['_lastHpDamage']=0x0,_0x448217[_0x331d80(0x5ee)]()['hpDamage']>0x0&&!_0x448217[_0x331d80(0x5ee)]()[_0x331d80(0x4ba)]&&(_0x448217[_0x331d80(0x4b9)]=_0x448217['result']()['hpDamage'],this[_0x331d80(0x13a)]('performDamage',_0x448217)),_0x448217[_0x331d80(0x5ee)]()['hpDamage']<0x0&&this['push'](_0x331d80(0x2f2),_0x448217),VisuMZ[_0x331d80(0x2e2)][_0x331d80(0xc14)][_0x331d80(0x911)][_0x331d80(0x63d)]&&this[_0x331d80(0x13a)](_0x331d80(0x289),this[_0x331d80(0x9b6)](_0x448217)));},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xb63)]=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x70a)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x70a)]=function(_0xffe2bf){const _0x12b940=_0x29c7b3;if(!VisuMZ['BattleCore']['Settings'][_0x12b940(0x911)][_0x12b940(0x621)])return;VisuMZ[_0x12b940(0x2e2)][_0x12b940(0xb63)]['call'](this,_0xffe2bf);},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x6f4)]=Window_BattleLog[_0x29c7b3(0xc03)]['displayTpDamage'],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x998)]=function(_0x2098f8){const _0x5495af=_0x29c7b3;if(!VisuMZ[_0x5495af(0x2e2)][_0x5495af(0xc14)][_0x5495af(0x911)][_0x5495af(0x942)])return;VisuMZ[_0x5495af(0x2e2)][_0x5495af(0x6f4)][_0x5495af(0x8d6)](this,_0x2098f8);},Window_BattleLog['prototype'][_0x29c7b3(0x69c)]=function(_0x584595){const _0xa53282=_0x29c7b3;_0x584595[_0xa53282(0x5ee)]()[_0xa53282(0xa49)]()&&(this[_0xa53282(0x13a)](_0xa53282(0x85b)),this[_0xa53282(0x23e)](_0x584595),this[_0xa53282(0x270)](_0x584595),this[_0xa53282(0x13a)](_0xa53282(0x7c0)));},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x269)]=function(_0x3226e6){const _0x1c419d=_0x29c7b3,_0x1c93f8=_0x3226e6[_0x1c419d(0x5ee)](),_0x484b28=_0x1c93f8['addedStateObjects']();for(const _0x1743e4 of _0x484b28){const _0x47c9cd=_0x3226e6[_0x1c419d(0xa27)]()?_0x1743e4[_0x1c419d(0x75c)]:_0x1743e4['message2'];_0x47c9cd&&VisuMZ[_0x1c419d(0x2e2)][_0x1c419d(0xc14)]['BattleLog'][_0x1c419d(0x5d3)]&&(this[_0x1c419d(0x13a)](_0x1c419d(0x5fd)),this[_0x1c419d(0x13a)](_0x1c419d(0x85b)),this['push'](_0x1c419d(0x289),_0x47c9cd['format'](_0x3226e6[_0x1c419d(0x161)]())),this[_0x1c419d(0x13a)](_0x1c419d(0x60f))),_0x1743e4['id']===_0x3226e6['deathStateId']()&&this[_0x1c419d(0x13a)](_0x1c419d(0xa13),_0x3226e6);}},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x72e)]=function(_0xa40eaa){const _0x3ca300=_0x29c7b3;if(!VisuMZ[_0x3ca300(0x2e2)]['Settings'][_0x3ca300(0x911)][_0x3ca300(0x945)])return;const _0x46e8aa=_0xa40eaa[_0x3ca300(0x5ee)](),_0x562f6c=_0x46e8aa['removedStateObjects']();for(const _0x456e45 of _0x562f6c){_0x456e45['message4']&&(this[_0x3ca300(0x13a)](_0x3ca300(0x5fd)),this[_0x3ca300(0x13a)]('pushBaseLine'),this[_0x3ca300(0x13a)](_0x3ca300(0x289),_0x456e45[_0x3ca300(0x1b8)][_0x3ca300(0x77d)](_0xa40eaa[_0x3ca300(0x161)]())),this[_0x3ca300(0x13a)](_0x3ca300(0x60f)));}},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x270)]=function(_0x379d3c){const _0x45f3a7=_0x29c7b3,_0x49fe68=VisuMZ[_0x45f3a7(0x2e2)][_0x45f3a7(0xc14)][_0x45f3a7(0x911)],_0x1d752d=_0x379d3c[_0x45f3a7(0x5ee)]();if(_0x49fe68['ShowAddedBuff'])this[_0x45f3a7(0xbc2)](_0x379d3c,_0x1d752d[_0x45f3a7(0xa2f)],TextManager['buffAdd']);if(_0x49fe68[_0x45f3a7(0xc09)])this[_0x45f3a7(0xbc2)](_0x379d3c,_0x1d752d[_0x45f3a7(0x2a6)],TextManager[_0x45f3a7(0x26c)]);if(_0x49fe68[_0x45f3a7(0x5ac)])this[_0x45f3a7(0xbc2)](_0x379d3c,_0x1d752d[_0x45f3a7(0x8b6)],TextManager[_0x45f3a7(0x81c)]);},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0xbc2)]=function(_0x11fbc5,_0x18b90e,_0x5020a5){const _0x54cb0e=_0x29c7b3;for(const _0x249e7a of _0x18b90e){const _0x2d8614=_0x5020a5[_0x54cb0e(0x77d)](_0x11fbc5['name'](),TextManager[_0x54cb0e(0x8fa)](_0x249e7a));this['push']('popBaseLine'),this[_0x54cb0e(0x13a)](_0x54cb0e(0x85b)),this['push'](_0x54cb0e(0x289),_0x2d8614),this[_0x54cb0e(0x13a)](_0x54cb0e(0x60f));}},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x53d)]=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x917)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x917)]=function(){const _0x288e5f=_0x29c7b3;VisuMZ['BattleCore'][_0x288e5f(0x53d)]['call'](this),this[_0x288e5f(0x931)]();},VisuMZ[_0x29c7b3(0x2e2)]['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x85b)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x85b)]=function(){const _0x1cfe83=_0x29c7b3;VisuMZ[_0x1cfe83(0x2e2)][_0x1cfe83(0x47d)]['call'](this),this[_0x1cfe83(0x931)]();},VisuMZ[_0x29c7b3(0x2e2)]['Window_BattleLog_popBaseLine']=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x5fd)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x5fd)]=function(){const _0x666abc=_0x29c7b3;VisuMZ[_0x666abc(0x2e2)][_0x666abc(0x943)][_0x666abc(0x8d6)](this),this['processRefresh'](),this[_0x666abc(0x931)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x3be)]=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x982)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x982)]=function(_0x18753d){const _0x502d1d=_0x29c7b3;VisuMZ[_0x502d1d(0x2e2)][_0x502d1d(0x3be)]['call'](this,_0x18753d),this['callNextMethod']();},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x7c0)]=function(){const _0xdb44ad=_0x29c7b3;let _0x305350=0x0;this[_0xdb44ad(0x179)][_0xdb44ad(0xba7)]>0x0&&(_0x305350=this[_0xdb44ad(0x179)][this[_0xdb44ad(0x179)][_0xdb44ad(0xba7)]-0x1]),this[_0xdb44ad(0x3d3)][_0xdb44ad(0xba7)]>_0x305350?this[_0xdb44ad(0x60f)]():this[_0xdb44ad(0x931)]();},VisuMZ[_0x29c7b3(0x2e2)]['Window_BattleLog_performActionStart']=Window_BattleLog['prototype'][_0x29c7b3(0xa85)],Window_BattleLog['prototype'][_0x29c7b3(0xa85)]=function(_0x2f7b80,_0x37ef20){const _0x29c6ca=_0x29c7b3;VisuMZ[_0x29c6ca(0x2e2)][_0x29c6ca(0xabb)][_0x29c6ca(0x8d6)](this,_0x2f7b80,_0x37ef20),this[_0x29c6ca(0x931)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x208)]=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x6bf)],Window_BattleLog['prototype'][_0x29c7b3(0x6bf)]=function(_0x235c8e,_0x4d5419){const _0x38f9cb=_0x29c7b3;VisuMZ['BattleCore']['Window_BattleLog_performAction'][_0x38f9cb(0x8d6)](this,_0x235c8e,_0x4d5419),this[_0x38f9cb(0x931)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x716)]=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0xc21)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0xc21)]=function(_0x53a9c4){const _0x906fd9=_0x29c7b3;VisuMZ['BattleCore'][_0x906fd9(0x716)][_0x906fd9(0x8d6)](this,_0x53a9c4);for(const _0x1111cb of BattleManager[_0x906fd9(0xaf1)]()){if(!_0x1111cb)continue;if(_0x1111cb[_0x906fd9(0x7cd)]())continue;_0x1111cb[_0x906fd9(0x336)]();}this[_0x906fd9(0x931)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x81f)]=Window_BattleLog['prototype'][_0x29c7b3(0x83b)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x83b)]=function(_0x44df0a){const _0x46b8d8=_0x29c7b3;VisuMZ[_0x46b8d8(0x2e2)][_0x46b8d8(0x81f)]['call'](this,_0x44df0a),this['callNextMethod']();},VisuMZ['BattleCore'][_0x29c7b3(0xb76)]=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x12f)],Window_BattleLog[_0x29c7b3(0xc03)]['performMiss']=function(_0x5e1bba){const _0x28c303=_0x29c7b3;VisuMZ[_0x28c303(0x2e2)][_0x28c303(0xb76)][_0x28c303(0x8d6)](this,_0x5e1bba),this[_0x28c303(0x931)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x2ba)]=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x2f2)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x2f2)]=function(_0x525374){const _0x54daab=_0x29c7b3;VisuMZ[_0x54daab(0x2e2)][_0x54daab(0x2ba)][_0x54daab(0x8d6)](this,_0x525374),this[_0x54daab(0x931)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x5b6)]=Window_BattleLog['prototype'][_0x29c7b3(0x53e)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x53e)]=function(_0x4c932a){const _0x1dc29d=_0x29c7b3;VisuMZ[_0x1dc29d(0x2e2)]['Window_BattleLog_performEvasion'][_0x1dc29d(0x8d6)](this,_0x4c932a),this['callNextMethod']();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x864)]=Window_BattleLog['prototype'][_0x29c7b3(0x6e2)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x6e2)]=function(_0x13346){const _0x2eb853=_0x29c7b3;VisuMZ[_0x2eb853(0x2e2)]['Window_BattleLog_performMagicEvasion'][_0x2eb853(0x8d6)](this,_0x13346),this[_0x2eb853(0x931)]();},VisuMZ['BattleCore']['Window_BattleLog_performCounter']=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x633)],Window_BattleLog['prototype'][_0x29c7b3(0x633)]=function(_0xd9e954){const _0x38f9f1=_0x29c7b3;VisuMZ[_0x38f9f1(0x2e2)]['Window_BattleLog_performCounter'][_0x38f9f1(0x8d6)](this,_0xd9e954),this['callNextMethod']();},VisuMZ['BattleCore'][_0x29c7b3(0x567)]=Window_BattleLog['prototype'][_0x29c7b3(0x63e)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x63e)]=function(_0x47a499){const _0x2efe3c=_0x29c7b3;VisuMZ[_0x2efe3c(0x2e2)][_0x2efe3c(0x567)][_0x2efe3c(0x8d6)](this,_0x47a499),this[_0x2efe3c(0x931)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x8b9)]=Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x944)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x944)]=function(_0x4627a4,_0x373b94){const _0x5b7d2f=_0x29c7b3;VisuMZ['BattleCore'][_0x5b7d2f(0x8b9)][_0x5b7d2f(0x8d6)](this,_0x4627a4,_0x373b94),this[_0x5b7d2f(0x931)]();},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xb2d)]=Window_BattleLog['prototype'][_0x29c7b3(0xa13)],Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0xa13)]=function(_0x1e37a7){const _0x33871d=_0x29c7b3;VisuMZ[_0x33871d(0x2e2)][_0x33871d(0xb2d)][_0x33871d(0x8d6)](this,_0x1e37a7),this[_0x33871d(0x931)]();},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x6d6)]=function(_0x3f6339,_0x2814f5){const _0x3562af=_0x29c7b3;_0x3f6339[_0x3562af(0x6d6)](_0x2814f5),this['callNextMethod']();},Window_BattleLog['prototype'][_0x29c7b3(0x751)]=function(_0x2a8daf,_0x3d520e){const _0x3f2932=_0x29c7b3,_0x4bdb5a=_0x2a8daf['attackAnimationId1']();_0x4bdb5a<=0x0?SoundManager[_0x3f2932(0x565)]():this['showNormalAnimation'](_0x3d520e,_0x4bdb5a);},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x901)]=function(_0x24225c,_0x322183,_0x106d0a){const _0x4c420c=_0x29c7b3,_0x3ebce5=[_0x24225c][_0x4c420c(0xaaf)](_0x322183);for(const _0x4a3c3e of _0x3ebce5){if(!_0x4a3c3e)continue;_0x4a3c3e[_0x4c420c(0xbb9)](_0x106d0a);}this[_0x4c420c(0x931)]();},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x2d7)]=function(_0xe3ec6d){const _0xcbd9ed=_0x29c7b3;this[_0xcbd9ed(0xa58)]=_0xe3ec6d;},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x635)]=function(_0x5b25ee,_0x4e8ac9){for(const _0x862a87 of _0x5b25ee){if(!_0x862a87)continue;_0x862a87['requestMotion'](_0x4e8ac9);}this['callNextMethod']();},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x8d1)]=function(_0x399e59,_0x4aff87,_0xeb6ea2,_0x2972bc,_0x3f9499,_0x29b2e2){const _0x5db44a=_0x29c7b3;_0x399e59[_0x5db44a(0x43c)](_0x4aff87,_0xeb6ea2,_0x2972bc,_0x3f9499,_0x29b2e2,-0x1),this[_0x5db44a(0x931)]();},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x35f)]=function(_0x2d4859,_0x201325,_0x36efc5,_0x3fcc5b,_0x3b6856,_0x2375bd,_0x397c77){const _0x4cb358=_0x29c7b3,_0x5667fa=Math[_0x4cb358(0xbce)](..._0x201325['map'](_0x29d6d4=>_0x29d6d4[_0x4cb358(0xa65)]()[_0x4cb358(0xa3a)]-_0x29d6d4[_0x4cb358(0xa65)]()[_0x4cb358(0xa7b)]()/0x2)),_0x365e06=Math[_0x4cb358(0xbaf)](..._0x201325[_0x4cb358(0x8ea)](_0xfe3b5d=>_0xfe3b5d[_0x4cb358(0xa65)]()['_baseX']+_0xfe3b5d[_0x4cb358(0xa65)]()[_0x4cb358(0xa7b)]()/0x2)),_0x5d1444=Math['min'](..._0x201325[_0x4cb358(0x8ea)](_0x40a43a=>_0x40a43a[_0x4cb358(0xa65)]()[_0x4cb358(0x488)]-_0x40a43a[_0x4cb358(0xa65)]()[_0x4cb358(0xc2e)]())),_0x342db0=Math[_0x4cb358(0xbaf)](..._0x201325[_0x4cb358(0x8ea)](_0x32ac5b=>_0x32ac5b['battler']()['_baseY'])),_0x4630aa=_0x201325[_0x4cb358(0x55e)](_0x5ba957=>_0x5ba957[_0x4cb358(0xa27)]())['length'],_0x197e52=_0x201325['filter'](_0x1372c7=>_0x1372c7[_0x4cb358(0xb3d)]())[_0x4cb358(0xba7)];let _0x2d4f55=0x0,_0x55c866=0x0;if(_0x36efc5['match'](/front/i))_0x2d4f55=_0x4630aa>=_0x197e52?_0x5667fa:_0x365e06;else{if(_0x36efc5[_0x4cb358(0x290)](/middle/i))_0x2d4f55=(_0x5667fa+_0x365e06)/0x2,_0x397c77=-0x1;else _0x36efc5['match'](/back/i)&&(_0x2d4f55=_0x4630aa>=_0x197e52?_0x365e06:_0x5667fa);}if(_0x36efc5[_0x4cb358(0x290)](/head/i))_0x55c866=_0x5d1444;else{if(_0x36efc5['match'](/center/i)){_0x55c866=(_0x5d1444+_0x342db0)/0x2;if(_0x2d4859[_0x4cb358(0xa65)]())_0x55c866+=_0x2d4859[_0x4cb358(0xa65)]()[_0x4cb358(0x719)]/0x2;}else _0x36efc5[_0x4cb358(0x290)](/base/i)&&(_0x55c866=_0x342db0);}_0x2d4859[_0x4cb358(0x43c)](_0x2d4f55,_0x55c866,_0x3fcc5b,_0x3b6856,_0x2375bd,_0x397c77),this[_0x4cb358(0x931)]();},Window_BattleLog[_0x29c7b3(0xc03)][_0x29c7b3(0x8d0)]=function(_0x1fae68,_0xfd73f5,_0x4799e4){const _0x51c272=_0x29c7b3;for(const _0x205cf8 of _0x1fae68){if(!_0x205cf8)continue;_0x205cf8[_0x51c272(0x4a2)](_0xfd73f5,_0x4799e4);}this[_0x51c272(0x931)]();};function Window_BattleMultiTarget(){const _0x16dcec=_0x29c7b3;this[_0x16dcec(0x1a0)](...arguments);}Window_BattleMultiTarget['prototype']=Object[_0x29c7b3(0x57e)](Window_Command[_0x29c7b3(0xc03)]),Window_BattleMultiTarget[_0x29c7b3(0xc03)]['constructor']=Window_BattleMultiTarget,VisuMZ[_0x29c7b3(0x2e2)]['Settings'][_0x29c7b3(0x710)]=VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x710)]||{},Window_BattleMultiTarget['WIDTH']=VisuMZ['BattleCore'][_0x29c7b3(0xc14)]['MultiTarget'][_0x29c7b3(0x6f0)]??0x118,Window_BattleMultiTarget[_0x29c7b3(0xb52)]=VisuMZ['BattleCore'][_0x29c7b3(0xc14)][_0x29c7b3(0x710)][_0x29c7b3(0x9b8)]??0x2,Window_BattleMultiTarget[_0x29c7b3(0x641)]=VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x710)]['ShowButton']??!![],Window_BattleMultiTarget[_0x29c7b3(0x84e)]=VisuMZ['BattleCore'][_0x29c7b3(0xc14)][_0x29c7b3(0x710)]['AllActorsText']??_0x29c7b3(0x15f),Window_BattleMultiTarget[_0x29c7b3(0x177)]=VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x710)][_0x29c7b3(0x6a6)]??'All\x20Enemies',Window_BattleMultiTarget[_0x29c7b3(0x5ca)]=VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x710)][_0x29c7b3(0x1ba)]??0x0,Window_BattleMultiTarget['ACTOR_OFFSET_Y']=VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)]['MultiTarget'][_0x29c7b3(0x538)]??0x0,Window_BattleMultiTarget[_0x29c7b3(0xb2c)]=VisuMZ[_0x29c7b3(0x2e2)]['Settings'][_0x29c7b3(0x710)][_0x29c7b3(0x618)]??0x0,Window_BattleMultiTarget[_0x29c7b3(0x84f)]=VisuMZ[_0x29c7b3(0x2e2)]['Settings'][_0x29c7b3(0x710)][_0x29c7b3(0x98f)]??0x0,Window_BattleMultiTarget['prototype'][_0x29c7b3(0x1a0)]=function(_0x54d70b,_0x5c45a8){const _0xf9e54f=_0x29c7b3;this[_0xf9e54f(0x908)]=_0x5c45a8,Window_Command[_0xf9e54f(0xc03)][_0xf9e54f(0x1a0)][_0xf9e54f(0x8d6)](this,_0x54d70b),this[_0xf9e54f(0x64d)](Window_BattleMultiTarget['BG_TYPE']),this[_0xf9e54f(0x30e)](),this['hide'](),this[_0xf9e54f(0x740)]();},Window_BattleMultiTarget['prototype']['forActor']=function(){return this['_forActor'];},Window_BattleMultiTarget[_0x29c7b3(0xc03)][_0x29c7b3(0x206)]=function(){const _0x4fa19b=_0x29c7b3;let _0x5d804d=this[_0x4fa19b(0x4f9)]()?Window_BattleMultiTarget[_0x4fa19b(0x84e)]:Window_BattleMultiTarget[_0x4fa19b(0x177)];if(Imported[_0x4fa19b(0x50c)]&&Window_BattleMultiTarget[_0x4fa19b(0x641)]){this[_0x4fa19b(0x156)]=this['forActor']()?'pagedown':_0x4fa19b(0x925),this[_0x4fa19b(0x58a)]=TextManager[_0x4fa19b(0x1a9)](this[_0x4fa19b(0x156)]);const _0x23c352=VisuMZ['CoreEngine'][_0x4fa19b(0xc14)][_0x4fa19b(0xb22)][_0x4fa19b(0x8f5)];_0x5d804d=_0x23c352[_0x4fa19b(0x77d)](this[_0x4fa19b(0x58a)],_0x5d804d);}this[_0x4fa19b(0xb4a)](_0x5d804d,_0x4fa19b(0x194));},Window_BattleMultiTarget[_0x29c7b3(0xc03)][_0x29c7b3(0x71d)]=function(_0x11f48a){const _0x1f133a=_0x29c7b3,_0x3030ab=this[_0x1f133a(0x657)](_0x11f48a);this[_0x1f133a(0x654)](),this[_0x1f133a(0x3ea)](this[_0x1f133a(0xbc8)](_0x11f48a));const _0x3c689d=this[_0x1f133a(0x4a9)](_0x11f48a),_0x90c440=this[_0x1f133a(0x33f)](_0x3c689d)[_0x1f133a(0x580)],_0x1c3d8f=_0x3030ab['x']+Math[_0x1f133a(0x1ec)]((_0x3030ab['width']-_0x90c440)/0x2);this[_0x1f133a(0x914)](_0x3c689d,_0x1c3d8f,_0x3030ab['y'],_0x3030ab[_0x1f133a(0x580)]);},Window_BattleMultiTarget[_0x29c7b3(0xc03)][_0x29c7b3(0x592)]=function(){const _0x35aefe=_0x29c7b3;Window_Command[_0x35aefe(0xc03)][_0x35aefe(0x592)][_0x35aefe(0x8d6)](this),this[_0x35aefe(0x346)](),this['updateKeyboardKeys']();},Window_BattleMultiTarget[_0x29c7b3(0xc03)][_0x29c7b3(0x346)]=function(){this['visible']=this['visibilityState']();},Window_BattleMultiTarget[_0x29c7b3(0xc03)][_0x29c7b3(0x411)]=function(){const _0x3e4a73=_0x29c7b3,_0xa7aec7=BattleManager['inputtingAction'](),_0x569fed=_0xa7aec7&&_0xa7aec7[_0x3e4a73(0x1b3)]();if(!_0x569fed)return![];const _0x3689aa=SceneManager['_scene'];if(this[_0x3e4a73(0x4f9)]()){if(_0x3689aa[_0x3e4a73(0x389)][_0x3e4a73(0x33d)]&&_0x3689aa[_0x3e4a73(0x389)][_0x3e4a73(0xc02)][_0x3e4a73(0x376)])return!![];if(_0x3689aa[_0x3e4a73(0x174)][_0x3e4a73(0x33d)]&&_0x3689aa[_0x3e4a73(0x174)][_0x3e4a73(0xc02)]['pagedown'])return!![];}else{if(_0x3689aa['_enemyWindow']['active']&&_0x3689aa[_0x3e4a73(0x174)]['_handlers']['pageup'])return!![];}return![];},Window_BattleMultiTarget[_0x29c7b3(0xc03)][_0x29c7b3(0x2ee)]=function(){const _0x41aa16=_0x29c7b3;if(!Imported[_0x41aa16(0x50c)])return;this[_0x41aa16(0x58a)]!==TextManager[_0x41aa16(0x1a9)](this['_buttonKey'])&&this['refresh']();},Window_BattleMultiTarget[_0x29c7b3(0xc03)][_0x29c7b3(0x46a)]=function(){const _0x6136d2=_0x29c7b3;if(this[_0x6136d2(0xb81)]&&TouchInput[_0x6136d2(0x77c)]()){const _0x2c5f26=this[_0x6136d2(0x335)]();if(_0x2c5f26>=0x0){const _0x5d4bdc=this[_0x6136d2(0x4f9)]()?_0x6136d2(0x376):'pageup';Input[_0x6136d2(0xc0f)](_0x5d4bdc);}}};function _0x16cb(_0x4042cc,_0x33fd56){const _0x19fb07=_0x19fb();return _0x16cb=function(_0x16cb02,_0x394b56){_0x16cb02=_0x16cb02-0xfd;let _0x4e9f31=_0x19fb07[_0x16cb02];return _0x4e9f31;},_0x16cb(_0x4042cc,_0x33fd56);}function Window_DamageCounter(){const _0x20f209=_0x29c7b3;this[_0x20f209(0x1a0)](...arguments);}Window_DamageCounter[_0x29c7b3(0xc03)]=Object[_0x29c7b3(0x57e)](Window_Base['prototype']),Window_DamageCounter[_0x29c7b3(0xc03)]['constructor']=Window_DamageCounter,Window_DamageCounter['SETTINGS']={'enabled':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0xc0b)]['Enable']??!![],'customFontFace':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)]['ComboWindow'][_0x29c7b3(0xade)]??'','textAlign':VisuMZ[_0x29c7b3(0x2e2)]['Settings'][_0x29c7b3(0xc0b)][_0x29c7b3(0x462)]??_0x29c7b3(0x608),'hitsDmgFmt':VisuMZ['BattleCore']['Settings'][_0x29c7b3(0xc0b)][_0x29c7b3(0xfd)]??_0x29c7b3(0xaa4),'hitsHealFmt':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0xc0b)][_0x29c7b3(0xa1d)]??_0x29c7b3(0x5ce),'totalDmgFmt':VisuMZ['BattleCore'][_0x29c7b3(0xc14)]['ComboWindow'][_0x29c7b3(0x2ec)]??_0x29c7b3(0x8b0),'totalHealFmt':VisuMZ['BattleCore'][_0x29c7b3(0xc14)]['ComboWindow']['totalHealFmt']??_0x29c7b3(0x182),'fadeShiftX':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0xc0b)]['fadeShiftX']??-0x2,'fadeShiftY':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0xc0b)][_0x29c7b3(0x70b)]??0x0,'positionOffsetX':VisuMZ['BattleCore'][_0x29c7b3(0xc14)]['ComboWindow'][_0x29c7b3(0x67b)]??0x0,'positionOffsetY':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)]['ComboWindow'][_0x29c7b3(0xb75)]??0x0,'updateDuration':VisuMZ['BattleCore'][_0x29c7b3(0xc14)][_0x29c7b3(0xc0b)][_0x29c7b3(0x95d)]??0x14,'minimumStayDuration':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)]['ComboWindow'][_0x29c7b3(0x8b2)]??0x28,'minimumHits':VisuMZ[_0x29c7b3(0x2e2)]['Settings']['ComboWindow'][_0x29c7b3(0x9b9)]??0x1,'opacitySpeed':VisuMZ['BattleCore']['Settings'][_0x29c7b3(0xc0b)][_0x29c7b3(0x848)]??0x10},Window_DamageCounter['prototype'][_0x29c7b3(0x1a0)]=function(_0x1a514e){const _0x39eae4=_0x29c7b3;this[_0x39eae4(0x4ae)]=0x0,Window_Base[_0x39eae4(0xc03)]['initialize']['call'](this,_0x1a514e),this[_0x39eae4(0xa03)]=_0x1a514e['x'],this[_0x39eae4(0xb99)]=_0x1a514e['y'],this[_0x39eae4(0x689)](),this['setBackgroundType'](0x2);},Window_DamageCounter[_0x29c7b3(0xc03)][_0x29c7b3(0x689)]=function(){const _0x35cf28=_0x29c7b3;this[_0x35cf28(0x514)]=0x0,this[_0x35cf28(0xa60)]=0x0,this[_0x35cf28(0x566)]=0x0,this[_0x35cf28(0x53b)]=0x0,this[_0x35cf28(0x57f)]=0x0;},Window_DamageCounter['prototype'][_0x29c7b3(0x738)]=function(){const _0x5b199b=_0x29c7b3;Window_Base[_0x5b199b(0xc03)]['resetFontSettings'][_0x5b199b(0x8d6)](this);const _0x2e9d88=Window_DamageCounter[_0x5b199b(0x234)];_0x2e9d88[_0x5b199b(0x165)]?this[_0x5b199b(0x6b6)][_0x5b199b(0x6c2)]=_0x2e9d88[_0x5b199b(0x165)]:this[_0x5b199b(0x6b6)][_0x5b199b(0x6c2)]=$gameSystem[_0x5b199b(0xbcd)]();};var $comboWindowReset=function(){const _0x3175e0=_0x29c7b3;if(!SceneManager[_0x3175e0(0x429)]())return;const _0x2ac4af=SceneManager['_scene'][_0x3175e0(0x68e)];if(_0x2ac4af)_0x2ac4af[_0x3175e0(0x689)]();};Window_DamageCounter[_0x29c7b3(0xc03)]['increaseHits']=function(_0x18fcbd){const _0xe267d0=_0x29c7b3;this[_0xe267d0(0x53b)]+=Math['round'](_0x18fcbd);const _0xc2344a=Window_DamageCounter['SETTINGS'];this['_updateDuration']=_0xc2344a[_0xe267d0(0x95d)],this[_0xe267d0(0x53b)]>=_0xc2344a[_0xe267d0(0x9b9)]&&(this['_visibleDuration']=_0xc2344a[_0xe267d0(0x8b2)]);};var $comboWindowIncreaseHits=function(_0x58df88){const _0x41a974=_0x29c7b3;if(!SceneManager['isSceneBattle']())return;const _0x3a8dc6=SceneManager[_0x41a974(0x364)][_0x41a974(0x68e)];if(_0x3a8dc6)_0x3a8dc6[_0x41a974(0xac8)](_0x58df88);};Window_DamageCounter['prototype'][_0x29c7b3(0xae2)]=function(_0x45fa1c){const _0x181538=_0x29c7b3;this['_targetDamage']+=Math[_0x181538(0x50f)](_0x45fa1c);const _0x534488=Window_DamageCounter[_0x181538(0x234)];this[_0x181538(0x514)]=_0x534488[_0x181538(0x95d)],this[_0x181538(0x53b)]>=_0x534488[_0x181538(0x9b9)]&&(this[_0x181538(0x4ae)]=_0x534488[_0x181538(0x8b2)]);};var $comboWindowIncreaseDamage=function(_0x2ef9d2){const _0x2c2f91=_0x29c7b3;if(!SceneManager[_0x2c2f91(0x429)]())return;const _0x1ead03=SceneManager[_0x2c2f91(0x364)]['_damageCounterWindow'];if(_0x1ead03)_0x1ead03[_0x2c2f91(0xae2)](_0x2ef9d2);},$comboWindowIncreaseHealing=function(_0x3bbfef){const _0x136ed4=_0x29c7b3;if(!SceneManager[_0x136ed4(0x429)]())return;const _0x9dd59f=SceneManager[_0x136ed4(0x364)][_0x136ed4(0x68e)];if(_0x9dd59f)_0x9dd59f[_0x136ed4(0xae2)](-_0x3bbfef);};VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x1c3)]=Scene_Battle['prototype'][_0x29c7b3(0x3c6)],Scene_Battle['prototype']['createAllWindows']=function(){const _0x123feb=_0x29c7b3;this[_0x123feb(0x54e)](),VisuMZ[_0x123feb(0x2e2)][_0x123feb(0x1c3)][_0x123feb(0x8d6)](this);},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x54e)]=function(){const _0x24e09d=_0x29c7b3;if(!Window_DamageCounter[_0x24e09d(0x234)][_0x24e09d(0x800)])return;const _0x47bd8b=this['damageCounterWindowRect'](),_0x4d7436=new Window_DamageCounter(_0x47bd8b);this[_0x24e09d(0x822)](_0x4d7436),this[_0x24e09d(0x68e)]=_0x4d7436;},Scene_Battle['prototype'][_0x29c7b3(0x4d6)]=function(){const _0x26826b=_0x29c7b3;if(VisuMZ[_0x26826b(0x2e2)][_0x26826b(0xc14)]['ComboWindow'][_0x26826b(0x413)])return VisuMZ[_0x26826b(0x2e2)][_0x26826b(0xc14)][_0x26826b(0xc0b)]['ComboWindow_RectJS'][_0x26826b(0x8d6)](this);const _0x55f046=Math[_0x26826b(0xc1a)](Graphics[_0x26826b(0x580)]/0x4),_0x13c86b=this[_0x26826b(0x7cb)](0x2,!![]),_0x41eb0f=0x0+this['comboWindowOffsetX'](),_0x1aa6a4=Math[_0x26826b(0x50f)](Graphics['boxHeight']*0x1/0x3)+this[_0x26826b(0x330)]();return new Rectangle(_0x41eb0f,_0x1aa6a4,_0x55f046,_0x13c86b);},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x831)]=function(){return Window_DamageCounter['SETTINGS']['positionOffsetX'];},Scene_Battle[_0x29c7b3(0xc03)][_0x29c7b3(0x330)]=function(){const _0x32fb4a=_0x29c7b3;return Window_DamageCounter['SETTINGS'][_0x32fb4a(0x39f)];},Window_DamageCounter[_0x29c7b3(0xc03)][_0x29c7b3(0x592)]=function(){const _0xfd47bd=_0x29c7b3;Window_Base[_0xfd47bd(0xc03)][_0xfd47bd(0x592)][_0xfd47bd(0x8d6)](this),this[_0xfd47bd(0x244)](),this[_0xfd47bd(0x2bc)]();},Window_DamageCounter[_0x29c7b3(0xc03)][_0x29c7b3(0x244)]=function(){const _0x1b1d5c=_0x29c7b3;if(this[_0x1b1d5c(0x514)]<=0x0)return;const _0x1a0114=this[_0x1b1d5c(0x514)];this[_0x1b1d5c(0xa60)]=this[_0x1b1d5c(0x53b)],this[_0x1b1d5c(0x566)]=(this[_0x1b1d5c(0x566)]*(_0x1a0114-0x1)+this[_0x1b1d5c(0x57f)])/_0x1a0114,this[_0x1b1d5c(0x514)]--,this[_0x1b1d5c(0x514)]<=0x0&&(this['_totalHits']=this['_targetHits'],this[_0x1b1d5c(0x566)]=this['_targetDamage']),this['refresh']();},Window_DamageCounter[_0x29c7b3(0xc03)][_0x29c7b3(0x2bc)]=function(){const _0x1f62a3=_0x29c7b3,_0xaf05ee=Window_DamageCounter['SETTINGS'],_0x2ca204=this[_0x1f62a3(0x411)](),_0x3f83d2=_0xaf05ee['opacitySpeed']||0x1;if(_0x2ca204&&this[_0x1f62a3(0x4c9)]<0xff)this['contentsOpacity']+=_0x3f83d2;else!_0x2ca204&&this[_0x1f62a3(0x4c9)]>0x0&&(this[_0x1f62a3(0x4c9)]-=_0x3f83d2,this['x']+=_0xaf05ee['fadeShiftX']||0x0,this['y']+=_0xaf05ee[_0x1f62a3(0x70b)]||0x0);},Window_DamageCounter[_0x29c7b3(0xc03)][_0x29c7b3(0x411)]=function(){const _0x3b90ce=_0x29c7b3,_0xc96fba=Window_DamageCounter[_0x3b90ce(0x234)];if(this[_0x3b90ce(0x53b)]>=_0xc96fba[_0x3b90ce(0x9b9)])return!![];if(this[_0x3b90ce(0x4ae)]-->0x0)return!![];return![];},VisuMZ[_0x29c7b3(0x2e2)]['Game_Action_executeHpDamage_ComboWindow']=Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x60e)],Game_Action[_0x29c7b3(0xc03)][_0x29c7b3(0x60e)]=function(_0x328f77,_0xe5bc25){const _0x165a8a=_0x29c7b3;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0xe5bc25),VisuMZ[_0x165a8a(0x2e2)][_0x165a8a(0x573)]['call'](this,_0x328f77,_0xe5bc25);},VisuMZ['BattleCore'][_0x29c7b3(0x368)]=BattleManager[_0x29c7b3(0xa0a)],BattleManager[_0x29c7b3(0xa0a)]=function(){const _0x1b0f04=_0x29c7b3;$comboWindowReset(),VisuMZ[_0x1b0f04(0x2e2)]['BattleManager_endAction_ComboWindow'][_0x1b0f04(0x8d6)](this);},Window_DamageCounter[_0x29c7b3(0xc03)]['refresh']=function(){const _0x479176=_0x29c7b3;this[_0x479176(0x6b6)]['clear'](),this[_0x479176(0x9f6)](),this['x']=this[_0x479176(0xa03)],this['y']=this['_targetY'];},Window_DamageCounter['prototype'][_0x29c7b3(0x3ba)]=function(){const _0x3be194=_0x29c7b3,_0x1cd971=Window_DamageCounter[_0x3be194(0x234)];return _0x1cd971['textAlign']||'left';},Window_DamageCounter[_0x29c7b3(0xc03)][_0x29c7b3(0x805)]=function(){const _0x4dbb48=_0x29c7b3,_0x146511=Window_DamageCounter[_0x4dbb48(0x234)];let _0x435c16=this[_0x4dbb48(0x566)]>=0x0?_0x146511[_0x4dbb48(0xfd)]:_0x146511[_0x4dbb48(0xa1d)];return _0x435c16[_0x4dbb48(0x77d)](Math['abs'](Math['ceil'](this['_totalHits'])));},Window_DamageCounter[_0x29c7b3(0xc03)][_0x29c7b3(0x965)]=function(){const _0x494526=_0x29c7b3,_0x30ff4d=Window_DamageCounter[_0x494526(0x234)];let _0x64677c=this['_totalDamage']>=0x0?_0x30ff4d[_0x494526(0x2ec)]:_0x30ff4d[_0x494526(0x3e2)];return _0x64677c[_0x494526(0x77d)](Math[_0x494526(0x355)](Math[_0x494526(0x50f)](this['_totalDamage'])));},Window_DamageCounter['prototype'][_0x29c7b3(0x9f6)]=function(){const _0x3fb757=_0x29c7b3;if(VisuMZ[_0x3fb757(0x2e2)]['Settings'][_0x3fb757(0xc0b)]['ComboWindow_DrawJS'])return VisuMZ[_0x3fb757(0x2e2)][_0x3fb757(0xc14)]['ComboWindow']['ComboWindow_DrawJS']['call'](this);let _0x1de23b=0x0,_0x3c4a0a=0x0;const _0x2a806b=this[_0x3fb757(0x805)](),_0x3012e3=this[_0x3fb757(0x33f)](_0x2a806b);if(this[_0x3fb757(0x3ba)]()===_0x3fb757(0xc23))_0x1de23b=this[_0x3fb757(0x6aa)]-this['itemPadding']()-_0x3012e3[_0x3fb757(0x580)];else this[_0x3fb757(0x3ba)]()==='center'?_0x1de23b=Math[_0x3fb757(0x1ec)]((this['innerWidth']-_0x3012e3[_0x3fb757(0x580)])/0x2):_0x1de23b=this[_0x3fb757(0x5cd)]();this[_0x3fb757(0x914)](_0x2a806b,_0x1de23b,_0x3c4a0a),_0x3c4a0a+=Math[_0x3fb757(0xc1a)](this[_0x3fb757(0x956)]()*0x2/0x3);const _0x2b4858=this[_0x3fb757(0x965)](),_0x19405b=this['textSizeEx'](_0x2b4858);if(this['textAlignment']()===_0x3fb757(0xc23))_0x1de23b=this['innerWidth']-this[_0x3fb757(0x5cd)]()-_0x19405b['width'];else this[_0x3fb757(0x3ba)]()==='center'?_0x1de23b=Math[_0x3fb757(0x1ec)]((this[_0x3fb757(0x6aa)]-_0x19405b[_0x3fb757(0x580)])/0x2):_0x1de23b=this[_0x3fb757(0x5cd)]();this['drawTextEx'](_0x2b4858,_0x1de23b,_0x3c4a0a);};function Window_InBattleStatus(){const _0x449f98=_0x29c7b3;this[_0x449f98(0x1a0)](...arguments);}Window_InBattleStatus[_0x29c7b3(0xc03)]=Object[_0x29c7b3(0x57e)](Window_StatusBase[_0x29c7b3(0xc03)]),Window_InBattleStatus['prototype'][_0x29c7b3(0xba3)]=Window_InBattleStatus,Window_InBattleStatus[_0x29c7b3(0x234)]={'bgType':VisuMZ['BattleCore'][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)][_0x29c7b3(0xa8e)]??0x0,'statusGraphic':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)]['StatusGraphic']??_0x29c7b3(0x64c),'statusHelpDesc':VisuMZ[_0x29c7b3(0x2e2)]['Settings'][_0x29c7b3(0x63c)]['HelpStatus']??_0x29c7b3(0xa21),'pageButtons':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)][_0x29c7b3(0x3a0)]??!![],'pageButtonPosition':VisuMZ[_0x29c7b3(0x2e2)]['Settings'][_0x29c7b3(0x63c)][_0x29c7b3(0x52e)]??_0x29c7b3(0x608),'pageOffsetX':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)][_0x29c7b3(0x247)]??0x0,'pageOffsetY':VisuMZ['BattleCore'][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)][_0x29c7b3(0x6d4)]??0x0,'buffValueFmt':VisuMZ[_0x29c7b3(0x2e2)]['Settings'][_0x29c7b3(0x63c)]['buffValueFmt']??'▲%1','debuffValueFmt':VisuMZ[_0x29c7b3(0x2e2)]['Settings']['InBattleStatus'][_0x29c7b3(0x9e7)]??_0x29c7b3(0x4b2),'enemyStatus':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)][_0x29c7b3(0xab8)]??!![],'enemyShowLevel':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)]['InBattleStatus']['enemyShowLevel']??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)]['InBattleStatus'][_0x29c7b3(0x291)]??_0x29c7b3(0x83a),'enemyShowParametersAlways':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)][_0x29c7b3(0x84b)]??![],'enemyShowParametersIfBattleTest':VisuMZ['BattleCore']['Settings'][_0x29c7b3(0x63c)]['enemyShowParametersIfBattleTest']??!![],'enemyShowParametersIfDefeated':VisuMZ[_0x29c7b3(0x2e2)]['Settings'][_0x29c7b3(0x63c)][_0x29c7b3(0xaf7)]??!![]},Window_InBattleStatus['prototype'][_0x29c7b3(0x1a0)]=function(_0x2c282a){const _0x47c428=_0x29c7b3;Window_StatusBase['prototype'][_0x47c428(0x1a0)][_0x47c428(0x8d6)](this,_0x2c282a),this['setBackgroundType'](Window_InBattleStatus[_0x47c428(0x234)]['bgType']),this['createEnemySprite'](),this[_0x47c428(0x761)](),this[_0x47c428(0x4e5)]();},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0xbdd)]=function(_0x5390fd){const _0x13e0d9=_0x29c7b3;this[_0x13e0d9(0x3e8)]=_0x5390fd,this[_0x13e0d9(0x842)](),this[_0x13e0d9(0x766)]&&this['_statesWindow'][_0x13e0d9(0xbdd)](_0x5390fd);},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x497)]=function(){const _0x599a41=_0x29c7b3;Window_StatusBase['prototype'][_0x599a41(0x497)][_0x599a41(0x8d6)](this);if(this[_0x599a41(0x766)])this[_0x599a41(0x766)][_0x599a41(0x497)]();this[_0x599a41(0x7ca)](),Imported[_0x599a41(0xbd8)]&&SceneManager[_0x599a41(0xbcb)](null);},Window_InBattleStatus['prototype'][_0x29c7b3(0x770)]=function(){const _0x3bfb44=_0x29c7b3;Window_StatusBase['prototype'][_0x3bfb44(0x770)][_0x3bfb44(0x8d6)](this);if(this[_0x3bfb44(0x766)])this['_statesWindow'][_0x3bfb44(0x770)]();},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x173)]=function(_0x618ad5){const _0x36c5aa=_0x29c7b3;this[_0x36c5aa(0x213)]=_0x618ad5;},Window_InBattleStatus['prototype'][_0x29c7b3(0x308)]=function(){const _0x4429da=_0x29c7b3;return this['_returnWindow']||SceneManager[_0x4429da(0x364)][_0x4429da(0x7f3)];},Window_InBattleStatus['prototype']['loadFaceImages']=function(){const _0x2a5f3e=_0x29c7b3;Window_StatusBase[_0x2a5f3e(0xc03)]['loadFaceImages']['call'](this),this[_0x2a5f3e(0x30c)]();},Window_InBattleStatus[_0x29c7b3(0xc03)]['loadOtherActorImages']=function(){const _0x5e1c50=_0x29c7b3;for(const _0x293fea of $gameParty[_0x5e1c50(0xa35)]()){if(!_0x293fea)continue;_0x293fea[_0x5e1c50(0x796)]()&&ImageManager[_0x5e1c50(0xb4e)](_0x293fea[_0x5e1c50(0x796)]()),_0x293fea[_0x5e1c50(0x84c)]()&&ImageManager[_0x5e1c50(0x235)](_0x293fea[_0x5e1c50(0x84c)]()),Imported[_0x5e1c50(0x358)]&&_0x293fea['getMenuImage']()&&ImageManager[_0x5e1c50(0x832)](_0x293fea[_0x5e1c50(0x6d2)]());}},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x6cb)]=function(){const _0x242606=_0x29c7b3;this[_0x242606(0x6c1)]=new Sprite(),this[_0x242606(0x6c1)][_0x242606(0x3f8)]['x']=0.5,this['_enemySprite']['anchor']['y']=0x1,this[_0x242606(0xa56)](this[_0x242606(0x6c1)]);},Window_InBattleStatus['prototype'][_0x29c7b3(0x761)]=function(){const _0xb95861=_0x29c7b3,_0x53f621=this[_0xb95861(0x212)](),_0x231b1e=new Window_InBattleStatusStates(_0x53f621);this['addChild'](_0x231b1e),_0x231b1e[_0xb95861(0x7ee)](SceneManager[_0xb95861(0x364)][_0xb95861(0xb47)]),this[_0xb95861(0x766)]=_0x231b1e;},Window_InBattleStatus[_0x29c7b3(0xc03)]['statesWindowRect']=function(){const _0x18e264=_0x29c7b3,_0x5da1d3=Window_InBattleStatusStates[_0x18e264(0x234)]['maxWidth'],_0x4b045b=Math[_0x18e264(0xbce)](_0x5da1d3,Math[_0x18e264(0x1ec)](this[_0x18e264(0x580)]/0x2)),_0x3cfd08=Graphics[_0x18e264(0xc0c)]>0x44c?this[_0x18e264(0x719)]:this[_0x18e264(0x956)]()*0x4+this['padding']*0x2,_0x1a8105=this[_0x18e264(0x580)]-_0x4b045b,_0x171caa=this[_0x18e264(0x719)]-_0x3cfd08;return new Rectangle(_0x1a8105,_0x171caa,_0x4b045b,_0x3cfd08);},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x4e5)]=function(){const _0x41b282=_0x29c7b3;if(!ConfigManager[_0x41b282(0x66a)])return;if(!Window_InBattleStatus['SETTINGS'][_0x41b282(0x3a0)])return;this[_0x41b282(0x878)]=new Sprite_Button(_0x41b282(0x925)),this[_0x41b282(0x878)]['x']=this[_0x41b282(0x9ab)]()+Window_InBattleStatus['SETTINGS'][_0x41b282(0x247)],this[_0x41b282(0x878)]['y']=this[_0x41b282(0x61f)]()+Window_InBattleStatus[_0x41b282(0x234)]['pageOffsetY'];const _0xe07c3f=this[_0x41b282(0x878)]['x']+this[_0x41b282(0x878)][_0x41b282(0x580)];this[_0x41b282(0x29f)]=new Sprite_Button(_0x41b282(0x376)),this[_0x41b282(0x29f)]['x']=_0xe07c3f+0x4,this[_0x41b282(0x29f)]['y']=this[_0x41b282(0x878)]['y'],this[_0x41b282(0xa56)](this['_pageupButton']),this[_0x41b282(0xa56)](this[_0x41b282(0x29f)]),this['_pageupButton'][_0x41b282(0x692)](this[_0x41b282(0xaf2)][_0x41b282(0x86e)](this)),this['_pagedownButton'][_0x41b282(0x692)](this['nextActor']['bind'](this));},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x9ab)]=function(){const _0x42b439=_0x29c7b3;if(Graphics[_0x42b439(0xc0c)]>0x44c&&Graphics[_0x42b439(0x132)]>0x2bc){if(Window_InBattleStatus[_0x42b439(0x234)][_0x42b439(0x52e)]==='left'){let _0x5968be=Math['ceil']((-this['x']-0x64)/0x2);if(_0x5968be>=-0x64)_0x5968be=this['padding'];return _0x5968be;}else{const _0x40c3d3=Graphics[_0x42b439(0xc0c)]-this['x']-this[_0x42b439(0x580)];let _0x31f248=Math[_0x42b439(0x1ec)]((_0x40c3d3-0x64)/0x2)+this[_0x42b439(0x580)];return _0x31f248;}}else return this['width']-0x64-this[_0x42b439(0x5bb)]/0x2;},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x61f)]=function(){const _0x452cfa=_0x29c7b3;return Graphics[_0x452cfa(0xc0c)]>0x44c&&Graphics['boxHeight']>0x2bc?this[_0x452cfa(0x719)]-0x30-this[_0x452cfa(0x5bb)]:0x30+this['padding'];},Window_InBattleStatus[_0x29c7b3(0xc03)]['previousActor']=function(){const _0x49118c=_0x29c7b3;let _0x56f305=this[_0x49118c(0xc1b)]();if(_0x56f305[_0x49118c(0xba7)]<=0x1&&!Window_InBattleStatus[_0x49118c(0x234)][_0x49118c(0xab8)])return;let _0x501f61=_0x56f305[_0x49118c(0x617)](this[_0x49118c(0x3e8)]);_0x501f61--;_0x501f61<0x0&&(Window_InBattleStatus[_0x49118c(0x234)][_0x49118c(0xab8)]&&(_0x56f305=this[_0x49118c(0xc1b)](!![])),_0x501f61=_0x56f305[_0x49118c(0xba7)]-0x1);const _0x5828ea=_0x56f305[_0x501f61];this[_0x49118c(0xbdd)](_0x5828ea),SoundManager['playCursor']();},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x438)]=function(){const _0x451e7c=_0x29c7b3;let _0x27a75f=this[_0x451e7c(0xc1b)]();if(_0x27a75f['length']<=0x1&&!Window_InBattleStatus[_0x451e7c(0x234)][_0x451e7c(0xab8)])return;let _0x57036b=_0x27a75f['indexOf'](this[_0x451e7c(0x3e8)]);_0x57036b++;_0x57036b>=_0x27a75f['length']&&(Window_InBattleStatus[_0x451e7c(0x234)][_0x451e7c(0xab8)]&&(_0x27a75f=this['getBattleMembers'](!![])),_0x57036b=0x0);const _0x538118=_0x27a75f[_0x57036b];this[_0x451e7c(0xbdd)](_0x538118),SoundManager['playCursor']();},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0xc1b)]=function(_0x40ac1f){const _0x45cc35=_0x29c7b3;let _0x95fb3e=[];const _0x5cc2f2=_0x40ac1f?this['_battler'][_0x45cc35(0x773)]():this['_battler'][_0x45cc35(0x922)]();return _0x5cc2f2===$gameParty?_0x95fb3e=$gameParty['battleMembers']():_0x95fb3e=$gameTroop[_0x45cc35(0x89d)](),_0x95fb3e['remove'](null);},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x592)]=function(){const _0x5893a1=_0x29c7b3;Window_Base['prototype'][_0x5893a1(0x592)][_0x5893a1(0x8d6)](this),this[_0x5893a1(0x857)]();},Window_InBattleStatus['prototype'][_0x29c7b3(0x857)]=function(){const _0x17b60f=_0x29c7b3;if(this[_0x17b60f(0x752)]()){if(this['isCancelTriggered']())return this[_0x17b60f(0x7c8)]();if(Input[_0x17b60f(0x11a)]('right'))return this['nextActor']();if(Input[_0x17b60f(0x11a)](_0x17b60f(0x608)))return this['previousActor']();}},SoundManager[_0x29c7b3(0x70c)]=function(){const _0x429e56=_0x29c7b3;this[_0x429e56(0x650)](0x0);},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x752)]=function(){const _0x37c99a=_0x29c7b3;return this[_0x37c99a(0x7bb)]()&&this[_0x37c99a(0xb81)];},Window_InBattleStatus['prototype'][_0x29c7b3(0x6de)]=function(){const _0x4a3966=_0x29c7b3;if(Input['isTriggered'](_0x4a3966(0xbc1)))return!![];if(TouchInput['isCancelled']())return!![];return![];},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x7c8)]=function(){const _0x2ff5bd=_0x29c7b3;SoundManager['playCancel'](),this[_0x2ff5bd(0x30e)](),this[_0x2ff5bd(0x766)]&&(this['_statesWindow'][_0x2ff5bd(0x740)](),this['_statesWindow'][_0x2ff5bd(0x30e)]()),SceneManager['_scene']['endInBattleStatus']();},Window_InBattleStatus['prototype']['updatePageButtonVisibility']=function(){const _0xfddf32=_0x29c7b3;if(!this[_0xfddf32(0x878)])return;if(!this[_0xfddf32(0x29f)])return;const _0x295655=$gameParty[_0xfddf32(0xaad)]()[_0xfddf32(0xba7)]>0x0||Window_InBattleStatus[_0xfddf32(0x234)][_0xfddf32(0xab8)];this[_0xfddf32(0x878)][_0xfddf32(0xb81)]=_0x295655,this[_0xfddf32(0x29f)][_0xfddf32(0xb81)]=_0x295655;},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x842)]=function(){const _0x24d3a6=_0x29c7b3;Window_StatusBase[_0x24d3a6(0xc03)]['refresh']['call'](this);if(this[_0x24d3a6(0x6c1)])this[_0x24d3a6(0x6c1)][_0x24d3a6(0x459)]();this['contents'][_0x24d3a6(0x917)](),this[_0x24d3a6(0x58c)][_0x24d3a6(0x917)]();if(!this[_0x24d3a6(0x3e8)])return;this['drawBattlerData']();},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x7b8)]=function(){const _0x286c83=_0x29c7b3;if(VisuMZ[_0x286c83(0x2e2)][_0x286c83(0xc14)][_0x286c83(0x63c)]['StatusWindow_DrawJS'])return VisuMZ[_0x286c83(0x2e2)]['Settings'][_0x286c83(0x63c)]['StatusWindow_DrawJS']['call'](this);{const _0x10f406=this[_0x286c83(0x900)]()/0x2,_0x457342=ImageManager[_0x286c83(0x61b)],_0x5895b2=_0x457342/0x2-this['lineHeight']()*1.5;this[_0x286c83(0x4fe)](this['_battler'],_0x10f406+0x1,0x0,ImageManager[_0x286c83(0x220)],_0x457342),this[_0x286c83(0x1f1)](this[_0x286c83(0x3e8)],_0x10f406+0xb4,_0x5895b2);}{let _0x25be9f=this[_0x286c83(0x8c3)](),_0x5786ec=0x0,_0x3816b7=Math[_0x286c83(0xc1a)](this[_0x286c83(0x8c3)]()/0x2),_0x1137f1=0x0;const _0x5f1e60=this['displayedParams']();let _0x309600=_0x5786ec;const _0x5eba9f=this[_0x286c83(0x2d6)]-ImageManager[_0x286c83(0x61b)],_0x4b70c7=Math[_0x286c83(0xc1a)](_0x5f1e60[_0x286c83(0xba7)]/0x2)*this[_0x286c83(0x956)]();let _0x2ac872=Math['ceil']((_0x5eba9f-_0x4b70c7)/0x2)+ImageManager[_0x286c83(0x61b)],_0x17bcfe=Math[_0x286c83(0x1ec)](_0x25be9f/0x2);this[_0x286c83(0x766)]['y']!==0x0&&(this[_0x286c83(0x766)]['y']=_0x2ac872);for(const _0x4ce7ac of _0x5f1e60){this[_0x286c83(0x2ca)](_0x309600,_0x2ac872,_0x17bcfe,this['lineHeight']()),this[_0x286c83(0x93e)](_0x4ce7ac,_0x309600,_0x2ac872,_0x17bcfe),_0x1137f1++,_0x1137f1%0x2===0x0?(_0x309600=_0x5786ec,_0x2ac872+=this[_0x286c83(0x956)]()):_0x309600=_0x3816b7;}}},Window_InBattleStatus['prototype'][_0x29c7b3(0x7f9)]=function(){const _0x54ca53=_0x29c7b3;return VisuMZ[_0x54ca53(0x2e2)][_0x54ca53(0xc14)][_0x54ca53(0x63c)][_0x54ca53(0x590)];},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x4fe)]=function(_0x8cd5ef,_0x44625c,_0x26ea6e,_0x3587ed,_0x2fcf00){const _0x52be42=_0x29c7b3;if(_0x8cd5ef['isActor']())switch(this['graphicType']()){case'none':break;case _0x52be42(0x4ad):this['drawItemActorSprite'](_0x8cd5ef,_0x44625c,_0x26ea6e+0x1,_0x3587ed,_0x2fcf00-0x2);break;case'svbattler':this[_0x52be42(0xaa7)](_0x8cd5ef,_0x44625c,_0x26ea6e+0x1,_0x3587ed,_0x2fcf00-0x2);break;default:this[_0x52be42(0x803)](_0x8cd5ef,_0x44625c,_0x26ea6e,_0x3587ed,_0x2fcf00);break;}else this['drawEnemyBattler'](_0x8cd5ef,_0x44625c,_0x26ea6e,_0x3587ed,_0x2fcf00);},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x803)]=function(_0x1e7ee9,_0x42524a,_0x507531,_0x39ac5e,_0x3ea2fd){const _0x553d66=_0x29c7b3;_0x39ac5e=_0x39ac5e||ImageManager[_0x553d66(0x220)],_0x3ea2fd=_0x3ea2fd||ImageManager[_0x553d66(0x61b)];const _0x3efec9=ImageManager['faceWidth'],_0x2c7a96=_0x3ea2fd-0x2,_0x1cc34a=_0x42524a+Math[_0x553d66(0x1ec)]((_0x39ac5e-_0x3efec9)/0x2);this['constructor']===Window_MenuStatus&&this[_0x553d66(0x3ea)](_0x1e7ee9['isBattleMember']()),this['drawActorFace'](_0x1e7ee9,_0x1cc34a,_0x507531,_0x3efec9,_0x2c7a96),this[_0x553d66(0x3ea)](!![]);},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x817)]=function(_0x586607,_0x3ec1b9,_0x31dd44,_0x4156a0,_0x5bd11f){const _0x41a133=_0x29c7b3;_0x4156a0=_0x4156a0||ImageManager[_0x41a133(0x220)],_0x5bd11f=_0x5bd11f||ImageManager[_0x41a133(0x61b)];const _0x59b895=_0x586607[_0x41a133(0x796)](),_0x36acd9=_0x586607[_0x41a133(0x642)](),_0x2b05b9=ImageManager[_0x41a133(0xb4e)](_0x59b895),_0x235701=ImageManager[_0x41a133(0x6a7)](_0x59b895),_0x138dfb=_0x2b05b9[_0x41a133(0x580)]/(_0x235701?0x3:0xc),_0x4249e3=_0x2b05b9[_0x41a133(0x719)]/(_0x235701?0x4:0x8),_0x44ccf5=_0x4156a0,_0x3f3996=_0x5bd11f-0x2,_0x5ba912=_0x3ec1b9+Math[_0x41a133(0x1ec)](_0x44ccf5/0x2),_0x2f63f1=_0x31dd44+Math[_0x41a133(0xc1a)]((_0x5bd11f+_0x4249e3)/0x2);this[_0x41a133(0xba3)]===Window_MenuStatus&&this['changePaintOpacity'](_0x586607[_0x41a133(0x8e4)]());const _0xffc921=Math['min'](_0x4156a0,_0x138dfb),_0x31439d=Math[_0x41a133(0xbce)](_0x5bd11f,_0x4249e3),_0x202007=Math[_0x41a133(0x1ec)](_0x3ec1b9+Math[_0x41a133(0xbaf)](_0x4156a0-_0x138dfb,0x0)/0x2),_0x49d3ab=Math[_0x41a133(0x1ec)](_0x31dd44+Math[_0x41a133(0xbaf)](_0x5bd11f-_0x4249e3,0x0)/0x2),_0x44c5e8=_0x235701?0x0:_0x36acd9,_0x34a1a5=(_0x44c5e8%0x4*0x3+0x1)*_0x138dfb,_0x19e9fc=Math[_0x41a133(0x1ec)](_0x44c5e8/0x4)*0x4*_0x4249e3;this[_0x41a133(0x6b6)][_0x41a133(0x554)](_0x2b05b9,_0x34a1a5,_0x19e9fc,_0xffc921,_0x31439d,_0x202007,_0x49d3ab),this[_0x41a133(0x3ea)](!![]);},Window_InBattleStatus['prototype'][_0x29c7b3(0xaa7)]=function(_0x3e1731,_0xc20fae,_0x289ad2,_0x579d8c,_0x471203,_0x211966){const _0x453f8f=_0x29c7b3;_0x579d8c=_0x579d8c||ImageManager[_0x453f8f(0x220)],_0x471203=_0x471203||ImageManager[_0x453f8f(0x61b)];const _0x1851fe=ImageManager[_0x453f8f(0x235)](_0x211966?_0x3e1731['svBattlerName']():_0x3e1731[_0x453f8f(0x84c)]()),_0x229d10=_0x1851fe[_0x453f8f(0x580)]/ImageManager[_0x453f8f(0x711)],_0x559645=_0x1851fe['height']/ImageManager['svActorVertCells'],_0x251f87=_0x579d8c,_0x2e5705=_0x471203-0x2,_0x2ff7c3=_0xc20fae+Math['floor'](_0x251f87/0x2),_0xf117c2=_0x289ad2+Math[_0x453f8f(0xc1a)]((_0x471203+_0x559645)/0x2);this[_0x453f8f(0xba3)]===Window_MenuStatus&&this['changePaintOpacity'](_0x3e1731[_0x453f8f(0x8e4)]());const _0x557d0d=_0x3e1731['hasStaticSvBattler']&&_0x3e1731['hasStaticSvBattler'](),_0x111978=0x0,_0x2f00ef=0x0,_0x54ca47=_0x557d0d?_0x1851fe[_0x453f8f(0x580)]:_0x229d10,_0x20ba04=_0x557d0d?_0x1851fe[_0x453f8f(0x719)]:_0x559645,_0x3bad28=Math[_0x453f8f(0xbce)](0x1,_0x579d8c/_0x54ca47,_0x471203/_0x20ba04),_0x52111e=_0x3bad28*_0x54ca47,_0x4ad4dc=_0x3bad28*_0x20ba04,_0x1b603d=Math['floor'](_0xc20fae+Math['max'](_0x579d8c-_0x52111e,0x0)/0x2),_0x2a1b02=Math[_0x453f8f(0x1ec)](_0x289ad2+Math[_0x453f8f(0xbaf)](_0x471203-_0x4ad4dc,0x0)/0x2);this[_0x453f8f(0x6b6)][_0x453f8f(0x554)](_0x1851fe,_0x111978,_0x2f00ef,_0x54ca47,_0x20ba04,_0x1b603d,_0x2a1b02,_0x52111e,_0x4ad4dc),this[_0x453f8f(0x3ea)](!![]);},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x271)]=function(_0x1e59f4,_0x151158,_0x1651c5,_0x4ba6ea,_0x52f7b7){const _0x47f34f=_0x29c7b3;if(_0x1e59f4['hasSvBattler']()){this[_0x47f34f(0xaa7)](_0x1e59f4,_0x151158,_0x1651c5+0x1,_0x4ba6ea,_0x52f7b7-0x2,!![]);return;}const _0x2e3144=_0x1e59f4[_0x47f34f(0x84c)](),_0x417970=$gameSystem[_0x47f34f(0x204)]()?ImageManager['loadSvEnemy'](_0x2e3144):ImageManager['loadEnemy'](_0x2e3144);_0x417970['addLoadListener'](this['processDrawEnemyBattler']['bind'](this,_0x1e59f4,_0x417970,_0x151158,_0x1651c5,_0x4ba6ea,_0x52f7b7));},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x7fa)]=function(_0x38a31d,_0x38c07c,_0x1a5ef7,_0x737605,_0x3c5906,_0x372fb6){const _0x3b2196=_0x29c7b3;if(this['_battler']!==_0x38a31d)return;this[_0x3b2196(0x6c1)][_0x3b2196(0xb6f)](),this[_0x3b2196(0x6c1)][_0x3b2196(0xc2a)]=new Bitmap(_0x3c5906,_0x372fb6);const _0x452fab=_0x3c5906,_0x5ea00c=_0x372fb6,_0x317ff=Math[_0x3b2196(0xbce)](_0x452fab,_0x5ea00c),_0x28ab7c=this['_enemySprite']['bitmap'],_0x1cc9a6=Math[_0x3b2196(0xbce)](0x1,_0x317ff/_0x38c07c[_0x3b2196(0x580)],_0x317ff/_0x38c07c[_0x3b2196(0x719)]),_0x37a17e=_0x38c07c[_0x3b2196(0x580)]*_0x1cc9a6,_0x2adb37=_0x38c07c[_0x3b2196(0x719)]*_0x1cc9a6,_0x50d971=Math[_0x3b2196(0x50f)]((_0x452fab-_0x37a17e)/0x2),_0x3054f1=Math['round']((_0x5ea00c-_0x2adb37)/0x2);_0x28ab7c[_0x3b2196(0x554)](_0x38c07c,0x0,0x0,_0x38c07c[_0x3b2196(0x580)],_0x38c07c[_0x3b2196(0x719)],_0x50d971,_0x3054f1,_0x37a17e,_0x2adb37),this[_0x3b2196(0x6c1)][_0x3b2196(0x3f8)]['x']=0.5,this[_0x3b2196(0x6c1)][_0x3b2196(0x3f8)]['y']=0x1,this[_0x3b2196(0x6c1)]['x']=_0x1a5ef7+_0x3c5906/0x2+this[_0x3b2196(0x5bb)],this['_enemySprite']['y']=_0x737605+_0x372fb6+this[_0x3b2196(0x5bb)],this[_0x3b2196(0x6c1)]['setHue'](this[_0x3b2196(0x3e8)][_0x3b2196(0x972)]());},Window_InBattleStatus[_0x29c7b3(0xc03)]['drawActorName']=function(_0x4ff5d9,_0x3f540b,_0x5b6994,_0x3f282a){const _0x1e045c=_0x29c7b3;if(_0x4ff5d9[_0x1e045c(0xb3d)]())_0x3f282a=this['innerWidth']-_0x3f540b;Window_StatusBase['prototype'][_0x1e045c(0x787)][_0x1e045c(0x8d6)](this,_0x4ff5d9,_0x3f540b,_0x5b6994,_0x3f282a);},Window_InBattleStatus['prototype'][_0x29c7b3(0x7c7)]=function(_0x356797,_0x7fa4ff,_0x51fa04,_0xd5bf6f){const _0x55271b=_0x29c7b3;if(!_0x356797[_0x55271b(0xa27)]())return;Window_StatusBase[_0x55271b(0xc03)][_0x55271b(0x7c7)][_0x55271b(0x8d6)](this,_0x356797,_0x7fa4ff,_0x51fa04,_0xd5bf6f);},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0xaa9)]=function(_0x5d7fff,_0x4af401,_0x1e8b1c){const _0x290ad4=_0x29c7b3;if(_0x5d7fff[_0x290ad4(0xb3d)]()&&!Window_InBattleStatus['SETTINGS'][_0x290ad4(0x37e)])return;Window_StatusBase[_0x290ad4(0xc03)][_0x290ad4(0xaa9)][_0x290ad4(0x8d6)](this,_0x5d7fff,_0x4af401,_0x1e8b1c);},Window_InBattleStatus[_0x29c7b3(0xc03)]['drawActorIcons']=function(_0x4a5b61,_0x21e53a,_0x494207,_0x41b52a){const _0x35ccf1=_0x29c7b3;_0x4a5b61[_0x35ccf1(0x759)]=!![],Window_StatusBase['prototype'][_0x35ccf1(0x561)][_0x35ccf1(0x8d6)](this,_0x4a5b61,_0x21e53a,_0x494207,_0x41b52a),_0x4a5b61['_hideAllIcons']=undefined;},VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0x858)]=Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x9e1)],Game_BattlerBase[_0x29c7b3(0xc03)]['allIcons']=function(){const _0x1479fb=_0x29c7b3;if(this[_0x1479fb(0x759)])return[];return VisuMZ['BattleCore'][_0x1479fb(0x858)][_0x1479fb(0x8d6)](this);},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0xaa3)]=function(_0x4b2a85,_0x2dac9c,_0x4107ef,_0xdb2933){const _0x565ffd=_0x29c7b3,_0x52b9eb=_0x565ffd(0xafe)['format'](_0x4b2a85[_0x565ffd(0x6db)](),_0x2dac9c);let _0x58e805=![];if(_0x4b2a85['isEnemy']()){const _0x4b0d1e=Window_InBattleStatus[_0x565ffd(0x234)];if(_0x2dac9c==='hp'&&_0x4b0d1e['enemyHpGaugeRate'])_0x58e805=!![];if(_0x2dac9c==='mp'&&_0x4b0d1e[_0x565ffd(0xa67)])_0x58e805=!![];if(_0x2dac9c==='tp'&&_0x4b0d1e['enemyTpGaugeRate'])_0x58e805=!![];}const _0x184780=this[_0x565ffd(0x895)](_0x52b9eb,_0x58e805?Sprite_GaugeRate:Sprite_Gauge);_0x184780['setup'](_0x4b2a85,_0x2dac9c),_0x184780['move'](_0x4107ef,_0xdb2933),_0x184780[_0x565ffd(0xb6f)]();},Window_InBattleStatus['prototype'][_0x29c7b3(0x8c3)]=function(){const _0x3c661a=_0x29c7b3,_0x396222=this[_0x3c661a(0x766)]?this[_0x3c661a(0x766)][_0x3c661a(0x580)]:0x0;return this[_0x3c661a(0x6aa)]-_0x396222+this[_0x3c661a(0x5bb)]*0x2;},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x2a7)]=function(){const _0x410943=_0x29c7b3;return Imported[_0x410943(0x50c)]?VisuMZ[_0x410943(0x86c)][_0x410943(0xc14)][_0x410943(0x4f0)]['ExtDisplayedParams']:['MaxHP',_0x410943(0x8cb),_0x410943(0x42a),'DEF',_0x410943(0xa28),_0x410943(0x8ae),_0x410943(0x2fb),_0x410943(0x187)];},Window_InBattleStatus[_0x29c7b3(0xc03)][_0x29c7b3(0x93e)]=function(_0x27f527,_0x426729,_0x8378cf,_0x47afb4){const _0x4487ef=_0x29c7b3,_0x1076c9=Window_InBattleStatus[_0x4487ef(0x234)],_0x65a3af=Imported[_0x4487ef(0x50c)];this['resetFontSettings']();let _0x2d15c2='',_0x453d86=0x0,_0x57912a=[_0x4487ef(0x784),_0x4487ef(0x903),_0x4487ef(0x42a),'DEF',_0x4487ef(0xa28),_0x4487ef(0x8ae),'AGI',_0x4487ef(0x187)][_0x4487ef(0x617)](String(_0x27f527)[_0x4487ef(0x36b)]()[_0x4487ef(0x89a)]());if(_0x65a3af)_0x2d15c2=TextManager[_0x4487ef(0x603)](_0x27f527),_0x453d86=VisuMZ[_0x4487ef(0x88e)](_0x27f527);else{if(_0x57912a>=0x0&&_0x57912a<0x8)_0x2d15c2=TextManager['param'](_0x57912a);}if(_0x57912a>=0x0&&_0x57912a<0x8){const _0x532958=this[_0x4487ef(0x3e8)][_0x4487ef(0x1ff)][_0x57912a];this['_battler']['buffIconIndex'](_0x532958,_0x57912a)!==0x0&&(_0x453d86=this[_0x4487ef(0x3e8)][_0x4487ef(0x37a)](_0x532958,_0x57912a));}if(_0x2d15c2){let _0x166e43=_0x4487ef(0xb8d)[_0x4487ef(0x77d)](_0x2d15c2,_0x453d86);_0x47afb4<=0xd4&&(_0x166e43=_0x4487ef(0x437)['format'](_0x2d15c2));const _0x58fb16=_0x47afb4<=0xd4?'\x20':'\x20\x20';this[_0x4487ef(0x914)](_0x58fb16+_0x166e43,_0x426729,_0x8378cf);}this[_0x4487ef(0x654)]();let _0x2bffad='';_0x65a3af?_0x2bffad=this[_0x4487ef(0x3e8)][_0x4487ef(0x3f5)](_0x27f527,!![]):_0x2bffad=String(this[_0x4487ef(0x3e8)][_0x4487ef(0x8fa)](_0x57912a));if(this['_battler'][_0x4487ef(0xb3d)]()){let _0x2ac23b=!![];if(_0x1076c9[_0x4487ef(0x84b)])_0x2ac23b=![];if(_0x1076c9[_0x4487ef(0x205)]&&BattleManager[_0x4487ef(0x700)]())_0x2ac23b=![];if(_0x1076c9[_0x4487ef(0xaf7)]&&$gameSystem[_0x4487ef(0x40e)]()[_0x4487ef(0xba2)](this[_0x4487ef(0x3e8)][_0x4487ef(0x2fe)]()))_0x2ac23b=![];_0x2ac23b&&(_0x2bffad=_0x1076c9[_0x4487ef(0x291)]);}if(_0x57912a>=0x0&&_0x57912a<0x8){if(this[_0x4487ef(0x3e8)][_0x4487ef(0x351)](_0x57912a)>0x1)_0x2bffad=_0x1076c9['buffValueFmt'][_0x4487ef(0x77d)](_0x2bffad),Imported[_0x4487ef(0xacd)]?this['changeTextColor'](ColorManager['buffColor']()):this[_0x4487ef(0xb69)](ColorManager['powerUpColor']());else this[_0x4487ef(0x3e8)][_0x4487ef(0x351)](_0x57912a)<0x1&&(_0x2bffad=_0x1076c9[_0x4487ef(0x9e7)][_0x4487ef(0x77d)](_0x2bffad),Imported['VisuMZ_1_SkillsStatesCore']?this[_0x4487ef(0xb69)](ColorManager[_0x4487ef(0xc12)]()):this[_0x4487ef(0xb69)](ColorManager[_0x4487ef(0x835)]()));}if(String(_0x2bffad)){const _0x3e3cc8=_0x47afb4<=0xd4?'\x20':'\x20\x20';this[_0x4487ef(0x946)](_0x2bffad+_0x3e3cc8,_0x426729,_0x8378cf,_0x47afb4,_0x4487ef(0xc23));}},Window_InBattleStatus['prototype']['drawDarkRect']=function(_0x12ca6c,_0x4641e1,_0x524ff8,_0x2794cc){const _0x5c5ed8=_0x29c7b3;_0x2794cc=_0x2794cc||this[_0x5c5ed8(0x956)](),this[_0x5c5ed8(0x58c)][_0x5c5ed8(0xa43)]=0xa0;const _0x7ad2b7=ColorManager[_0x5c5ed8(0x62c)]();this[_0x5c5ed8(0x58c)][_0x5c5ed8(0x292)](_0x12ca6c+0x1,_0x4641e1+0x1,_0x524ff8-0x2,_0x2794cc-0x2,_0x7ad2b7),this['contentsBack'][_0x5c5ed8(0xa43)]=0xff;},Game_BattlerBase[_0x29c7b3(0xc03)][_0x29c7b3(0x351)]=function(_0x3d147e){const _0x55f9c4=_0x29c7b3;let _0x412511=0x1;_0x412511*=this['paramBuffRate'](_0x3d147e);for(const _0x507b83 of this[_0x55f9c4(0x96b)]()){if(!_0x507b83)continue;for(const _0x1759c8 of _0x507b83[_0x55f9c4(0x624)]){if(!_0x1759c8)continue;if(_0x1759c8[_0x55f9c4(0x1ee)]!==Game_BattlerBase[_0x55f9c4(0x58f)])continue;if(_0x1759c8[_0x55f9c4(0xbf8)]!==_0x3d147e)continue;_0x412511*=_0x1759c8[_0x55f9c4(0x8b1)];}}return _0x412511;};function Window_InBattleStatusStates(){const _0x49b649=_0x29c7b3;this[_0x49b649(0x1a0)](...arguments);}Window_InBattleStatusStates[_0x29c7b3(0xc03)]=Object[_0x29c7b3(0x57e)](Window_Command[_0x29c7b3(0xc03)]),Window_InBattleStatusStates['prototype']['constructor']=Window_InBattleStatusStates,Window_InBattleStatusStates[_0x29c7b3(0x234)]={'maxWidth':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)][_0x29c7b3(0x444)]??0x180,'drawStates':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)][_0x29c7b3(0x8b5)]??!![],'drawBuffs':VisuMZ['BattleCore'][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)]['drawBuffs']??!![],'drawDebuffs':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)][_0x29c7b3(0x8fc)]??!![],'normalIcon':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)][_0x29c7b3(0x49e)]??0x54,'normalText':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)]['InBattleStatus']['normalText']??_0x29c7b3(0x450),'normalHelp':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)]['normalHelp']??_0x29c7b3(0x962),'stateHelpFmt':VisuMZ[_0x29c7b3(0x2e2)]['Settings'][_0x29c7b3(0x63c)]['stateHelpFmt']??_0x29c7b3(0x103),'buffNameFmt':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)][_0x29c7b3(0x341)]??_0x29c7b3(0xb8f),'buffHelpFmt':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)]['InBattleStatus'][_0x29c7b3(0x847)]??_0x29c7b3(0x3e1),'debuffNameFmt':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)][_0x29c7b3(0x63c)][_0x29c7b3(0x99c)]??'%1▼','debuffHelpFmt':VisuMZ['BattleCore'][_0x29c7b3(0xc14)]['InBattleStatus'][_0x29c7b3(0x53a)]??_0x29c7b3(0xa88),'actionsFmt':VisuMZ[_0x29c7b3(0x2e2)]['Settings'][_0x29c7b3(0x63c)][_0x29c7b3(0xa62)]??_0x29c7b3(0x1ab),'turnsFmt':VisuMZ[_0x29c7b3(0x2e2)]['Settings']['InBattleStatus'][_0x29c7b3(0x261)]??'\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','passiveText':VisuMZ[_0x29c7b3(0x2e2)][_0x29c7b3(0xc14)]['InBattleStatus'][_0x29c7b3(0x983)]??'\x5cC[4](Passive)'},Window_InBattleStatusStates[_0x29c7b3(0xc03)][_0x29c7b3(0x1a0)]=function(_0x959959){const _0x5650b4=_0x29c7b3;this['_battler']=null,Window_Command[_0x5650b4(0xc03)][_0x5650b4(0x1a0)][_0x5650b4(0x8d6)](this,_0x959959),this['deactivate'](),this[_0x5650b4(0x740)](),this[_0x5650b4(0x64d)](0x2);},Window_InBattleStatusStates[_0x29c7b3(0xc03)]['setBattler']=function(_0x46df53){const _0x34449c=_0x29c7b3;this[_0x34449c(0x3e8)]=_0x46df53||null,this[_0x34449c(0x842)](),this[_0x34449c(0x277)](0x0),this['scrollTo'](0x0,0x0),this['activate']();},Window_InBattleStatusStates[_0x29c7b3(0xc03)]['playOkSound']=function(){},Window_InBattleStatusStates[_0x29c7b3(0xc03)][_0x29c7b3(0x206)]=function(){const _0x3822a7=_0x29c7b3;if(!this[_0x3822a7(0x3e8)])return;this['addBattlerAspect'](),this[_0x3822a7(0x990)](),this[_0x3822a7(0x8e8)](),this['addNormalStatus']();},Window_InBattleStatusStates[_0x29c7b3(0xc03)][_0x29c7b3(0xb74)]=function(){const _0x21d2f9=_0x29c7b3;if(!this[_0x21d2f9(0x3e8)][_0x21d2f9(0xb3d)]())return;if(!this['_battler'][_0x21d2f9(0x611)]())return;const _0x1fbce1=this[_0x21d2f9(0x3e8)][_0x21d2f9(0x98d)]()['name'],_0x437565=this[_0x21d2f9(0x3e8)][_0x21d2f9(0x98d)]()[_0x21d2f9(0x66d)],_0x3812fa=this[_0x21d2f9(0x3e8)][_0x21d2f9(0x98d)]()[_0x21d2f9(0xae9)];let _0x1fe450='';_0x3812fa[_0x21d2f9(0x290)](/#(.*?)/gi)&&Imported[_0x21d2f9(0x149)]?_0x1fe450=_0x21d2f9(0x758)[_0x21d2f9(0x77d)](_0x437565,_0x1fbce1,_0x3812fa):_0x1fe450=_0x21d2f9(0xb0c)[_0x21d2f9(0x77d)](_0x437565,_0x1fbce1,_0x3812fa),this[_0x21d2f9(0xb4a)](_0x1fe450,_0x21d2f9(0x192),!![]);},Window_InBattleStatusStates['prototype'][_0x29c7b3(0x990)]=function(){const _0x503ee4=_0x29c7b3;if(!Window_InBattleStatusStates[_0x503ee4(0x234)][_0x503ee4(0x8b5)])return;for(const _0x308ff8 of this[_0x503ee4(0x3e8)][_0x503ee4(0x96b)]()){if(!this[_0x503ee4(0x3d1)](_0x308ff8))continue;const _0x1d8d57=this['makeStateName'](_0x308ff8);this[_0x503ee4(0xb4a)](_0x1d8d57,_0x503ee4(0xa34),!![],_0x308ff8['id']);}},Window_InBattleStatusStates[_0x29c7b3(0xc03)][_0x29c7b3(0x3d1)]=function(_0x25e762){const _0x1433c5=_0x29c7b3;if(!_0x25e762)return![];if(_0x25e762['name'][_0x1433c5(0x89a)]()==='')return![];if(_0x25e762['name'][_0x1433c5(0xba2)](_0x1433c5(0xb0a)))return![];if(_0x25e762[_0x1433c5(0x66d)]<=0x0)return![];if(_0x25e762[_0x1433c5(0x4c8)])return![];return!![];},Window_InBattleStatusStates['prototype']['makeStateName']=function(_0x17ba68){const _0x439bbe=_0x29c7b3;let _0x5ee4ed=_0x17ba68[_0x439bbe(0x66d)],_0x168181=_0x17ba68[_0x439bbe(0x161)],_0x96b4f2='0';return Imported[_0x439bbe(0xacd)]&&Imported[_0x439bbe(0x149)]&&(_0x96b4f2=String(ColorManager[_0x439bbe(0x36e)](_0x17ba68))),_0x96b4f2['match'](/#(.*?)/gi)?'\x5cI[%1]\x5cHEXCOLOR<%3>%2'['format'](_0x5ee4ed,_0x168181,_0x96b4f2):_0x439bbe(0xb0c)[_0x439bbe(0x77d)](_0x5ee4ed,_0x168181,_0x96b4f2);},Window_InBattleStatusStates['prototype'][_0x29c7b3(0x8e8)]=function(){const _0x56a74e=_0x29c7b3;for(let _0x11c9f5=0x0;_0x11c9f5<0x8;_0x11c9f5++){const _0x118f3c=this['makeBuffName'](_0x11c9f5);if(!_0x118f3c)continue;this['addCommand'](_0x118f3c,_0x56a74e(0x7a3),!![],_0x11c9f5);}},Window_InBattleStatusStates[_0x29c7b3(0xc03)][_0x29c7b3(0x3f7)]=function(_0x52deb4){const _0x431c92=_0x29c7b3;if(!this[_0x431c92(0x3e8)][_0x431c92(0x163)](_0x52deb4)&&!this[_0x431c92(0x3e8)][_0x431c92(0x3ce)](_0x52deb4))return'';const _0x25e60a=Window_InBattleStatusStates[_0x431c92(0x234)];if(this['_battler'][_0x431c92(0x163)](_0x52deb4)&&!_0x25e60a[_0x431c92(0xb61)])return'';if(this[_0x431c92(0x3e8)][_0x431c92(0x3ce)](_0x52deb4)&&!_0x25e60a['drawDebuffs'])return'';const _0x346cd7=this[_0x431c92(0x3e8)]['_buffs'][_0x52deb4];let _0xa9fbae=this[_0x431c92(0x3e8)][_0x431c92(0x37a)](_0x346cd7,_0x52deb4),_0x50acdd=TextManager[_0x431c92(0x8fa)](_0x52deb4);_0x346cd7>0x0?_0x50acdd=_0x25e60a[_0x431c92(0x341)][_0x431c92(0x77d)](_0x50acdd):_0x50acdd=_0x25e60a[_0x431c92(0x99c)][_0x431c92(0x77d)](_0x50acdd);let _0x153cee=0x0;return Imported[_0x431c92(0xacd)]&&(_0x153cee=_0x346cd7>0x0?ColorManager[_0x431c92(0x905)]():ColorManager[_0x431c92(0xc12)]()),String(_0x153cee)['match'](/#(.*?)/gi)?'\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0x431c92(0x77d)](_0xa9fbae,_0x50acdd,_0x153cee):'\x5cI[%1]\x5cC[%3]%2'[_0x431c92(0x77d)](_0xa9fbae,_0x50acdd,_0x153cee);},Window_InBattleStatusStates[_0x29c7b3(0xc03)]['addNormalStatus']=function(){const _0x4b610f=_0x29c7b3;if(this['_list'][_0x4b610f(0xba7)]>0x0)return;const _0xe49ef5=Window_InBattleStatusStates[_0x4b610f(0x234)],_0x21d538=_0xe49ef5['normalIcon'],_0x47e67d=_0xe49ef5[_0x4b610f(0x649)],_0x3e2456=_0x4b610f(0x88f)['format'](_0x21d538,_0x47e67d);this[_0x4b610f(0xb4a)](_0x3e2456,'normal');},Window_InBattleStatusStates['prototype'][_0x29c7b3(0x71d)]=function(_0x3c831c){const _0x1c1a4b=_0x29c7b3,_0x104863=this[_0x1c1a4b(0x657)](_0x3c831c);this[_0x1c1a4b(0x3ea)](0xff),this[_0x1c1a4b(0x914)](this[_0x1c1a4b(0x4a9)](_0x3c831c),_0x104863['x'],_0x104863['y']),this[_0x1c1a4b(0x307)](_0x3c831c,_0x104863);},Window_InBattleStatusStates['prototype'][_0x29c7b3(0x307)]=function(_0x55a795,_0x26b6ab){const _0x4215dc=_0x29c7b3;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;const _0x446e31=this[_0x4215dc(0x36d)](_0x55a795),_0x5285be=_0x26b6ab['x']+0x2;if(_0x446e31==='state'){const _0x4bbcfa=$dataStates[this['_list'][_0x55a795][_0x4215dc(0xbd0)]||0x0];this[_0x4215dc(0x202)](this['_battler'],_0x4bbcfa,_0x5285be,_0x26b6ab['y']),this[_0x4215dc(0x81a)](this[_0x4215dc(0x3e8)],_0x4bbcfa,_0x5285be,_0x26b6ab['y']);}else{if(_0x446e31===_0x4215dc(0x7a3)){const _0x5b1782=this[_0x4215dc(0x3ad)][_0x55a795][_0x4215dc(0xbd0)];this[_0x4215dc(0x4c3)](this[_0x4215dc(0x3e8)],_0x5b1782,_0x5285be,_0x26b6ab['y']),this[_0x4215dc(0xa45)](this[_0x4215dc(0x3e8)],_0x5b1782,_0x5285be,_0x26b6ab['y']);}}},Window_InBattleStatusStates['prototype'][_0x29c7b3(0x1c2)]=function(){const _0x576b3c=_0x29c7b3,_0x3be39a=this[_0x576b3c(0x802)]();let _0x4d858d='';if(_0x3be39a===_0x576b3c(0x192))_0x4d858d=this[_0x576b3c(0x3e8)][_0x576b3c(0x98d)]()[_0x576b3c(0xaff)];else{if(_0x3be39a===_0x576b3c(0xa34))_0x4d858d=this[_0x576b3c(0xba0)]();else{if(_0x3be39a===_0x576b3c(0x7a3))_0x4d858d=this[_0x576b3c(0xb6c)]();else _0x3be39a==='normal'&&(_0x4d858d=Window_InBattleStatusStates[_0x576b3c(0x234)][_0x576b3c(0x4bd)]);}}_0x4d858d?this[_0x576b3c(0xb47)][_0x576b3c(0x21d)](_0x4d858d):this['_helpWindow']['clear']();},Window_InBattleStatusStates[_0x29c7b3(0xc03)]['makeStateHelpText']=function(){const _0x31f9b2=_0x29c7b3,_0x4653c1=Window_InBattleStatusStates[_0x31f9b2(0x234)],_0x16429b=this['currentExt']();let _0x24a044='';const _0x21782f=$dataStates[_0x16429b]||null;if(_0x21782f){const _0x288caf=_0x4653c1[_0x31f9b2(0x9f3)];let _0x3230dd=_0x21782f[_0x31f9b2(0x5f0)]||_0x21782f['description']||'';Imported[_0x31f9b2(0xacd)]&&(_0x3230dd=_0x3230dd[_0x31f9b2(0x77d)](this[_0x31f9b2(0x3e8)]['getStateDisplay'](_0x16429b)));let _0x4ea0bf='passive';if(this[_0x31f9b2(0x3e8)][_0x31f9b2(0xaf3)](_0x16429b)){if(_0x21782f[_0x31f9b2(0xc16)]===0x0)_0x4ea0bf='none';if(_0x21782f[_0x31f9b2(0xc16)]===0x1)_0x4ea0bf='actions';if(_0x21782f[_0x31f9b2(0xc16)]===0x2)_0x4ea0bf='turns';}const _0x4560c1=this[_0x31f9b2(0x3e8)][_0x31f9b2(0x984)][_0x16429b]||0x0;let _0x355b6d=_0x31f9b2(0x7c3);Imported[_0x31f9b2(0xacd)]&&Imported[_0x31f9b2(0x149)]&&(_0x355b6d=ColorManager['stateColor'](_0x21782f),_0x355b6d['match'](/#(.*?)/gi)?_0x355b6d=_0x31f9b2(0x94f)['format'](_0x355b6d):_0x355b6d=_0x31f9b2(0xae0)[_0x31f9b2(0x77d)](_0x355b6d)),_0x24a044=_0x288caf[_0x31f9b2(0x77d)](_0x3230dd,this[_0x31f9b2(0x6ce)](_0x4ea0bf,_0x4560c1,_0x355b6d));}return _0x24a044;},Window_InBattleStatusStates[_0x29c7b3(0xc03)]['makeBuffHelpText']=function(){const _0x2ff5a6=_0x29c7b3,_0x33ec3f=Window_InBattleStatusStates['SETTINGS'],_0x2062b4=this['currentExt']();let _0x35620a='';const _0x5d975a=this['_battler'][_0x2ff5a6(0x163)](_0x2062b4),_0xb4af24=_0x5d975a?_0x2ff5a6(0x847):_0x2ff5a6(0x53a),_0x1a38c=_0x33ec3f[_0xb4af24];let _0x5dbdae='\x5cC[0]';Imported[_0x2ff5a6(0xacd)]&&Imported[_0x2ff5a6(0x149)]&&(_0x5dbdae=_0x5d975a?ColorManager[_0x2ff5a6(0x905)]():ColorManager[_0x2ff5a6(0xc12)](),_0x5dbdae['match'](/#(.*?)/gi)?_0x5dbdae=_0x2ff5a6(0x94f)[_0x2ff5a6(0x77d)](_0x5dbdae):_0x5dbdae=_0x2ff5a6(0xae0)[_0x2ff5a6(0x77d)](_0x5dbdae));const _0x450c4d=this['_battler'][_0x2ff5a6(0xad7)][_0x2062b4]||0x0;return _0x35620a=_0x1a38c[_0x2ff5a6(0x77d)](TextManager[_0x2ff5a6(0x8fa)](_0x2062b4),Math[_0x2ff5a6(0x1ec)](this[_0x2ff5a6(0x3e8)]['paramBuffRate'](_0x2062b4)*0x64)+'%',_0x5dbdae,this[_0x2ff5a6(0x6ce)](_0x2ff5a6(0x71f),_0x450c4d,_0x5dbdae)),_0x35620a;},Window_InBattleStatusStates[_0x29c7b3(0xc03)][_0x29c7b3(0x6ce)]=function(_0x56bd24,_0x1e99bb,_0x341df1){const _0x1bab37=_0x29c7b3,_0x452c88=Window_InBattleStatusStates[_0x1bab37(0x234)];let _0x2189b7=_0x452c88[_0x1bab37(0x983)];if(_0x56bd24===_0x1bab37(0x129))_0x2189b7=_0x452c88[_0x1bab37(0xa62)];if(_0x56bd24==='turns')_0x2189b7=_0x452c88['turnsFmt'];if(_0x56bd24==='none')return'';return _0x2189b7['format'](_0x1e99bb,_0x341df1);};